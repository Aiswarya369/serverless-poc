{
  "Comment": "State Machine for DLC Override Service",
  "StartAt": "Try",
  "States": {
    "Try": {
      "Type": "Parallel",
      "Branches": [
        {
          "StartAt": "Validate and Group LC Requests",
          "States": {
            "Validate and Group LC Requests": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "Payload.$": "$",
                "FunctionName": "arn:aws:lambda:${self:provider.region}:${aws:accountId}:function:load-control-statemachine-fn"
              },
              "Next": "Process LC Override Requests",
              "ResultSelector": {
                "Payload.$": "$.Payload"
              }
            },
            "Process LC Override Requests": {
              "Type": "Map",
              "ItemProcessor": {
                "StartAt": "Create LC Override Policy",
                "States": {
                  "Create LC Override Policy": {
                    "Type": "Task",
                    "Resource": "arn:aws:states:::lambda:invoke",
                    "Parameters": {
                      "Payload.$": "$",
                      "FunctionName": "arn:aws:lambda:${self:provider.region}:${aws:accountId}:function:load-control-statemachine-fn"
                    },
                    "Retry": [
                      {
                        "ErrorEquals": [
                          "Lambda.ServiceException",
                          "Lambda.AWSLambdaException",
                          "Lambda.SdkClientException"
                        ],
                        "IntervalSeconds": 2,
                        "MaxAttempts": 6,
                        "BackoffRate": 2
                      }
                    ],
                    "Next": "If Policy Creation Succeeded",
                    "ResultSelector": {
                      "Payload.$": "$.Payload"
                    }
                  },
                  "If Policy Creation Succeeded": {
                    "Type": "Choice",
                    "Choices": [
                      {
                        "Not": {
                          "Variable": "$.Payload.statusCode",
                          "NumericEquals": 200
                        },
                        "Next": "Internal Fail"
                      }
                    ],
                    "Default": "Policy Deployment Wait"
                  },
                  "Internal Fail": {
                    "Type": "Pass",
                    "End": true
                  },
                  "Policy Deployment Wait": {
                    "Type": "Wait",
                    "TimestampPath": "$.Payload.deploy_start_datetime",
                    "Next": "Deploy LC Override Policy"
                  },
                  "Deploy LC Override Policy": {
                    "Type": "Task",
                    "Resource": "arn:aws:states:::lambda:invoke",
                    "Parameters": {
                      "Payload.$": "$.Payload",
                      "FunctionName": "arn:aws:lambda:${self:provider.region}:${aws:accountId}:function:load-control-statemachine-fn"
                    },
                    "Retry": [
                      {
                        "ErrorEquals": [
                          "Lambda.ServiceException",
                          "Lambda.AWSLambdaException",
                          "Lambda.SdkClientException"
                        ],
                        "IntervalSeconds": 2,
                        "MaxAttempts": 6,
                        "BackoffRate": 2
                      }
                    ],
                    "ResultSelector": {
                      "Payload.$": "$.Payload"
                    },
                    "ResultPath": "$.deployDLCPolicyTaskResult",
                    "Next": "If Policy Deployment Succeeded"
                  },
                  "If Policy Deployment Succeeded": {
                    "Type": "Choice",
                    "Choices": [
                      {
                        "Not": {
                          "Variable": "$.deployDLCPolicyTaskResult.Payload.statusCode",
                          "NumericEquals": 200
                        },
                        "Next": "Internal Fail"
                      }
                    ],
                    "Default": "Internal Success"
                  },
                  "Internal Success": {
                    "Type": "Pass",
                    "End": true
                  }
                }
              },
              "End": true,
              "InputPath": "$.Payload",
              "Label": "Map",
              "MaxConcurrency": 0,
              "ToleratedFailurePercentage": 100
            }
          }
        }
      ],
      "Catch": [
        {
          "ErrorEquals": [
            "States.Runtime"
          ],
          "Next": "Build Failure Message"
        },
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "Next": "Build Failure Message"
        }
      ],
      "Next": "Success"
    },
    "Build Failure Message": {
      "Type": "Pass",
      "Next": "Failure Handler",
      "Parameters": {
        "errorMessage": {
            "subject": "Alarm: dlc-override-processors-sm Failed",
            "reason.$": "$.Error",
            "stackTrace.$": "$.Cause",
            "time.$": "$$.State.EnteredTime",
            "priority": "P1",
            "accountId": "None"
        }
      }
    },
    "Failure Handler": {
      "Type": "Task",
      "Resource": "arn:aws:states:::sns:publish",
      "Parameters": {
        "Subject": "Alarm: DLC Override State Machine Failed",
        "Message.$": "States.JsonToString($.errorMessage)",
        "MessageAttributes": {
          "alias": {
            "DataType": "String",
            "StringValue.$": "$.errorMessage.subject"
          },
          "tags": {
            "DataType": "String",
            "StringValue": "MSI, Load Control"
          },
          "priority": {
            "DataType": "String",
            "StringValue.$": "$.errorMessage.priority"
          }
        },
        "TopicArn": "${self:custom.SUPPORT_SNS_ARN}"
      },
      "Next": "Fail"
    },
    "Success": {
      "Type": "Succeed"
    },
    "Fail": {
      "Type": "Fail"
    }
  }
}