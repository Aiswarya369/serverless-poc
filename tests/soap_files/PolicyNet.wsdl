<?xml version="1.0" encoding="UTF-8"?>
<!--PolicyNet v.6.0.5--><definitions name="PolicyNet" targetNamespace="urn:policynet/v5" xmlns:tns="urn:policynet/v5" xmlns:SOAP-ENV="http://www.w3.org/2003/05/soap-envelope" xmlns:SOAP-ENC="http://www.w3.org/2003/05/soap-encoding" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xop="http://www.w3.org/2004/08/xop/include" xmlns:xmime5="http://www.w3.org/2005/05/xmlmime" xmlns:policnet="http://tempuri.org/policnet.xsd" xmlns:policynet="urn:policynet/v5" xmlns:SOAP="http://schemas.xmlsoap.org/wsdl/soap12/" xmlns:MIME="http://schemas.xmlsoap.org/wsdl/mime/" xmlns:DIME="http://schemas.xmlsoap.org/ws/2002/04/dime/wsdl/" xmlns:WSDL="http://schemas.xmlsoap.org/wsdl/" xmlns="http://schemas.xmlsoap.org/wsdl/">
  <types>
    <schema targetNamespace="http://tempuri.org/policnet.xsd" elementFormDefault="qualified" attributeFormDefault="unqualified" xmlns="http://www.w3.org/2001/XMLSchema">
      <import namespace="http://www.w3.org/2004/08/xop/include" schemaLocation="include.xsd"/>
      <import namespace="http://www.w3.org/2005/05/xmlmime" schemaLocation="xmlmime.xsd"/>
      <import namespace="http://www.w3.org/2003/05/soap-encoding" schemaLocation="soap-encoding.xsd"/>
      <complexType name="ConsumerKeySearchFilter">
        <sequence/>
        <attribute name="keyId" type="xsd:positiveInteger" use="optional"/>
        <attribute name="customerId" type="xsd:positiveInteger" use="optional"/>
      </complexType>
      <complexType name="ConsumerKey">
        <sequence/>
        <attribute name="keyId" type="xsd:positiveInteger" use="optional"/>
        <attribute name="keyName" type="xsd:string" use="optional"/>
        <attribute name="publicKey" type="xsd:string" use="optional"/>
        <attribute name="privateKey" type="xsd:string" use="optional"/>
        <attribute name="keyAlgo" type="xsd:string" use="optional"/>
        <attribute name="keyComment" type="xsd:string" use="optional"/>
        <attribute name="customerId" type="xsd:positiveInteger" use="optional"/>
        <attribute name="customerName" type="xsd:string" use="optional"/>
      </complexType>
    </schema>
    <schema targetNamespace="urn:policynet/v5" elementFormDefault="qualified" attributeFormDefault="unqualified" xmlns="http://www.w3.org/2001/XMLSchema">
      <import namespace="http://www.w3.org/2004/08/xop/include" schemaLocation="include.xsd"/>
      <import namespace="http://www.w3.org/2005/05/xmlmime" schemaLocation="xmlmime.xsd"/>
      <import namespace="http://www.w3.org/2003/05/soap-encoding" schemaLocation="soap-encoding.xsd"/>
      <simpleType name="HourMinuteString">
        <restriction base="xsd:string">
          <pattern value="([01][0-9]|2[0-3]):[0-5][0-9]"/>
        </restriction>
      </simpleType>
      <simpleType name="positiveRealNumberString">
        <annotation>
          <documentation>positive real number string limited to 15 characters for digits and optional decimal point</documentation>
        </annotation>
        <restriction base="xsd:string">
          <pattern value="[0-9]{1,7}\.{0,1}[0-9]{0,7}|[0-9]{0,7}\.{0,1}[0-9]{1,7}"/>
        </restriction>
      </simpleType>
      <simpleType name="BaseStationName">
        <restriction base="xsd:string">
          <minLength value="1"/>
          <maxLength value="65"/>
        </restriction>
      </simpleType>
      <simpleType name="deviceLocalTime">
        <restriction base="xsd:string">
          <pattern value="[12][0-9]{3}-(0[1-9]|1[0-2])-([0-2][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]"/>
        </restriction>
      </simpleType>
      <simpleType name="Mrid">
        <restriction base="xsd:string">
          <minLength value="1"/>
          <maxLength value="32"/>
        </restriction>
      </simpleType>
      <simpleType name="Name">
        <restriction base="xsd:string">
          <minLength value="1"/>
          <maxLength value="128"/>
        </restriction>
      </simpleType>
      <simpleType name="UserName">
        <annotation>
          <documentation>Username must be 3-64 characters in length.  Examples:  johnd, joe@grid-net.com</documentation>
        </annotation>
        <restriction base="xsd:string">
          <pattern value="[a-zA-Z0-9\._]{3,50}(@[a-zA-Z0-9\.\-]{1,39}){0,1}"/>
        </restriction>
      </simpleType>
      <simpleType name="SessionId">
        <restriction base="xsd:string">
          <pattern value="[A-Z0-9]{32}"/>
        </restriction>
      </simpleType>
      <simpleType name="Password">
        <restriction base="xsd:string">
          <pattern value="[^ ]{5,17}"/>
        </restriction>
      </simpleType>
      <simpleType name="PasswordLength">
        <restriction base="xsd:unsignedInt">
          <minInclusive value="5"/>
          <maxInclusive value="17"/>
        </restriction>
      </simpleType>
      <simpleType name="PasswordAge">
        <restriction base="xsd:unsignedInt">
          <minInclusive value="0"/>
          <maxInclusive value="365"/>
        </restriction>
      </simpleType>
      <simpleType name="PasswordHistoryCount">
        <restriction base="xsd:unsignedInt">
          <minInclusive value="0"/>
          <maxInclusive value="10"/>
        </restriction>
      </simpleType>
      <simpleType name="FailedLoginsCount">
        <restriction base="xsd:unsignedInt">
          <minInclusive value="3"/>
          <maxInclusive value="9"/>
        </restriction>
      </simpleType>
      <simpleType name="LockoutDuration">
        <restriction base="xsd:unsignedInt">
          <minInclusive value="15"/>
          <maxInclusive value="1440"/>
        </restriction>
      </simpleType>
      <simpleType name="ObservationWindow">
        <restriction base="xsd:unsignedInt">
          <minInclusive value="15"/>
          <maxInclusive value="1440"/>
        </restriction>
      </simpleType>
      <simpleType name="PasswordHistory">
        <restriction base="xsd:unsignedInt">
          <minInclusive value="0"/>
          <maxInclusive value="10"/>
        </restriction>
      </simpleType>
      <simpleType name="NameField">
        <restriction base="xsd:string">
          <pattern value="[a-zA-Z][a-zA-Z '\-]{1,19}"/>
        </restriction>
      </simpleType>
      <simpleType name="Description">
        <restriction base="xsd:string">
          <minLength value="1"/>
          <maxLength value="256"/>
        </restriction>
      </simpleType>
      <simpleType name="String">
        <restriction base="xsd:string">
          <minLength value="1"/>
          <maxLength value="1024"/>
        </restriction>
      </simpleType>
      <simpleType name="UtilitySerialNumber">
        <restriction base="xsd:string">
          <pattern value="[a-zA-Z0-9_\-]{1,20}"/>
        </restriction>
      </simpleType>
      <simpleType name="UtilitySerialNumberWildcard">
        <restriction base="xsd:string">
          <pattern value="[a-zA-Z0-9_*\-]{1,30}"/>
        </restriction>
      </simpleType>
      <simpleType name="ServicePointId">
        <restriction base="xsd:string">
          <pattern value="[A-Za-z0-9_\.\ \-]{1,32}"/>
        </restriction>
      </simpleType>
      <simpleType name="mfgSerialNumber">
        <restriction base="xsd:string">
          <pattern value="[A-Za-z0-9_\.\-]{1,16}"/>
        </restriction>
      </simpleType>
      <simpleType name="macAddress">
        <annotation>
          <documentation>Seventeen-byte lower-case colon-delimited mac address, or CDMA ESN/MEID.</documentation>
        </annotation>
        <restriction base="xsd:string">
          <pattern value="(([0-9a-f]{2}([:\-])){5}[0-9a-f]{2})|([0-9a-fA-F]{8})|([0-9a-fA-F]{14})"/>
        </restriction>
      </simpleType>
      <simpleType name="macAddressWildcard">
        <restriction base="xsd:string">
          <pattern value="[a-fA-F0-9*:]{1,17}"/>
        </restriction>
      </simpleType>
      <simpleType name="hanMacAddress">
        <annotation>
          <documentation>Twenty-three-byte lower-case colon-delimited mac address.</documentation>
        </annotation>
        <restriction base="xsd:string">
          <pattern value="(((([0-9a-fA-F]{2}:){5})|(([0-9a-fA-F]{2}:){7}))([0-9a-fA-F]{2}))|([a-fA-F0-9]{16})"/>
        </restriction>
      </simpleType>
      <simpleType name="boardSerialNumber">
        <restriction base="xsd:string">
          <pattern value="(G((0[0-9A-F]{2})|([1-9A-Z][0-9A-Z]{2}))[0-9A-Z]{3}[0-9A-Z]{2}[8-9A-HJ-NP-Z][1-9A-C][1-9A-HJ-NP-X][0-9A-Z]{4})|(LW[A-C][1-9A-HJ-NP-Z]{5}[AFST][1-9A-HJ-NP-Z][1-9A-C][1-9A-HJ-NP-Z][0-9]{4})|(S[0-9A-Z][0-9]{2}[0-9A-Z]{5}[8-9A-HJ-NP-Z][1-9A-C][1-9A-HJ-NP-X][0-9A-Z]{4})"/>
        </restriction>
      </simpleType>
      <simpleType name="sgcSerialNumber">
        <annotation>
          <documentation>Utility or vendor-specified SGC chassis number. Unique inside a given utility.</documentation>
        </annotation>
        <restriction base="xsd:string">
          <pattern value="([a-zA-Z0-9]){1,20}"/>
        </restriction>
      </simpleType>
      <simpleType name="sgcSerialNumberWildcard">
        <restriction base="xsd:string">
          <pattern value="([a-zA-Z0-9*]){1,20}"/>
        </restriction>
      </simpleType>
      <simpleType name="meterPasswordHex">
        <restriction base="xsd:string">
          <pattern value="([0-9a-fA-F]{20}|[0-9a-fA-F]{40}|[0-9a-fA-F]{32})"/>
        </restriction>
      </simpleType>
      <simpleType name="psemSecurityKey">
        <restriction base="xsd:string">
          <pattern value="([0-9a-fA-F]{2}){32}"/>
        </restriction>
      </simpleType>
      <simpleType name="deviceAttributeName">
        <restriction base="xsd:string">
          <pattern value="[A-Za-z0-9 _\.\-]{1,32}"/>
        </restriction>
      </simpleType>
      <simpleType name="deviceAttributeValue">
        <restriction base="xsd:string">
          <pattern value="([A-Za-z0-9 *_:,\.;\?!@#$\+\-]|&amp;){1,128}"/>
        </restriction>
      </simpleType>
      <simpleType name="orderNumber">
        <restriction base="xsd:string">
          <pattern value="[A-Za-z0-9_\-]{1,64}"/>
        </restriction>
      </simpleType>
      <simpleType name="nai">
        <annotation>
          <documentation>RFC 2486 Network Access Identifier</documentation>
        </annotation>
        <restriction base="xsd:string">
          <pattern value="[a-zA-Z0-9]{1}[A-Za-z0-9_\.\+=\?$\*#\^!%\-]{1,60}@[A-Za-z0-9\.\+\-]{2,60}\.[a-zA-Z]{2,5}"/>
        </restriction>
      </simpleType>
      <simpleType name="mdn">
        <restriction base="xsd:string">
          <pattern value="[0-9]{10}"/>
        </restriction>
      </simpleType>
      <simpleType name="msid">
        <restriction base="xsd:string">
          <pattern value="[0-9]{10}"/>
        </restriction>
      </simpleType>
      <simpleType name="msisdn">
        <restriction base="xsd:string">
          <pattern value="[0-9]{10,15}"/>
        </restriction>
      </simpleType>
      <simpleType name="min">
        <restriction base="xsd:string">
          <pattern value="[0-9]{10,15}"/>
        </restriction>
      </simpleType>
      <simpleType name="sid">
        <restriction base="xsd:string">
          <pattern value="[0-9]{5}"/>
        </restriction>
      </simpleType>
      <simpleType name="nid">
        <restriction base="xsd:string">
          <pattern value="[0-9]{5}"/>
        </restriction>
      </simpleType>
      <simpleType name="bsid">
        <restriction base="xsd:string">
          <pattern value="[0-9]*"/>
        </restriction>
      </simpleType>
      <simpleType name="Realm">
        <restriction base="xsd:string">
          <pattern value="[a-zA-Z0-9\.\-]{1,64}"/>
        </restriction>
      </simpleType>
      <simpleType name="ScaleFactor">
        <restriction base="xsd:unsignedInt">
          <minInclusive value="0"/>
          <maxInclusive value="19"/>
        </restriction>
      </simpleType>
      <simpleType name="SignalStrength">
        <restriction base="xsd:unsignedInt">
          <minInclusive value="0"/>
          <maxInclusive value="10"/>
        </restriction>
      </simpleType>
      <simpleType name="TierNumber">
        <restriction base="xsd:string">
          <pattern value="([0-9]{1,3}|Total)"/>
        </restriction>
      </simpleType>
      <simpleType name="RegisterNumber">
        <restriction base="xsd:unsignedInt">
          <minInclusive value="0"/>
          <maxInclusive value="255"/>
        </restriction>
      </simpleType>
      <simpleType name="ChannelNumber">
        <restriction base="xsd:unsignedInt">
          <minInclusive value="1"/>
          <maxInclusive value="20"/>
        </restriction>
      </simpleType>
      <simpleType name="PanChannelNumber">
        <restriction base="xsd:unsignedInt">
          <pattern value="(11|14|15|19|20|24|25)"/>
        </restriction>
      </simpleType>
      <simpleType name="PanNetworkId">
        <restriction base="xsd:unsignedInt">
          <minInclusive value="0"/>
          <maxInclusive value="65534"/>
        </restriction>
      </simpleType>
      <simpleType name="PanEui">
        <restriction base="xsd:string">
          <pattern value="([a-fA-F0-9]{2,32})"/>
        </restriction>
      </simpleType>
      <simpleType name="PanInstallCode">
        <restriction base="xsd:string">
          <pattern value="([0-9a-fA-F]{2,64})"/>
        </restriction>
      </simpleType>
      <simpleType name="PanLabel">
        <restriction base="xsd:string">
          <pattern value="[A-Za-z0-9 _\.#\-]{1,64}"/>
        </restriction>
      </simpleType>
      <simpleType name="PanCircuitId">
        <restriction base="xsd:string">
          <pattern value="[A-Za-z0-9]{1,2}"/>
        </restriction>
      </simpleType>
      <simpleType name="c1219UomIdCode">
        <restriction base="xsd:unsignedInt">
          <minInclusive value="0"/>
          <maxInclusive value="255"/>
        </restriction>
      </simpleType>
      <simpleType name="c1219Timebase">
        <restriction base="xsd:unsignedInt">
          <minInclusive value="0"/>
          <maxInclusive value="7"/>
        </restriction>
      </simpleType>
      <simpleType name="c1219Multiplier">
        <restriction base="xsd:unsignedInt">
          <minInclusive value="0"/>
          <maxInclusive value="7"/>
        </restriction>
      </simpleType>
      <simpleType name="PowerFactor">
        <restriction base="xsd:unsignedInt">
          <minInclusive value="0"/>
          <maxInclusive value="100"/>
        </restriction>
      </simpleType>
      <simpleType name="IntervalWidth">
        <restriction base="xsd:unsignedInt">
          <pattern value="(0|1|2|3|4|5|6|10|12|15|20|30|60)"/>
        </restriction>
      </simpleType>
      <simpleType name="SwitchTime">
        <restriction base="xsd:string">
          <pattern value="([0-1][0-9]|2[0-3])[0-5][0-9]"/>
        </restriction>
      </simpleType>
      <simpleType name="HourMinuteTime">
        <restriction base="xsd:string">
          <pattern value="([0-1][0-9]|2[0-3]):[0-5][0-9]"/>
        </restriction>
      </simpleType>
      <simpleType name="SpreadOn">
        <restriction base="xsd:unsignedInt">
          <minInclusive value="0"/>
          <maxInclusive value="60"/>
        </restriction>
      </simpleType>
      <simpleType name="SpreadValue">
        <annotation>
          <documentation>Randomization (in minutes) for the load control on/off times</documentation>
        </annotation>
        <restriction base="xsd:unsignedInt">
          <minInclusive value="0"/>
          <maxInclusive value="240"/>
        </restriction>
      </simpleType>
      <simpleType name="OverrideDuration">
        <restriction base="xsd:double">
          <pattern value="([1-3]?[0-9]|[4][0-8])(\.(0|5))?"/>
        </restriction>
      </simpleType>
      <simpleType name="DirectLoadControlOverrideDuration">
        <annotation>
          <documentation>duration of override period in minutes</documentation>
        </annotation>
        <restriction base="xsd:unsignedInt">
          <minInclusive value="0"/>
          <maxInclusive value="2880"/>
        </restriction>
      </simpleType>
      <simpleType name="BoostDuration">
        <restriction base="xsd:double">
          <pattern value="[1-6](\.(0|5))?"/>
        </restriction>
      </simpleType>
      <simpleType name="AutoDisconnectLoad">
        <restriction base="xsd:unsignedInt">
          <pattern value="(20|40|60|80|100|120|140|160|180|200|220|240|260|280|300|320|340|360|380|400|420|440|460|480|500|520|540|560|580|600|620|640|660|680|700|720|740|760|780|800|820|840|860|880|900|920|940|960|980|1000|1020|1040|1060|1080|1100|1120|1140|1160|1180|1200|1220|1240|1260|1280|1300|1320|1340|1360|1380|1400|1420|1440|1460|1480|1500|1520|1540|1560|1580|1600|1620|1640|1660|1680|1700|1720|1740|1760|1780|1800|1820|1840|1860|1880|1900|1920|1940|1960|1980|2000|2020|2040|2060|2080|2100|2120|2140|2160|2180|2200|2220|2240|2260|2280|2300|2320|2340|2360|2380|2400|2420|2440|2460|2480|2500)"/>
        </restriction>
      </simpleType>
      <simpleType name="AutoDisconnectTime">
        <restriction base="xsd:unsignedInt">
          <pattern value="[1-6]|10|12|15|20|30|60"/>
        </restriction>
      </simpleType>
      <simpleType name="AutoDisconnectDuration">
        <restriction base="xsd:unsignedInt">
          <minInclusive value="1"/>
          <maxInclusive value="60"/>
        </restriction>
      </simpleType>
      <simpleType name="DemandLimit">
        <restriction base="xsd:unsignedInt">
          <pattern value="(([1-9][0-9]{0,2})[02468]|[2468])0"/>
        </restriction>
      </simpleType>
      <simpleType name="SupplyCapacityInterval">
        <restriction base="xsd:unsignedInt">
          <minInclusive value="1"/>
          <maxInclusive value="10"/>
        </restriction>
      </simpleType>
      <simpleType name="EmergencyInterval">
        <restriction base="xsd:unsignedInt">
          <minInclusive value="1"/>
          <maxInclusive value="60"/>
        </restriction>
      </simpleType>
      <simpleType name="DisconnectDuration">
        <restriction base="xsd:unsignedInt">
          <minInclusive value="1"/>
          <maxInclusive value="60"/>
        </restriction>
      </simpleType>
      <simpleType name="FrequencySeconds">
        <restriction base="xsd:unsignedInt">
          <minInclusive value="10"/>
          <maxInclusive value="60"/>
        </restriction>
      </simpleType>
      <simpleType name="FrequencyMinutes">
        <restriction base="xsd:unsignedInt">
          <pattern value="(0|1|2|3|4|5|6|10|12|15|20|30|60|120|180|240|360|480|720|1440|2880|4320|5760|7200|8640|10080|11520|12960|14400|15840|17280|18720|20160|21600|23040|24480|25920|27360|28800|30240|31680|33120|34560|36000|37440|38880|40320|41760|43200|44640)"/>
        </restriction>
      </simpleType>
      <simpleType name="FrequencyHours">
        <restriction base="xsd:unsignedInt">
          <pattern value="(1|2|3|4|6|8|12|24)"/>
        </restriction>
      </simpleType>
      <simpleType name="FrequencyDays">
        <restriction base="xsd:unsignedInt">
          <minInclusive value="1"/>
          <maxInclusive value="31"/>
        </restriction>
      </simpleType>
      <simpleType name="DayOfMonth">
        <restriction base="xsd:unsignedInt">
          <minInclusive value="1"/>
          <maxInclusive value="31"/>
        </restriction>
      </simpleType>
      <simpleType name="LogLevel">
        <restriction base="xsd:unsignedInt">
          <minInclusive value="0"/>
          <maxInclusive value="3"/>
        </restriction>
      </simpleType>
      <simpleType name="BatchQty">
        <restriction base="xsd:unsignedInt">
          <minInclusive value="50"/>
        </restriction>
      </simpleType>
      <simpleType name="ClockDrift">
        <restriction base="xsd:unsignedInt">
          <minInclusive value="1"/>
          <maxInclusive value="86400"/>
        </restriction>
      </simpleType>
      <simpleType name="LpSetNumber">
        <restriction base="xsd:unsignedInt">
          <minInclusive value="1"/>
          <maxInclusive value="4"/>
        </restriction>
      </simpleType>
      <simpleType name="CoincidentNumber">
        <restriction base="xsd:unsignedInt">
          <minInclusive value="0"/>
          <maxInclusive value="255"/>
        </restriction>
      </simpleType>
      <simpleType name="Fqdn">
        <restriction base="xsd:string">
          <pattern value="([a-zA-Z]{1}[A-Za-z0-9\-]*[a-zA-Z0-9]\.)?([a-zA-Z]{1}[A-Za-z0-9\-]*[a-zA-Z0-9]\.){2}[a-zA-Z]{2,5}"/>
        </restriction>
      </simpleType>
      <simpleType name="SubjectName">
        <restriction base="xsd:string">
          <pattern value="( *(CN|OU|O|L|ST|C|STREET) *=([^,]|,)+,)+( *(CN|OU|O|L|ST|C|STREET) *=([^,]|,)+)"/>
        </restriction>
      </simpleType>
      <simpleType name="ServiceName">
        <restriction base="xsd:string">
          <pattern value="[a-zA-Z][a-zA-Z0-9_\-]+[a-zA-Z0-9]"/>
        </restriction>
      </simpleType>
      <simpleType name="FirmwareDownloadWindow">
        <restriction base="xsd:unsignedInt"/>
      </simpleType>
      <simpleType name="RetryNumber">
        <restriction base="xsd:unsignedInt">
          <minInclusive value="1"/>
          <maxInclusive value="100"/>
        </restriction>
      </simpleType>
      <simpleType name="ServerPath">
        <restriction base="xsd:string">
          <minLength value="1"/>
          <maxLength value="512"/>
        </restriction>
      </simpleType>
      <simpleType name="SshPrivateKey">
        <restriction base="xsd:string">
          <minLength value="1"/>
          <maxLength value="2048"/>
        </restriction>
      </simpleType>
      <simpleType name="ReportingTimeOfDay">
        <restriction base="xsd:string">
          <minLength value="1"/>
          <maxLength value="32"/>
        </restriction>
      </simpleType>
      <simpleType name="ServerUrl">
        <restriction base="xsd:string">
          <pattern value="https?://([a-zA-Z0-9]{1}[A-Za-z0-9\-]*[a-zA-Z0-9]\.)?[a-zA-Z0-9]{1}[A-Za-z0-9\-]*[a-zA-Z0-9](\.[a-zA-Z]{2,5})?(:(6553[0-5]|655[0-2][0-9]|65[0-4][0-9]{2}|6[0-4][0-9]{3}|[1-5][0-9]{4}|[1-9][0-9]{0,3}))?"/>
        </restriction>
      </simpleType>
      <simpleType name="ChannelBandwidth">
        <restriction base="xsd:unsignedInt">
          <pattern value="(5000|10000)"/>
        </restriction>
      </simpleType>
      <simpleType name="ChannelFrequency">
        <restriction base="xsd:unsignedInt">
          <minInclusive value="2300000"/>
          <maxInclusive value="2690000"/>
        </restriction>
      </simpleType>
      <simpleType name="FrequencyStep">
        <restriction base="xsd:unsignedInt">
          <pattern value="(250|500|750|1000|1250|1500|1750|2000)"/>
        </restriction>
      </simpleType>
      <simpleType name="FrequencyCount">
        <restriction base="xsd:unsignedInt">
          <minInclusive value="1"/>
        </restriction>
      </simpleType>
      <simpleType name="percentValue">
        <restriction base="xsd:string">
          <pattern value="(100|[0-9]|[1-9][0-9])(\.[0-9]{1,4})?"/>
        </restriction>
      </simpleType>
      <simpleType name="IpAddress">
        <restriction base="xsd:string">
          <pattern value="([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])(\.([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])){3}"/>
        </restriction>
      </simpleType>
      <simpleType name="TmedValue">
        <restriction base="xsd:double"/>
      </simpleType>
      <simpleType name="mcuId">
        <annotation>
          <documentation>8-byte hex string micro-controller Id unique per chip vendor.</documentation>
        </annotation>
        <restriction base="xsd:string">
          <pattern value="([0-9a-fA-F]){16}"/>
        </restriction>
      </simpleType>
      <simpleType name="Guid">
        <annotation>
          <documentation>32-byte hex string Globally Unique Identifier</documentation>
        </annotation>
        <restriction base="xsd:string">
          <pattern value="[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}"/>
        </restriction>
      </simpleType>
      <simpleType name="NspId">
        <restriction base="xsd:string">
          <pattern value="[0-9a-fA-F]{6}"/>
        </restriction>
      </simpleType>
      <simpleType name="NapId">
        <restriction base="xsd:string">
          <pattern value="[0-9a-fA-F]{6}"/>
        </restriction>
      </simpleType>
      <simpleType name="Mtu">
        <restriction base="xsd:unsignedInt">
          <pattern value="(1400|1500)"/>
        </restriction>
      </simpleType>
      <simpleType name="NetworkHeartbeat">
        <restriction base="xsd:unsignedInt">
          <pattern value="(15|30|60|120|180|240|300|360|420|480|540|600|660|720|780|840|900|960|1020|1080|1140|1200|1260|1320|1380|1440)"/>
        </restriction>
      </simpleType>
      <simpleType name="CopsClientReconnect">
        <restriction base="xsd:unsignedInt">
          <pattern value="(1|5|10|15|20|30|60|120|180|240|300|360|420|480|540|600|660|720|780|840|900|960|1020|1080|1140|1200|1260|1320|1380|1440)"/>
        </restriction>
      </simpleType>
      <simpleType name="CsrClientConnect">
        <restriction base="xsd:unsignedInt">
          <pattern value="(1|5|10|15|20|30|60|120|180|240|300|360|420|480|540|600|660|720|780|840|900|960|1020|1080|1140|1200|1260|1320|1380|1440)"/>
        </restriction>
      </simpleType>
      <simpleType name="CopsOutageNotificationDelay">
        <restriction base="xsd:unsignedInt">
          <minInclusive value="0"/>
          <maxInclusive value="9999"/>
        </restriction>
      </simpleType>
      <simpleType name="SamplingFrequencySeconds">
        <annotation>
          <documentation>(null)</documentation>
        </annotation>
        <restriction base="xsd:unsignedInt">
          <pattern value="(0|1|2|3|4|5|6|10|12|15|20|30|60|120|180|240|300|360|600|720|900|1200|1800|3600|7200|10800|14400|21600|28800|43200|86400)"/>
        </restriction>
      </simpleType>
      <simpleType name="PanTextMessage">
        <restriction base="xsd:string">
          <minLength value="1"/>
          <maxLength value="80"/>
        </restriction>
      </simpleType>
      <simpleType name="PanPricingInformationString">
        <restriction base="xsd:string">
          <minLength value="1"/>
          <maxLength value="12"/>
        </restriction>
      </simpleType>
      <simpleType name="PanTextMessageDurationMinutes">
        <restriction base="xsd:unsignedInt">
          <minInclusive value="1"/>
          <maxInclusive value="65535"/>
        </restriction>
      </simpleType>
      <simpleType name="PanPricingDurationMinutes">
        <restriction base="xsd:unsignedInt">
          <minInclusive value="1"/>
          <maxInclusive value="65535"/>
        </restriction>
      </simpleType>
      <simpleType name="DataRetentionPeriod">
        <restriction base="xsd:unsignedInt">
          <minInclusive value="0"/>
          <maxInclusive value="12"/>
        </restriction>
      </simpleType>
      <simpleType name="DemandDataStreamValidityWindow">
        <restriction base="xsd:unsignedInt">
          <minInclusive value="1"/>
          <maxInclusive value="1440"/>
        </restriction>
      </simpleType>
      <simpleType name="DredControlEventDuration">
        <restriction base="xsd:unsignedInt">
          <pattern value="(30|60|90|120|150|180|210|240|270|300|330|360|390|420|450|480|510|540|570|600|630|660|690|720|750|780|810|840|870|900|930|960|990|1020|1050|1080|1110|1140|1170|1200|1230|1260|1290|1320|1350|1380|1410|1440)"/>
        </restriction>
      </simpleType>
      <simpleType name="DataStreamFrequencySeconds">
        <restriction base="xsd:unsignedInt">
          <pattern value="(10|12|15|20|30|60|120|180|240|300|360|420|480|540|600|660|720|780|840|900|960|1020|1080|1140|1200|1260|1320|1380|1440|1500|1560|1620|1680|1740|1800|1860|1920|1980|2040|2100|2160|2220|2280|2340|2400|2460|2520|2580|2640|2700|2760|2820|2880|2940|3000|3060|3120|3180|3240|3300|3360|3420|3480|3540|3600|7200|10800|14400|18000|21600|25200|28800|32400|36000|39600|43200|46800|50400|54000|57600|61200|64800|68400|72000|75600|79200|82800|86400|172800|259200|345600|432000|518400|604800|691200|777600|864000|950400|1036800|1123200|1209600|1296000|1382400|1468800|1555200|1641600|1728000|1814400|1900800|1987200|2073600|2160000|2246400|2332800|2419200|2505600|2592000|2678400)"/>
        </restriction>
      </simpleType>
      <simpleType name="RetailerName">
        <restriction base="xsd:string">
          <pattern value="[A-Za-z0-9 _\.#\-]{1,64}"/>
        </restriction>
      </simpleType>
      <simpleType name="RetailerUserId">
        <restriction base="xsd:string">
          <pattern value="[A-Za-z0-9]{1,10}"/>
        </restriction>
      </simpleType>
      <simpleType name="DistributorName">
        <restriction base="xsd:string">
          <pattern value="[A-Za-z0-9 _\.#\-]{1,64}"/>
        </restriction>
      </simpleType>
      <simpleType name="DistributorUserId">
        <restriction base="xsd:string">
          <pattern value="[A-Za-z0-9]{1,10}"/>
        </restriction>
      </simpleType>
      <simpleType name="Certificate">
        <restriction base="xsd:string"/>
      </simpleType>
      <simpleType name="Imsi">
        <restriction base="xsd:string">
          <pattern value="[0-9]{9,15}"/>
        </restriction>
      </simpleType>
      <simpleType name="Imei">
        <restriction base="xsd:string">
          <pattern value="([0-9]{14}[0-9])|([0-9]{16})"/>
        </restriction>
      </simpleType>
      <simpleType name="Msisdn">
        <restriction base="xsd:string">
          <pattern value="[0-9]{15,16}"/>
        </restriction>
      </simpleType>
      <simpleType name="Apn">
        <restriction base="xsd:string">
          <pattern value="[a-zA-Z0-9\.\-]{1,64}"/>
        </restriction>
      </simpleType>
      <simpleType name="MeterElementNumber">
        <restriction base="xsd:unsignedInt">
          <minInclusive value="1"/>
          <maxInclusive value="3"/>
        </restriction>
      </simpleType>
      <simpleType name="ServiceVoltage">
        <restriction base="xsd:unsignedInt">
          <pattern value="(120|208|240|277|480)"/>
        </restriction>
      </simpleType>
      <simpleType name="TokenLifetime">
        <restriction base="xsd:unsignedInt">
          <minInclusive value="15"/>
          <maxInclusive value="1440"/>
        </restriction>
      </simpleType>
      <simpleType name="PortNumber">
        <restriction base="xsd:unsignedInt">
          <minInclusive value="1"/>
          <maxInclusive value="65535"/>
        </restriction>
      </simpleType>
      <simpleType name="LdapHost">
        <annotation>
          <documentation>Can be either hostname (FQDN) or IP address.  Examples:  ldap.grid-net.com, 10.1.14.131</documentation>
        </annotation>
        <restriction base="xsd:string">
          <pattern value="(([a-zA-Z]{1}[A-Za-z0-9\-]*[a-zA-Z0-9]\.)?([a-zA-Z]{1}[A-Za-z0-9\-]*[a-zA-Z0-9]\.){2}[a-zA-Z]{2,5})|([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])(\.([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])){3}"/>
        </restriction>
      </simpleType>
      <simpleType name="DistinguishedName">
        <annotation>
          <documentation>Distinguished Name (DN) must be 3-256 characters in length.</documentation>
        </annotation>
        <restriction base="xsd:string">
          <pattern value="([ ]*\S+[ ]*)+=([ ]*\S+[ ]*)+(,([ ]*\S+[ ]*)+=([ ]*\S+[ ]*)+)*"/>
        </restriction>
      </simpleType>
      <simpleType name="color">
        <restriction base="xsd:string">
          <pattern value="[0-9a-fA-F]{6}"/>
        </restriction>
      </simpleType>
      <simpleType name="CycleStartMinutes">
        <restriction base="xsd:unsignedInt">
          <minInclusive value="0"/>
          <maxInclusive value="59"/>
        </restriction>
      </simpleType>
      <simpleType name="CycleDurationMinutes">
        <restriction base="xsd:unsignedInt">
          <pattern value="(1|2|3|4|5|6|10|12|15|20|30|60)"/>
        </restriction>
      </simpleType>
      <simpleType name="MvPhaseNumber">
        <restriction base="xsd:string">
          <pattern value="A|B|C|AB|AC|BC|ABC|Unknown"/>
        </restriction>
      </simpleType>
      <!--fault element-->
      <element name="Exception" type="policynet:ExceptionType"/>
      <simpleType name="DeviceType">
        <annotation>
          <documentation>panAppliance is DEPRECATED in 2.6 and no longer accepted.  Please use panSmartPlug instead (they are equivalent).</documentation>
        </annotation>
        <restriction base="xsd:string">
          <enumeration value="meter"/>
          <enumeration value="sgModem"/>
          <enumeration value="gateway"/>
          <enumeration value="sgCard"/>
          <enumeration value="waterMeter"/>
          <enumeration value="gasMeter"/>
          <enumeration value="panDred"/>
          <enumeration value="panDisplay"/>
          <enumeration value="panAppliance"/>
          <enumeration value="panSmartPlug"/>
          <enumeration value="panPanelMeter"/>
          <enumeration value="AutoTcu"/>
          <enumeration value="panDevice"/>
        </restriction>
      </simpleType>
      <simpleType name="PanDeviceType">
        <annotation>
          <documentation>panAppliance is DEPRECATED in 2.6 and no longer accepted.  Please use panSmartPlug instead (they are equivalent).</documentation>
        </annotation>
        <restriction base="xsd:string">
          <enumeration value="meter"/>
          <enumeration value="sgModem"/>
          <enumeration value="waterMeter"/>
          <enumeration value="gasMeter"/>
          <enumeration value="panDred"/>
          <enumeration value="panDisplay"/>
          <enumeration value="panAppliance"/>
          <enumeration value="panSmartPlug"/>
          <enumeration value="panPanelMeter"/>
        </restriction>
      </simpleType>
      <simpleType name="LinkType">
        <restriction base="xsd:string">
          <enumeration value="WiMax"/>
          <enumeration value="Ethernet"/>
          <enumeration value="LTE"/>
          <enumeration value="CDMA-3G"/>
          <enumeration value="GSM-3G"/>
          <enumeration value="LoRa"/>
        </restriction>
      </simpleType>
      <simpleType name="DayOfWeek">
        <restriction base="xsd:string">
          <enumeration value="Sunday"/>
          <enumeration value="Monday"/>
          <enumeration value="Tuesday"/>
          <enumeration value="Wednesday"/>
          <enumeration value="Thursday"/>
          <enumeration value="Friday"/>
          <enumeration value="Saturday"/>
        </restriction>
      </simpleType>
      <simpleType name="SoftwareType">
        <restriction base="xsd:string">
          <enumeration value="agent"/>
          <enumeration value="metrology"/>
          <enumeration value="panEsi"/>
          <enumeration value="agentDiff"/>
          <enumeration value="m2mApp"/>
        </restriction>
      </simpleType>
      <simpleType name="OperationalStatus">
        <restriction base="xsd:string">
          <enumeration value="Inventory"/>
          <enumeration value="Discovered"/>
          <enumeration value="Installed"/>
          <enumeration value="LocalOperation"/>
          <enumeration value="RemoteOperation"/>
          <enumeration value="Obsolete"/>
          <enumeration value="tcuFactoryInventoryTest"/>
          <enumeration value="tcuFactoryInventoryStandby"/>
          <enumeration value="tcuShippingLoading"/>
          <enumeration value="tcuShippingOffLoading"/>
          <enumeration value="tcuDealerInventory"/>
          <enumeration value="tcuNewCarInService"/>
          <enumeration value="tcuNewCarOutOfService"/>
          <enumeration value="tcuUsedCarInService"/>
          <enumeration value="tcuUsedCarOutOfService"/>
          <enumeration value="tcuRMA"/>
          <enumeration value="tcuObsolete"/>
          <enumeration value="Previous"/>
        </restriction>
      </simpleType>
      <simpleType name="WaterMeterOperationalStatus">
        <restriction base="xsd:string">
          <enumeration value="Inventory"/>
          <enumeration value="Installed"/>
          <enumeration value="LocalOperation"/>
          <enumeration value="RemoteOperation"/>
          <enumeration value="Obsolete"/>
        </restriction>
      </simpleType>
      <simpleType name="PNService">
        <annotation>
          <documentation>The svcDrStream type is deprecated as of policynet 2.6 .  Please use svcDataStream instead.</documentation>
        </annotation>
        <restriction base="xsd:string">
          <enumeration value="svcPolicyServer"/>
          <enumeration value="svcWebservice"/>
          <enumeration value="svcRA"/>
          <enumeration value="svcCA"/>
          <enumeration value="svcOOB"/>
          <enumeration value="svcMDM"/>
          <enumeration value="svcAAA"/>
          <enumeration value="svcUI"/>
          <enumeration value="svcOCSP"/>
          <enumeration value="svcDNS"/>
          <enumeration value="svcDHCP"/>
          <enumeration value="svcDeviceFileImport"/>
          <enumeration value="svcDatabase"/>
          <enumeration value="svcUpgradeServer"/>
          <enumeration value="svcWebserver"/>
          <enumeration value="svcVpnConcentrator"/>
          <enumeration value="svcSmartMeter"/>
          <enumeration value="svcDrStream"/>
          <enumeration value="svcDataStream"/>
        </restriction>
      </simpleType>
      <simpleType name="PolicyTargetType">
        <restriction base="xsd:string">
          <enumeration value="group"/>
          <enumeration value="device"/>
          <enumeration value="servicePoint"/>
        </restriction>
      </simpleType>
      <simpleType name="PolicyTargetSort">
        <restriction base="xsd:string">
          <enumeration value="name"/>
          <enumeration value="count"/>
        </restriction>
      </simpleType>
      <simpleType name="IneligibilityReason">
        <annotation>
          <documentation>Old inelibility reasons targetType, 	 firmware, opstate, hasSched, hasNoOverride, loadSwitch, serviceSwitch, noLifeSafety, panDeviceIdentify, panProvisioned, clockStateOutOfBounds have been DEPRECATED in 2.9 and will be REMOVED in 2.11.  Please use the new reasons listed: critDeviceTypeAny(Device is not of any type), critDeviceTypeMeter(Device type not electric meter), critDeviceTypeWaterMeter(Device type not water meter), critDeviceTypeGasMeter(Device type not gas meter), critDeviceTypePanDred(Device type not PAN DRED), critDeviceTypePanDisplay(Device type not PAN display), critDeviceTypePanAppliance(Device type not SmartPlug), critDeviceTypeAnyPanDevice(Device type is not any PAN), critOpStateOk(OpState is not remote or discovered), critServiceSwitch(Service switch not present), critLoadSwitch(Load switch not present), critNoLifeSafety(Life safety flag set), critHasNoBoost(Boost policy already present), critHasWimaxLink(Device does not have WiMAX link), critFirmwareGT210(Firmware version not at least 2.1.0), critFirmwareGT240(Firmware version not at least 2.4.0), critFirmwareLT239(Firmware version not less than 2.3.9), critFirmwareGT250(Firmware version not at least 2.5.0), critFirmwareGT260(Firmware version not at least 2.6.0), critFirmwareGT270(Firmware version not at least 2.7.0), critFirmwareGT271(Firmware version not at least 2.7.1), critFirmwareGT272(Firmware version not at least 2.7.2), critFirmwareGT290(Firmware version not at least 2.9.0), critPanProvisioned(PAN network is not provisioned), critPanDeviceIdentify(PAN device does not have identify capability), critClockStateOutOfBounds(Meter clock is not out of bounds), critDeviceTypePanPanelMeter(Device type is not PAN panel meter), critLoadProfileEnabled(Meter load profile disabled), critPanOptedIn(Device is not selected for LC participation), critPanCapable(Device is not PAN capable)</documentation>
        </annotation>
        <restriction base="xsd:string">
          <enumeration value="critDeviceTypeAny"/>
          <enumeration value="critDeviceTypeMeter"/>
          <enumeration value="critDeviceTypeWaterMeter"/>
          <enumeration value="critDeviceTypeGasMeter"/>
          <enumeration value="critDeviceTypePanDred"/>
          <enumeration value="critDeviceTypePanDisplay"/>
          <enumeration value="critDeviceTypePanAppliance"/>
          <enumeration value="critDeviceTypeAnyPanDevice"/>
          <enumeration value="critOpStateOk"/>
          <enumeration value="critServiceSwitch"/>
          <enumeration value="critLoadSwitch"/>
          <enumeration value="critNoLifeSafety"/>
          <enumeration value="critHasNoBoost"/>
          <enumeration value="critFirmwareGT310"/>
          <enumeration value="critFirmwareGT320"/>
          <enumeration value="critPanProvisioned"/>
          <enumeration value="critPanDeviceIdentify"/>
          <enumeration value="critClockStateOutOfBounds"/>
          <enumeration value="critDeviceTypePanPanelMeter"/>
          <enumeration value="critLoadProfileEnabled"/>
          <enumeration value="critPanOptedIn"/>
          <enumeration value="critPanCapable"/>
          <enumeration value="critOpStateRemote"/>
          <enumeration value="critM2MCapable"/>
          <enumeration value="critModeTOU"/>
          <enumeration value="critSelfReads"/>
          <enumeration value="critFirmwareGT3425"/>
          <enumeration value="critDeviceTypeGateway"/>
          <enumeration value="critDeviceTypeAutoTcu"/>
          <enumeration value="critServiceSwitchOff"/>
          <enumeration value="critServiceSwitchOn"/>
          <enumeration value="critPasswordPolicyEligible"/>
          <enumeration value="critManufacturerGE"/>
          <enumeration value="critManufacturerGEorLG"/>
          <enumeration value="critFwVerLessThan600"/>
          <enumeration value="critSnapshotEligible"/>
          <enumeration value="critESR"/>
          <enumeration value="critMetFirmwareGT50"/>
        </restriction>
      </simpleType>
      <simpleType name="SoapFaultCode">
        <restriction base="xsd:string">
          <enumeration value="Sender"/>
          <enumeration value="Receiver"/>
          <enumeration value="MustUnderstand"/>
          <enumeration value="VersionMismatch"/>
          <enumeration value="DataEncodingUnknown"/>
        </restriction>
      </simpleType>
      <simpleType name="PolicyReportState">
        <restriction base="xsd:string">
          <enumeration value="NotReporting"/>
          <enumeration value="Reporting"/>
          <enumeration value="Reported"/>
          <enumeration value="Failed"/>
        </restriction>
      </simpleType>
      <simpleType name="PolicyDeployState">
        <restriction base="xsd:string">
          <enumeration value="Saved"/>
          <enumeration value="Deploying"/>
          <enumeration value="Deployed"/>
          <enumeration value="Undeploying"/>
          <enumeration value="Undeployed"/>
          <enumeration value="PendingApproval"/>
        </restriction>
      </simpleType>
      <simpleType name="PolicyTaskType">
        <annotation>
          <documentation>The demandDataStream policy type is deprecated as of policynet 2.6.  Please use dataStream instead.</documentation>
        </annotation>
        <restriction base="xsd:string">
          <enumeration value="readDemandRegisters"/>
          <enumeration value="readIntervals"/>
          <enumeration value="readOutageStats"/>
          <enumeration value="readPowerQuality"/>
          <enumeration value="programMeter"/>
          <enumeration value="upgradeFirmware"/>
          <enumeration value="controlCPP"/>
          <enumeration value="controlPCT"/>
          <enumeration value="rebootDevice"/>
          <enumeration value="setCopsMode"/>
          <enumeration value="signalStrength"/>
          <enumeration value="wimaxStatistics"/>
          <enumeration value="scheduledLoadControl"/>
          <enumeration value="loadControlOverride"/>
          <enumeration value="loadControlBoost"/>
          <enumeration value="energyServiceOff"/>
          <enumeration value="energyServiceOn"/>
          <enumeration value="qosProfile"/>
          <enumeration value="normalSupplyCapacity"/>
          <enumeration value="emergencySupplyCapacity"/>
          <enumeration value="clockSynchronization"/>
          <enumeration value="panRelayControl"/>
          <enumeration value="revenueAssurance"/>
          <enumeration value="deviceStateMonitor"/>
          <enumeration value="readIntervalSummaryReportConfig"/>
          <enumeration value="meterPasswordUpdate"/>
          <enumeration value="deviceDiagnostics"/>
          <enumeration value="serverCSR"/>
          <enumeration value="deviceCSR"/>
          <enumeration value="supplicantConfig"/>
          <enumeration value="radioConfig"/>
          <enumeration value="allMeterEvents"/>
          <enumeration value="waterMeterRead"/>
          <enumeration value="waterRegisterRead"/>
          <enumeration value="waterMeterConfig"/>
          <enumeration value="waterMeterClockSync"/>
          <enumeration value="waterMeterEvents"/>
          <enumeration value="routerConfig"/>
          <enumeration value="sshConfig"/>
          <enumeration value="validatedIntervalRead"/>
          <enumeration value="networkProvisioning"/>
          <enumeration value="panDeviceIdentification"/>
          <enumeration value="panDeviceProvisioning"/>
          <enumeration value="panNetworkProvisioning"/>
          <enumeration value="panTextMessage"/>
          <enumeration value="panPricingInformation"/>
          <enumeration value="clockSet"/>
          <enumeration value="demandDataStream"/>
          <enumeration value="panDredControl"/>
          <enumeration value="directLoadControl"/>
          <enumeration value="dataStream"/>
          <enumeration value="configureMulticastGroup"/>
          <enumeration value="directLoadControlOverride"/>
          <enumeration value="activateSupplyCapacityLimiting"/>
          <enumeration value="powerQualityProfile"/>
          <enumeration value="checkMulticastPerformance"/>
          <enumeration value="voltageBandMonitoring"/>
          <enumeration value="lossNeutralDetection"/>
          <enumeration value="brownOutDetection"/>
          <enumeration value="serviceDegradationDetection"/>
          <enumeration value="voltageControl"/>
          <enumeration value="lastGaspConfig"/>
          <enumeration value="demandReset"/>
          <enumeration value="registerSnapshotRead"/>
          <enumeration value="rba"/>
          <enumeration value="sensorData"/>
          <enumeration value="M2MEndpointUpgrade"/>
          <enumeration value="billingRead"/>
          <enumeration value="gasMeterRead"/>
          <enumeration value="cmdh"/>
          <enumeration value="sca"/>
          <enumeration value="lteNetworkConfig"/>
          <enumeration value="location"/>
          <enumeration value="readDemand"/>
          <enumeration value="softwareUpdate"/>
          <enumeration value="configureSupplyCapacityLimiting"/>
        </restriction>
      </simpleType>
      <simpleType name="PolicyFreqType">
        <restriction base="xsd:string">
          <enumeration value="all"/>
          <enumeration value="onRequest"/>
          <enumeration value="oneTime"/>
          <enumeration value="recurring"/>
          <enumeration value="continuous"/>
        </restriction>
      </simpleType>
      <simpleType name="ProgramScheduleDayType">
        <restriction base="xsd:string">
          <enumeration value="sunday"/>
          <enumeration value="monday"/>
          <enumeration value="tuesday"/>
          <enumeration value="wednesday"/>
          <enumeration value="thursday"/>
          <enumeration value="friday"/>
          <enumeration value="saturday"/>
          <enumeration value="weekdays"/>
          <enumeration value="weekends"/>
          <enumeration value="specialDay0"/>
          <enumeration value="specialDay1"/>
          <enumeration value="specialDay2"/>
          <enumeration value="specialDay3"/>
          <enumeration value="everyDay"/>
        </restriction>
      </simpleType>
      <simpleType name="PolicyDeploymentMethod">
        <restriction base="xsd:string">
          <enumeration value="UnicastCops"/>
          <enumeration value="Multicast"/>
        </restriction>
      </simpleType>
      <simpleType name="CmdhEventCategoryOld">
        <restriction base="xsd:string">
          <enumeration value="AcCriticalExpeditedForwardingtive"/>
          <enumeration value="FlashOverrideAssuredForwarding"/>
          <enumeration value="FlashAssuredForwarding"/>
          <enumeration value="ImmediateAssuredForwarding"/>
          <enumeration value="PasswordEPriorityAssuredForwardingxpired"/>
          <enumeration value="BestEffort"/>
        </restriction>
      </simpleType>
      <simpleType name="ServiceFlowEnforcement">
        <restriction base="xsd:string">
          <enumeration value="DownLink"/>
          <enumeration value="UpLink"/>
        </restriction>
      </simpleType>
      <simpleType name="CmdhEventCategory">
        <restriction base="xsd:string">
          <enumeration value="Immediate"/>
          <enumeration value="BestEffort"/>
          <enumeration value="Latest"/>
          <enumeration value="Priority"/>
        </restriction>
      </simpleType>
      <simpleType name="BillingCycleDateType">
        <restriction base="xsd:string">
          <enumeration value="Include"/>
          <enumeration value="Exclude"/>
          <enumeration value="MultipleCycle"/>
        </restriction>
      </simpleType>
      <simpleType name="BillingCycleType">
        <restriction base="xsd:string">
          <enumeration value="SingleDay"/>
          <enumeration value="BillingCycleList"/>
          <enumeration value="Rolling"/>
        </restriction>
      </simpleType>
      <simpleType name="ServiceType">
        <restriction base="xsd:string">
          <enumeration value="electric"/>
          <enumeration value="gas"/>
          <enumeration value="water"/>
        </restriction>
      </simpleType>
      <simpleType name="DSDemand">
        <restriction base="xsd:string">
          <enumeration value="TotalPowerDelivered"/>
        </restriction>
      </simpleType>
      <simpleType name="DSSummation">
        <restriction base="xsd:string">
          <enumeration value="SummationDelivered"/>
          <enumeration value="SummationReceived"/>
        </restriction>
      </simpleType>
      <simpleType name="SwitchAction">
        <restriction base="xsd:string">
          <enumeration value="turnOff"/>
          <enumeration value="turnOn"/>
        </restriction>
      </simpleType>
      <simpleType name="SupplyCapacityLimitingMode">
        <restriction base="xsd:string">
          <enumeration value="SCLModeDisabled"/>
          <enumeration value="SCLModeNormal"/>
          <enumeration value="SCLModeEmergency"/>
        </restriction>
      </simpleType>
      <simpleType name="DisconnectReason">
        <restriction base="xsd:string">
          <enumeration value="TemporaryDisconnect"/>
          <enumeration value="MoveOutDisconnect"/>
          <enumeration value="NonPayDisconnect"/>
        </restriction>
      </simpleType>
      <simpleType name="CriticalityLevel">
        <restriction base="xsd:string">
          <enumeration value="CriticalityLevelReserved"/>
          <enumeration value="CriticalityLevelGreen"/>
          <enumeration value="CriticalityLevelEmergency"/>
          <enumeration value="CriticalityLevelPlannedOutage"/>
          <enumeration value="CriticalityLevelServiceDisconnect"/>
        </restriction>
      </simpleType>
      <simpleType name="MeterPricingMode">
        <annotation>
          <documentation>The pricing mode for published prices.  Note that pricing mode IS NOT the same as the actual operating mode of the meter.  For example, the pricing mode can be NonToU (flat-rate) so that a flat-rate price will be published while the target meter is operating in ToU mode.  NOTE: nonToU pricing mode is valid for Meter operating modes Demand, Demand-LP, flat-rate, ToU modes, but ToU pricing mode is only valid for ToU meter operating mode.</documentation>
        </annotation>
        <restriction base="xsd:string">
          <enumeration value="NonToU"/>
          <enumeration value="ToU"/>
        </restriction>
      </simpleType>
      <simpleType name="Currency">
        <restriction base="xsd:string">
          <enumeration value="AUD-cent"/>
          <enumeration value="USD-cent"/>
        </restriction>
      </simpleType>
      <simpleType name="UnitOfMeasure">
        <restriction base="xsd:string">
          <enumeration value="kiloWatt"/>
          <enumeration value="cubicMeter"/>
          <enumeration value="cubicFeet"/>
          <enumeration value="centumCubicFeet"/>
          <enumeration value="usGallon"/>
          <enumeration value="impGallon"/>
          <enumeration value="BTU"/>
          <enumeration value="liter"/>
          <enumeration value="kPAgauge"/>
          <enumeration value="kPAabsolute"/>
        </restriction>
      </simpleType>
      <simpleType name="PanProvisioningAction">
        <restriction base="xsd:string">
          <enumeration value="decommission"/>
          <enumeration value="provision"/>
        </restriction>
      </simpleType>
      <simpleType name="InstallAction">
        <restriction base="xsd:string">
          <enumeration value="uninstall"/>
          <enumeration value="install"/>
        </restriction>
      </simpleType>
      <simpleType name="ActivateAction">
        <restriction base="xsd:string">
          <enumeration value="deactivate"/>
          <enumeration value="activate"/>
        </restriction>
      </simpleType>
      <simpleType name="meterProgramCalendarAction">
        <restriction base="xsd:string">
          <enumeration value="NoAction"/>
          <enumeration value="DstOn"/>
          <enumeration value="DstOff"/>
          <enumeration value="Season0"/>
          <enumeration value="Season1"/>
          <enumeration value="Season2"/>
          <enumeration value="Season3"/>
          <enumeration value="Holiday"/>
        </restriction>
      </simpleType>
      <simpleType name="SwitchName">
        <restriction base="xsd:string">
          <enumeration value="ServiceDisconnect"/>
          <enumeration value="LoadControl1"/>
        </restriction>
      </simpleType>
      <simpleType name="QosAttributeOp">
        <restriction base="xsd:string">
          <enumeration value="Set"/>
          <enumeration value="Add"/>
          <enumeration value="Replace"/>
        </restriction>
      </simpleType>
      <simpleType name="SystemReliabilityIndexType">
        <restriction base="xsd:string">
          <enumeration value="saifi"/>
          <enumeration value="saidi"/>
          <enumeration value="caifi"/>
          <enumeration value="caidi"/>
          <enumeration value="asai"/>
          <enumeration value="maifi"/>
          <enumeration value="maifi-event"/>
          <enumeration value="ciii"/>
        </restriction>
      </simpleType>
      <simpleType name="SystemReliabilityField">
        <restriction base="xsd:string">
          <enumeration value="feederId"/>
          <enumeration value="transformerId"/>
          <enumeration value="subTransformerId"/>
          <enumeration value="saifiValue"/>
          <enumeration value="saidiValue"/>
          <enumeration value="caifiValue"/>
          <enumeration value="caidiValue"/>
          <enumeration value="asaiValue"/>
          <enumeration value="maifiValue"/>
          <enumeration value="maifieValue"/>
          <enumeration value="ciiiValue"/>
        </restriction>
      </simpleType>
      <simpleType name="SystemReliabilitySummaryLevel">
        <restriction base="xsd:string">
          <enumeration value="system"/>
          <enumeration value="feeder"/>
        </restriction>
      </simpleType>
      <simpleType name="SortOrder">
        <restriction base="xsd:string">
          <enumeration value="Ascending"/>
          <enumeration value="Descending"/>
        </restriction>
      </simpleType>
      <simpleType name="NumericOperator">
        <restriction base="xsd:string">
          <enumeration value="Equal"/>
          <enumeration value="NotEqual"/>
          <enumeration value="GreaterThan"/>
          <enumeration value="GreaterThanOrEqualTo"/>
          <enumeration value="LessThan"/>
          <enumeration value="LessThanOrEqualTo"/>
          <enumeration value="IsNull"/>
          <enumeration value="IsNotNull"/>
        </restriction>
      </simpleType>
      <simpleType name="summaryWindowType">
        <restriction base="xsd:string">
          <enumeration value="YTD"/>
          <enumeration value="Today"/>
          <enumeration value="Yesterday"/>
          <enumeration value="Custom"/>
        </restriction>
      </simpleType>
      <simpleType name="OutageComponentType">
        <restriction base="xsd:string">
          <enumeration value="device"/>
          <enumeration value="servicepoint"/>
          <enumeration value="feeder"/>
          <enumeration value="transformer"/>
          <enumeration value="subTransformer"/>
        </restriction>
      </simpleType>
      <simpleType name="OutageStatus">
        <restriction base="xsd:string">
          <enumeration value="completed"/>
          <enumeration value="active"/>
          <enumeration value="scheduled"/>
        </restriction>
      </simpleType>
      <simpleType name="CopsConnectionMode">
        <restriction base="xsd:string">
          <enumeration value="disconnectedMode"/>
          <enumeration value="connectedMode"/>
        </restriction>
      </simpleType>
      <simpleType name="authType">
        <restriction base="xsd:string">
          <enumeration value="noAuth"/>
          <enumeration value="eapTtls"/>
          <enumeration value="eapTls"/>
          <enumeration value="chap"/>
        </restriction>
      </simpleType>
      <simpleType name="LinkName">
        <restriction base="xsd:string">
          <enumeration value="lo"/>
          <enumeration value="wlan0"/>
          <enumeration value="eth0"/>
          <enumeration value="eth1"/>
        </restriction>
      </simpleType>
      <simpleType name="NetworkLinkType">
        <restriction base="xsd:string">
          <enumeration value="loopback"/>
          <enumeration value="ethernet"/>
          <enumeration value="ppp"/>
        </restriction>
      </simpleType>
      <simpleType name="LinkState">
        <restriction base="xsd:string">
          <enumeration value="down"/>
          <enumeration value="up"/>
        </restriction>
      </simpleType>
      <simpleType name="ScaEventType">
        <restriction base="xsd:string">
          <enumeration value="octetBased"/>
          <enumeration value="packetBased"/>
        </restriction>
      </simpleType>
      <simpleType name="ScaOperationType">
        <restriction base="xsd:string">
          <enumeration value="create"/>
          <enumeration value="retrieve"/>
          <enumeration value="update"/>
          <enumeration value="delete"/>
          <enumeration value="notify"/>
        </restriction>
      </simpleType>
      <simpleType name="DeviceFields">
        <restriction base="xsd:string">
          <enumeration value="wanMacAddress"/>
          <enumeration value="deviceType"/>
          <enumeration value="utilitySerialNumber"/>
          <enumeration value="description"/>
          <enumeration value="manufacturer"/>
          <enumeration value="model"/>
          <enumeration value="mfgSerialNumber"/>
          <enumeration value="programId"/>
          <enumeration value="operatingMode"/>
          <enumeration value="operationalStatus"/>
          <enumeration value="signalStrength"/>
          <enumeration value="energyStatus"/>
          <enumeration value="networkConnectivity"/>
          <enumeration value="ipAddress"/>
          <enumeration value="clientType"/>
          <enumeration value="qosProfileId"/>
          <enumeration value="hardwareVersion"/>
          <enumeration value="firmwareVersion"/>
          <enumeration value="activeBank"/>
          <enumeration value="wimaxProvisioned"/>
          <enumeration value="securityProvisioned"/>
          <enumeration value="copsConnectionMode"/>
          <enumeration value="lastReboot"/>
          <enumeration value="baseStationSector"/>
          <enumeration value="creatorId"/>
          <enumeration value="createDate"/>
          <enumeration value="lastModifyDate"/>
          <enumeration value="servicePointId"/>
          <enumeration value="broadbandService"/>
          <enumeration value="meterCapability"/>
          <enumeration value="dialupAccess"/>
          <enumeration value="xCoordinate"/>
          <enumeration value="yCoordinate"/>
          <enumeration value="zCoordinate"/>
          <enumeration value="serviceSwitch"/>
          <enumeration value="serviceSwitchStatus"/>
          <enumeration value="loadSwitch"/>
          <enumeration value="loadSwitchStatus"/>
          <enumeration value="linkType"/>
          <enumeration value="panState"/>
          <enumeration value="formNumber"/>
          <enumeration value="frequency"/>
          <enumeration value="baseType"/>
          <enumeration value="voltage"/>
          <enumeration value="numberOfElements"/>
          <enumeration value="currentClass"/>
          <enumeration value="loadProfileStatus"/>
          <enumeration value="customerName"/>
        </restriction>
      </simpleType>
      <simpleType name="StringOperator">
        <restriction base="xsd:string">
          <enumeration value="Equal"/>
          <enumeration value="NotEqual"/>
          <enumeration value="Like"/>
          <enumeration value="NotLike"/>
          <enumeration value="IsNull"/>
          <enumeration value="IsNotNull"/>
        </restriction>
      </simpleType>
      <simpleType name="KeyOperator">
        <restriction base="xsd:string">
          <enumeration value="Equal"/>
          <enumeration value="NotEqual"/>
          <enumeration value="IsNull"/>
          <enumeration value="IsNotNull"/>
        </restriction>
      </simpleType>
      <simpleType name="BooleanOperator">
        <restriction base="xsd:string">
          <enumeration value="Equal"/>
          <enumeration value="IsNull"/>
          <enumeration value="IsNotNull"/>
        </restriction>
      </simpleType>
      <simpleType name="GroupOperator">
        <restriction base="xsd:string">
          <enumeration value="And"/>
          <enumeration value="Or"/>
        </restriction>
      </simpleType>
      <simpleType name="GroupType">
        <annotation>
          <documentation>Use meterGroup type for electric meters.</documentation>
        </annotation>
        <restriction base="xsd:string">
          <enumeration value="meterGroup"/>
          <enumeration value="multicastMeterGroup"/>
          <enumeration value="sgModemGroup"/>
          <enumeration value="waterMeterGroup"/>
          <enumeration value="policyGroup"/>
          <enumeration value="userGroup"/>
          <enumeration value="systemGroup"/>
          <enumeration value="panDeviceGroup"/>
          <enumeration value="gasMeterGroup"/>
        </restriction>
      </simpleType>
      <simpleType name="DeviceGroupMemberType">
        <restriction base="xsd:string">
          <enumeration value="utilitySerialNumber"/>
          <enumeration value="servicePointId"/>
          <enumeration value="wanMacAddress"/>
        </restriction>
      </simpleType>
      <simpleType name="DeviceGroupCategory">
        <annotation>
          <documentation>NOTE:   panPricing category is for creating Pan Pricing groups for meters using ToU pricing mode only</documentation>
        </annotation>
        <restriction base="xsd:string">
          <enumeration value="generalPurpose"/>
          <enumeration value="lifeSafety"/>
          <enumeration value="networkProvisioning"/>
          <enumeration value="legacyRadioConf"/>
          <enumeration value="panDeviceGroup"/>
          <enumeration value="waterMeter"/>
          <enumeration value="panPricing"/>
          <enumeration value="dredControl"/>
          <enumeration value="gatewayGroup"/>
          <enumeration value="gasMeter"/>
          <enumeration value="unprovisionedMeters"/>
        </restriction>
      </simpleType>
      <simpleType name="BindState">
        <restriction base="xsd:string">
          <enumeration value="Unbound"/>
          <enumeration value="Bound"/>
          <enumeration value="Integrated"/>
        </restriction>
      </simpleType>
      <simpleType name="EnergyState">
        <restriction base="xsd:string">
          <enumeration value="ENERGIZED"/>
          <enumeration value="DEENERGIZED"/>
          <enumeration value="UNKNOWN"/>
        </restriction>
      </simpleType>
      <simpleType name="NetworkConnectivity">
        <restriction base="xsd:string">
          <enumeration value="DISCONNECTED"/>
          <enumeration value="CONNECTED"/>
          <enumeration value="UNKNOWN"/>
        </restriction>
      </simpleType>
      <simpleType name="MeterClockState">
        <restriction base="xsd:string">
          <enumeration value="OutOfBounds"/>
          <enumeration value="InBounds"/>
        </restriction>
      </simpleType>
      <simpleType name="rat">
        <restriction base="xsd:string">
          <enumeration value="cdma1x"/>
          <enumeration value="evdo"/>
          <enumeration value="utran"/>
        </restriction>
      </simpleType>
      <simpleType name="CdpSubscriptionState">
        <restriction base="xsd:string">
          <enumeration value="ordered"/>
          <enumeration value="simAllocated"/>
          <enumeration value="simOrdered"/>
          <enumeration value="activatedInHLR"/>
          <enumeration value="active"/>
          <enumeration value="deactivated"/>
          <enumeration value="pause"/>
          <enumeration value="terminated"/>
          <enumeration value="cancelled"/>
          <enumeration value="closed"/>
        </restriction>
      </simpleType>
      <simpleType name="MeterCapability">
        <annotation>
          <documentation>Capabilities of SmartMeter. Also referred to as Meter Mode.</documentation>
        </annotation>
        <restriction base="xsd:string">
          <enumeration value="Cap-Demand"/>
          <enumeration value="Cap-Demand-LP"/>
          <enumeration value="Cap-TOU"/>
          <enumeration value="Cap-TOU-LP"/>
        </restriction>
      </simpleType>
      <simpleType name="MeterMode">
        <annotation>
          <documentation>Present operating mode of SmartMeter.  Also referred to as Register Function.</documentation>
        </annotation>
        <restriction base="xsd:string">
          <enumeration value="Mode-Unknown"/>
          <enumeration value="Mode-Demand"/>
          <enumeration value="Mode-Demand-LP"/>
          <enumeration value="Mode-TOU"/>
          <enumeration value="Mode-TOU-LP"/>
        </restriction>
      </simpleType>
      <simpleType name="MeterPhaseType">
        <restriction base="xsd:string">
          <enumeration value="Phase-unknown"/>
          <enumeration value="Single-phase"/>
          <enumeration value="Two-phase"/>
          <enumeration value="Three-phase"/>
        </restriction>
      </simpleType>
      <simpleType name="SoftSwitchTypeI210c">
        <restriction base="xsd:string">
          <enumeration value="TOU"/>
          <enumeration value="SecondMeasure"/>
          <enumeration value="FourChannelRecording"/>
          <enumeration value="EventLogging"/>
          <enumeration value="AlternateComm"/>
          <enumeration value="DemandComm"/>
          <enumeration value="VoltageEvents"/>
          <enumeration value="PowerQuality"/>
          <enumeration value="ECP"/>
          <enumeration value="SCL"/>
          <enumeration value="PPM"/>
        </restriction>
      </simpleType>
      <simpleType name="SoftSwitchTypeKV2c">
        <restriction base="xsd:string">
          <enumeration value="TOUKv2c"/>
          <enumeration value="PowerFactorMeasures"/>
          <enumeration value="BasicRecording"/>
          <enumeration value="EventLogRecording"/>
          <enumeration value="ExpandedRecording"/>
          <enumeration value="TransformerLossCorrection"/>
          <enumeration value="InstrumentTransformerCorrection"/>
          <enumeration value="RevenueGuardPlus"/>
          <enumeration value="FastVoltageEvent"/>
          <enumeration value="QuadrantMeasurements"/>
          <enumeration value="WaveformCapture"/>
          <enumeration value="ExpandedMeasures"/>
          <enumeration value="PowerQualityMeasures"/>
          <enumeration value="Totalization"/>
          <enumeration value="HugeLoadPlus"/>
        </restriction>
      </simpleType>
      <simpleType name="SoftSwitchStatus">
        <restriction base="xsd:string">
          <enumeration value="disabled"/>
          <enumeration value="enabled"/>
        </restriction>
      </simpleType>
      <simpleType name="MeterType">
        <restriction base="xsd:string"/>
      </simpleType>
      <simpleType name="PanState">
        <restriction base="xsd:string">
          <enumeration value="unavailable"/>
          <enumeration value="unprovisioned"/>
          <enumeration value="provisioned"/>
        </restriction>
      </simpleType>
      <simpleType name="ModemMode">
        <restriction base="xsd:string">
          <enumeration value="Mode-Bridge"/>
          <enumeration value="Mode-Gateway"/>
          <enumeration value="Mode-Router"/>
        </restriction>
      </simpleType>
      <simpleType name="PanDescription">
        <restriction base="xsd:string">
          <enumeration value="rangeExtender"/>
          <enumeration value="energyServicePortal"/>
          <enumeration value="meteringDevice"/>
          <enumeration value="inPremiseDisplay"/>
          <enumeration value="programmableCommunicatingThermostat"/>
          <enumeration value="loadControlDevice"/>
          <enumeration value="smartAppliance"/>
          <enumeration value="prepaymentTerminal"/>
        </restriction>
      </simpleType>
      <simpleType name="PanCapability">
        <restriction base="xsd:string">
          <enumeration value="basic"/>
          <enumeration value="identify"/>
          <enumeration value="onOff"/>
          <enumeration value="alarms"/>
          <enumeration value="time"/>
          <enumeration value="commisioning"/>
          <enumeration value="powerConfiguration"/>
          <enumeration value="keyEstablishment"/>
          <enumeration value="price"/>
          <enumeration value="demandResponseLoadControl"/>
          <enumeration value="simpleMetering"/>
          <enumeration value="message"/>
          <enumeration value="messaging"/>
          <enumeration value="smartEnergyTunneling"/>
          <enumeration value="tunneling"/>
          <enumeration value="prePayment"/>
          <enumeration value="metering"/>
          <enumeration value="otaBootload"/>
        </restriction>
      </simpleType>
      <simpleType name="PanPowerMode">
        <restriction base="xsd:string">
          <enumeration value="panPowerModeUnknown"/>
          <enumeration value="continuous"/>
          <enumeration value="periodic"/>
          <enumeration value="stimulated"/>
        </restriction>
      </simpleType>
      <simpleType name="LoadControlParticipation">
        <restriction base="xsd:string">
          <enumeration value="optOut"/>
          <enumeration value="optIn"/>
        </restriction>
      </simpleType>
      <simpleType name="LoadControlStatus">
        <restriction base="xsd:string">
          <enumeration value="underLoadControl"/>
          <enumeration value="notUnderLoadControl"/>
        </restriction>
      </simpleType>
      <simpleType name="PanStatus">
        <restriction base="xsd:string">
          <enumeration value="offline"/>
          <enumeration value="online"/>
        </restriction>
      </simpleType>
      <simpleType name="WaterServiceType">
        <restriction base="xsd:string">
          <enumeration value="potable"/>
          <enumeration value="nonPotable"/>
          <enumeration value="unknownWaterServiceType"/>
        </restriction>
      </simpleType>
      <simpleType name="RegisterDisplayIdSupportType">
        <restriction base="xsd:string">
          <enumeration value="notSupported"/>
          <enumeration value="supported"/>
        </restriction>
      </simpleType>
      <simpleType name="chronology">
        <restriction base="xsd:string">
          <enumeration value="forward"/>
          <enumeration value="reverse"/>
        </restriction>
      </simpleType>
      <simpleType name="PhaseNumber">
        <restriction base="xsd:string">
          <enumeration value="A"/>
          <enumeration value="B"/>
          <enumeration value="C"/>
        </restriction>
      </simpleType>
      <simpleType name="PowerFactorQuadrant">
        <restriction base="xsd:string">
          <enumeration value="Q1"/>
          <enumeration value="Q2"/>
          <enumeration value="Q3"/>
          <enumeration value="Q4"/>
        </restriction>
      </simpleType>
      <simpleType name="AggregateType">
        <restriction base="xsd:string">
          <enumeration value="FiveMinute"/>
          <enumeration value="TenMinute"/>
          <enumeration value="QuarterHour"/>
          <enumeration value="HalfHour"/>
          <enumeration value="Hour"/>
          <enumeration value="ThreeHour"/>
          <enumeration value="SixHour"/>
          <enumeration value="TwelveHour"/>
          <enumeration value="Day"/>
          <enumeration value="Week"/>
          <enumeration value="Month"/>
          <enumeration value="Year"/>
        </restriction>
      </simpleType>
      <simpleType name="EventSeverity">
        <restriction base="xsd:string">
          <enumeration value="Debug"/>
          <enumeration value="Info"/>
          <enumeration value="Warning"/>
          <enumeration value="Error"/>
        </restriction>
      </simpleType>
      <simpleType name="EventCategory">
        <restriction base="xsd:string">
          <enumeration value="C1219Std"/>
          <enumeration value="GeMfg"/>
          <enumeration value="GridNet"/>
          <enumeration value="LandisGyrMfg"/>
          <enumeration value="OmaDm"/>
          <enumeration value="OmaFumo"/>
          <enumeration value="M2M"/>
          <enumeration value="LG"/>
          <enumeration value="Vision"/>
        </restriction>
      </simpleType>
      <simpleType name="EventType">
        <restriction base="xsd:string">
          <enumeration value="ConfigControl"/>
          <enumeration value="Health"/>
          <enumeration value="EnergyService"/>
          <enumeration value="Tamper"/>
          <enumeration value="NMSServer"/>
          <enumeration value="WaterService"/>
          <enumeration value="CommService"/>
          <enumeration value="SmartAgent"/>
          <enumeration value="PAN"/>
          <enumeration value="GasService"/>
        </restriction>
      </simpleType>
      <simpleType name="IntervalType">
        <restriction base="xsd:string">
          <enumeration value="typeDelivered"/>
          <enumeration value="typeReceived"/>
        </restriction>
      </simpleType>
      <simpleType name="PermissionLevel">
        <restriction base="xsd:string">
          <enumeration value="Grant"/>
          <enumeration value="Revoke"/>
          <enumeration value="Deny"/>
        </restriction>
      </simpleType>
      <simpleType name="OperationType">
        <restriction base="xsd:string">
          <enumeration value="View"/>
          <enumeration value="Create"/>
          <enumeration value="Update"/>
          <enumeration value="Delete"/>
          <enumeration value="Deploy"/>
          <enumeration value="Subscribe"/>
          <enumeration value="Undeploy"/>
          <enumeration value="Connect"/>
          <enumeration value="Execute"/>
          <enumeration value="Approve"/>
          <enumeration value="Reject"/>
          <enumeration value="Order"/>
        </restriction>
      </simpleType>
      <simpleType name="ObjectType">
        <annotation>
          <documentation>PanAppliance is DEPRECATED in 2.6, please use PanSmartPlug instead (they are equivalent).</documentation>
        </annotation>
        <restriction base="xsd:string">
          <enumeration value="Session"/>
          <enumeration value="User"/>
          <enumeration value="Role"/>
          <enumeration value="UserPermission"/>
          <enumeration value="UserRole"/>
          <enumeration value="RolePermission"/>
          <enumeration value="AuditTrail"/>
          <enumeration value="Topic"/>
          <enumeration value="DeviceEvent"/>
          <enumeration value="ManualDeviceGroup"/>
          <enumeration value="DynamicDeviceGroup"/>
          <enumeration value="CustomDeviceAttribute"/>
          <enumeration value="RefreshDeviceStatus"/>
          <enumeration value="Customer"/>
          <enumeration value="SmartMeter"/>
          <enumeration value="SGModem"/>
          <enumeration value="Basestation"/>
          <enumeration value="BasestationSector"/>
          <enumeration value="Router"/>
          <enumeration value="Gateway"/>
          <enumeration value="PanTopology"/>
          <enumeration value="SmartGridCard"/>
          <enumeration value="WaterMeterDevice"/>
          <enumeration value="GasMeter"/>
          <enumeration value="PanDred"/>
          <enumeration value="PanDisplay"/>
          <enumeration value="PanAppliance"/>
          <enumeration value="PanSmartPlug"/>
          <enumeration value="PanPanelMeter"/>
          <enumeration value="AutoTcu"/>
          <enumeration value="PanDevice"/>
          <enumeration value="MeterProgram"/>
          <enumeration value="MeterFirmware"/>
          <enumeration value="QosProfile"/>
          <enumeration value="ProvisioningKeyPair"/>
          <enumeration value="ProvisioningFile"/>
          <enumeration value="WaterMeterProvisioningFile"/>
          <enumeration value="PanDeviceProvisioningFile"/>
          <enumeration value="ApplicationSoftware"/>
          <enumeration value="BillingCycle"/>
          <enumeration value="Distributor"/>
          <enumeration value="Retailer"/>
          <enumeration value="Certificate"/>
          <enumeration value="ServicePoint"/>
          <enumeration value="Consumer"/>
          <enumeration value="Subscription"/>
          <enumeration value="UserInterface"/>
          <enumeration value="NetworkRoute"/>
          <enumeration value="WaterServicePoint"/>
          <enumeration value="GasServicePoint"/>
          <enumeration value="GatewayServicePoint"/>
          <enumeration value="ReadIntervalsReport"/>
          <enumeration value="ReadOutageStatsReport"/>
          <enumeration value="ReadPowerQualityReport"/>
          <enumeration value="ReadDemandRegistersReport"/>
          <enumeration value="ReadWimaxStatisticsReport"/>
          <enumeration value="ReadNetworkEntryReport"/>
          <enumeration value="ReadWaterIntervalReport"/>
          <enumeration value="ReadWaterRegisterReport"/>
          <enumeration value="ReadWaterEventsReport"/>
          <enumeration value="ReadValidatedItvlReport"/>
          <enumeration value="ReadSystemReliabilityReport"/>
          <enumeration value="ReadSystemOutagesReport"/>
          <enumeration value="ClockDriftReport"/>
          <enumeration value="ClockAdjustmentReport"/>
          <enumeration value="PowerQualityProfileReport"/>
          <enumeration value="ReadRadiusAccountingReport"/>
          <enumeration value="ElectricMapReport"/>
          <enumeration value="WaterMapReport"/>
          <enumeration value="GasMapReport"/>
          <enumeration value="ReadGasIntervalReport"/>
          <enumeration value="ReadGasRegisterReport"/>
          <enumeration value="ReadGasEventsReport"/>
          <enumeration value="ReadDemandReport"/>
          <enumeration value="connectivityReport"/>
          <enumeration value="ScmTransactionReport"/>
          <enumeration value="ScmDailyReport"/>
          <enumeration value="ScmCycleReport"/>
          <enumeration value="BlinkReport"/>
          <enumeration value="ScmLicenseReport"/>
          <enumeration value="ScmLicenseMetricsReport"/>
          <enumeration value="ScmTransactionHistoryReport"/>
          <enumeration value="MfgCustomer"/>
          <enumeration value="MfgProduct"/>
          <enumeration value="MfgProductLine"/>
          <enumeration value="MfgShipFile"/>
          <enumeration value="MfgExport"/>
          <enumeration value="ProvisioningDefaults"/>
          <enumeration value="AosShipfile"/>
          <enumeration value="AclaraMarriageFile"/>
          <enumeration value="MeterPassword"/>
          <enumeration value="objSGCAConn"/>
          <enumeration value="objExeCertSignReq"/>
          <enumeration value="objExeCertRevokeListReq"/>
          <enumeration value="objExeNaiReq"/>
          <enumeration value="objExeRevokeCertReq"/>
          <enumeration value="DeviceNetAccess"/>
          <enumeration value="QueuedMessage"/>
          <enumeration value="ConsumerKey"/>
          <enumeration value="DeviceOperationalState"/>
          <enumeration value="DeviceBindState"/>
          <enumeration value="DeviceExport"/>
          <enumeration value="PlannedOutage"/>
          <enumeration value="SystemReliabilitySettings"/>
          <enumeration value="PanLabel"/>
          <enumeration value="ClockStateConfig"/>
          <enumeration value="DailyReportingTimezoneSettings"/>
          <enumeration value="DataRetentionSettings"/>
          <enumeration value="DemandDataStreamSettings"/>
          <enumeration value="CardSwapSettings"/>
          <enumeration value="OpStateRestrictionSettings"/>
          <enumeration value="OffPeakHoursSettings"/>
          <enumeration value="LdapSettings"/>
          <enumeration value="VoltageBandSettings"/>
          <enumeration value="Sla"/>
          <enumeration value="OobProbeEvent"/>
          <enumeration value="OutageProbeSettings"/>
          <enumeration value="MeterOrder"/>
          <enumeration value="BandSettings"/>
          <enumeration value="AERegistrationToken"/>
          <enumeration value="DataExports"/>
          <enumeration value="AccountInfo"/>
          <enumeration value="AuthConfig"/>
          <enumeration value="NoUISessionExpiration"/>
          <enumeration value="Operations"/>
          <enumeration value="Feeder"/>
          <enumeration value="PolicyNetRa"/>
          <enumeration value="PolicyNetCa"/>
          <enumeration value="ReadDemandRegistersPolicy"/>
          <enumeration value="ReadIntervalsPolicy"/>
          <enumeration value="ReadOutageStatsPolicy"/>
          <enumeration value="ReadPowerQualityPolicy"/>
          <enumeration value="ProgramMeterPolicy"/>
          <enumeration value="UpgradeFirmwarePolicy"/>
          <enumeration value="RebootDevicePolicy"/>
          <enumeration value="SetCopsModePolicy"/>
          <enumeration value="SignalStrengthPolicy"/>
          <enumeration value="SecurityProvisioningPolicy"/>
          <enumeration value="WimaxStatisticsPolicy"/>
          <enumeration value="LoadControlBoostPolicy"/>
          <enumeration value="EnergyServiceOffPolicy"/>
          <enumeration value="EnergyServiceOnPolicy"/>
          <enumeration value="QosProfilePolicy"/>
          <enumeration value="ClockSynchronizationPolicy"/>
          <enumeration value="PanRelayControlPolicy"/>
          <enumeration value="RevenueAssurancePolicy"/>
          <enumeration value="DeviceStateMonitorPolicy"/>
          <enumeration value="IntervalDataSummaryConfigPolicy"/>
          <enumeration value="PolicyDataRetention"/>
          <enumeration value="MeterPasswordUpdatePolicy"/>
          <enumeration value="DeviceDiagnosticsPolicy"/>
          <enumeration value="ServerCsrPolicy"/>
          <enumeration value="DeviceCsrPolicy"/>
          <enumeration value="SupplicantConfigPolicy"/>
          <enumeration value="RadioConfigPolicy"/>
          <enumeration value="MeterEventsPolicy"/>
          <enumeration value="WaterMeterRead"/>
          <enumeration value="WaterRegisterRead"/>
          <enumeration value="WaterMeterEvents"/>
          <enumeration value="WaterKeyDistribution"/>
          <enumeration value="SSHConfig"/>
          <enumeration value="ValidatedIntervalReadPolicy"/>
          <enumeration value="NetworkProvisioning"/>
          <enumeration value="PanDeviceIdentificationPolicy"/>
          <enumeration value="PanDeviceProvisioningPolicy"/>
          <enumeration value="PanNetworkProvisioningPolicy"/>
          <enumeration value="PanTextMessagePolicy"/>
          <enumeration value="PanPricingInformationPolicy"/>
          <enumeration value="ClockSetPolicy"/>
          <enumeration value="DemandDataStreamPolicy"/>
          <enumeration value="PanDredControlPolicy"/>
          <enumeration value="PanDrlcProvisioningPolicy"/>
          <enumeration value="DirectLoadControlPolicy"/>
          <enumeration value="DataStreamPolicy"/>
          <enumeration value="ConfigureMulticastGroupPolicy"/>
          <enumeration value="DirectLoadControlOverridePolicy"/>
          <enumeration value="ActivateSupplyCapacityLimitingPolicy"/>
          <enumeration value="PowerQualityProfilePolicy"/>
          <enumeration value="CheckMulticastPerformancePolicy"/>
          <enumeration value="VoltageBandMonitoringPolicy"/>
          <enumeration value="LossNeutralDetectionPolicy"/>
          <enumeration value="BrownOutDetectionPolicy"/>
          <enumeration value="serviceDegradationDetectionPolicy"/>
          <enumeration value="voltageControlPolicy"/>
          <enumeration value="lastGaspConfigPolicy"/>
          <enumeration value="demandResetPolicy"/>
          <enumeration value="registerSnapshotReadPolicy"/>
          <enumeration value="RBAPolicy"/>
          <enumeration value="sensorDataPolicy"/>
          <enumeration value="M2MEndPointUpgradePolicy"/>
          <enumeration value="BillingReadPolicy"/>
          <enumeration value="GasMeterRead"/>
          <enumeration value="cmdhPolicy"/>
          <enumeration value="scaPolicy"/>
          <enumeration value="lteNetworkConfigPolicy"/>
          <enumeration value="locationPolicy"/>
          <enumeration value="ReadDemandPolicy"/>
          <enumeration value="SoftwareUpdatePolicy"/>
          <enumeration value="PolicySettings"/>
          <enumeration value="ConfigureSupplyCapacityLimitingPolicy"/>
        </restriction>
      </simpleType>
      <simpleType name="userStatus">
        <restriction base="xsd:string">
          <enumeration value="Active"/>
          <enumeration value="Inactive"/>
          <enumeration value="Locked"/>
          <enumeration value="Deleted"/>
          <enumeration value="PasswordExpired"/>
        </restriction>
      </simpleType>
      <simpleType name="TimeZone">
        <restriction base="xsd:string">
          <enumeration value="UTC"/>
          <enumeration value="Africa/Algiers"/>
          <enumeration value="Africa/Cairo"/>
          <enumeration value="Africa/Casablanca"/>
          <enumeration value="Africa/Ceuta"/>
          <enumeration value="Africa/Djibouti"/>
          <enumeration value="Africa/Freetown"/>
          <enumeration value="Africa/Johannesburg"/>
          <enumeration value="Africa/Khartoum"/>
          <enumeration value="Africa/Mogadishu"/>
          <enumeration value="Africa/Nairobi"/>
          <enumeration value="Africa/Nouakchott"/>
          <enumeration value="Africa/Tripoli"/>
          <enumeration value="Africa/Tunis"/>
          <enumeration value="Africa/Windhoek"/>
          <enumeration value="America/Adak"/>
          <enumeration value="America/Anchorage"/>
          <enumeration value="America/Anguilla"/>
          <enumeration value="America/Araguaina"/>
          <enumeration value="America/Argentina/Buenos_Aires"/>
          <enumeration value="America/Aruba"/>
          <enumeration value="America/Asuncion"/>
          <enumeration value="America/Atka"/>
          <enumeration value="America/Belem"/>
          <enumeration value="America/Boa_Vista"/>
          <enumeration value="America/Bogota"/>
          <enumeration value="America/Boise"/>
          <enumeration value="America/Buenos_Aires"/>
          <enumeration value="America/Cambridge_Bay"/>
          <enumeration value="America/Cancun"/>
          <enumeration value="America/Caracas"/>
          <enumeration value="America/Cayenne"/>
          <enumeration value="America/Cayman"/>
          <enumeration value="America/Chicago"/>
          <enumeration value="America/Chihuahua"/>
          <enumeration value="America/Costa_Rica"/>
          <enumeration value="America/Cuiaba"/>
          <enumeration value="America/Curacao"/>
          <enumeration value="America/Dawson"/>
          <enumeration value="America/Dawson_Creek"/>
          <enumeration value="America/Denver"/>
          <enumeration value="America/Detroit"/>
          <enumeration value="America/Edmonton"/>
          <enumeration value="America/El_Salvador"/>
          <enumeration value="America/Ensenada"/>
          <enumeration value="America/Fort_Wayne"/>
          <enumeration value="America/Fortaleza"/>
          <enumeration value="America/Godthab"/>
          <enumeration value="America/Goose_Bay"/>
          <enumeration value="America/Grand_Turk"/>
          <enumeration value="America/Guadeloupe"/>
          <enumeration value="America/Guatemala"/>
          <enumeration value="America/Guayaquil"/>
          <enumeration value="America/Halifax"/>
          <enumeration value="America/Havana"/>
          <enumeration value="America/Hermosillo"/>
          <enumeration value="America/Indiana/Indianapolis"/>
          <enumeration value="America/Indiana/Knox"/>
          <enumeration value="America/Indiana/Marengo"/>
          <enumeration value="America/Indiana/Petersburg"/>
          <enumeration value="America/Indiana/Vevay"/>
          <enumeration value="America/Indiana/Vincennes"/>
          <enumeration value="America/Indianapolis"/>
          <enumeration value="America/Inuvik"/>
          <enumeration value="America/Iqaluit"/>
          <enumeration value="America/Jamaica"/>
          <enumeration value="America/Juneau"/>
          <enumeration value="America/Kentucky/Louisville"/>
          <enumeration value="America/Knox_IN"/>
          <enumeration value="America/La_Paz"/>
          <enumeration value="America/Lima"/>
          <enumeration value="America/Los_Angeles"/>
          <enumeration value="America/Louisville"/>
          <enumeration value="America/Maceio"/>
          <enumeration value="America/Managua"/>
          <enumeration value="America/Manaus"/>
          <enumeration value="America/Martinique"/>
          <enumeration value="America/Mazatlan"/>
          <enumeration value="America/Mexico_City"/>
          <enumeration value="America/Miquelon"/>
          <enumeration value="America/Montevideo"/>
          <enumeration value="America/Montreal"/>
          <enumeration value="America/Montserrat"/>
          <enumeration value="America/New_York"/>
          <enumeration value="America/Nome"/>
          <enumeration value="America/Noronha"/>
          <enumeration value="America/Panama"/>
          <enumeration value="America/Phoenix"/>
          <enumeration value="America/Porto_Acre"/>
          <enumeration value="America/Porto_Velho"/>
          <enumeration value="America/Puerto_Rico"/>
          <enumeration value="America/Rankin_Inlet"/>
          <enumeration value="America/Regina"/>
          <enumeration value="America/Rio_Branco"/>
          <enumeration value="America/Santiago"/>
          <enumeration value="America/Sao_Paulo"/>
          <enumeration value="America/Scoresbysund"/>
          <enumeration value="America/Shiprock"/>
          <enumeration value="America/St_Johns"/>
          <enumeration value="America/St_Thomas"/>
          <enumeration value="America/Swift_Current"/>
          <enumeration value="America/Tegucigalpa"/>
          <enumeration value="America/Thule"/>
          <enumeration value="America/Thunder_Bay"/>
          <enumeration value="America/Tijuana"/>
          <enumeration value="America/Tortola"/>
          <enumeration value="America/Vancouver"/>
          <enumeration value="America/Virgin"/>
          <enumeration value="America/Whitehorse"/>
          <enumeration value="America/Winnipeg"/>
          <enumeration value="America/Yellowknife"/>
          <enumeration value="Arctic/Longyearbyen"/>
          <enumeration value="Asia/Aden"/>
          <enumeration value="Asia/Almaty"/>
          <enumeration value="Asia/Amman"/>
          <enumeration value="Asia/Anadyr"/>
          <enumeration value="Asia/Aqtau"/>
          <enumeration value="Asia/Aqtobe"/>
          <enumeration value="Asia/Baghdad"/>
          <enumeration value="Asia/Bahrain"/>
          <enumeration value="Asia/Baku"/>
          <enumeration value="Asia/Bangkok"/>
          <enumeration value="Asia/Beirut"/>
          <enumeration value="Asia/Bishkek"/>
          <enumeration value="Asia/Calcutta"/>
          <enumeration value="Asia/Chongqing"/>
          <enumeration value="Asia/Chungking"/>
          <enumeration value="Asia/Dacca"/>
          <enumeration value="Asia/Damascus"/>
          <enumeration value="Asia/Dhaka"/>
          <enumeration value="Asia/Dubai"/>
          <enumeration value="Asia/Gaza"/>
          <enumeration value="Asia/Harbin"/>
          <enumeration value="Asia/Hong_Kong"/>
          <enumeration value="Asia/Irkutsk"/>
          <enumeration value="Asia/Istanbul"/>
          <enumeration value="Asia/Jakarta"/>
          <enumeration value="Asia/Jayapura"/>
          <enumeration value="Asia/Jerusalem"/>
          <enumeration value="Asia/Kabul"/>
          <enumeration value="Asia/Kamchatka"/>
          <enumeration value="Asia/Karachi"/>
          <enumeration value="Asia/Kashgar"/>
          <enumeration value="Asia/Krasnoyarsk"/>
          <enumeration value="Asia/Kuala_Lumpur"/>
          <enumeration value="Asia/Kuching"/>
          <enumeration value="Asia/Kuwait"/>
          <enumeration value="Asia/Macao"/>
          <enumeration value="Asia/Macau"/>
          <enumeration value="Asia/Magadan"/>
          <enumeration value="Asia/Makassar"/>
          <enumeration value="Asia/Manila"/>
          <enumeration value="Asia/Muscat"/>
          <enumeration value="Asia/Nicosia"/>
          <enumeration value="Asia/Novosibirsk"/>
          <enumeration value="Asia/Omsk"/>
          <enumeration value="Asia/Qatar"/>
          <enumeration value="Asia/Rangoon"/>
          <enumeration value="Asia/Riyadh"/>
          <enumeration value="Asia/Saigon"/>
          <enumeration value="Asia/Seoul"/>
          <enumeration value="Asia/Shanghai"/>
          <enumeration value="Asia/Singapore"/>
          <enumeration value="Asia/Taipei"/>
          <enumeration value="Asia/Tashkent"/>
          <enumeration value="Asia/Tbilisi"/>
          <enumeration value="Asia/Tehran"/>
          <enumeration value="Asia/Tel_Aviv"/>
          <enumeration value="Asia/Tokyo"/>
          <enumeration value="Asia/Ujung_Pandang"/>
          <enumeration value="Asia/Urumqi"/>
          <enumeration value="Asia/Vladivostok"/>
          <enumeration value="Asia/Yakutsk"/>
          <enumeration value="Asia/Yekaterinburg"/>
          <enumeration value="Asia/Yerevan"/>
          <enumeration value="Atlantic/Azores"/>
          <enumeration value="Atlantic/Bermuda"/>
          <enumeration value="Atlantic/Canary"/>
          <enumeration value="Atlantic/Faeroe"/>
          <enumeration value="Atlantic/Jan_Mayen"/>
          <enumeration value="Atlantic/Madeira"/>
          <enumeration value="Atlantic/Reykjavik"/>
          <enumeration value="Atlantic/St_Helena"/>
          <enumeration value="Atlantic/Stanley"/>
          <enumeration value="Australia/ACT"/>
          <enumeration value="Australia/Adelaide"/>
          <enumeration value="Australia/Brisbane"/>
          <enumeration value="Australia/Broken_Hill"/>
          <enumeration value="Australia/Canberra"/>
          <enumeration value="Australia/Darwin"/>
          <enumeration value="Australia/Hobart"/>
          <enumeration value="Australia/LHI"/>
          <enumeration value="Australia/Lindeman"/>
          <enumeration value="Australia/Lord_Howe"/>
          <enumeration value="Australia/Melbourne"/>
          <enumeration value="Australia/NSW"/>
          <enumeration value="Australia/North"/>
          <enumeration value="Australia/Perth"/>
          <enumeration value="Australia/Queensland"/>
          <enumeration value="Australia/South"/>
          <enumeration value="Australia/Sydney"/>
          <enumeration value="Australia/Tasmania"/>
          <enumeration value="Australia/Victoria"/>
          <enumeration value="Australia/West"/>
          <enumeration value="Australia/Yancowinna"/>
          <enumeration value="Brazil/Acre"/>
          <enumeration value="Brazil/DeNoronha"/>
          <enumeration value="Brazil/East"/>
          <enumeration value="Brazil/West"/>
          <enumeration value="CET"/>
          <enumeration value="CST"/>
          <enumeration value="CST6CDT"/>
          <enumeration value="Canada/Atlantic"/>
          <enumeration value="Canada/Central"/>
          <enumeration value="Canada/East-Saskatchewan"/>
          <enumeration value="Canada/Eastern"/>
          <enumeration value="Canada/Mountain"/>
          <enumeration value="Canada/Newfoundland"/>
          <enumeration value="Canada/Pacific"/>
          <enumeration value="Canada/Saskatchewan"/>
          <enumeration value="Canada/Yukon"/>
          <enumeration value="Chile/Continental"/>
          <enumeration value="Chile/EasterIsland"/>
          <enumeration value="Cuba"/>
          <enumeration value="EET"/>
          <enumeration value="EST"/>
          <enumeration value="EST5EDT"/>
          <enumeration value="Egypt"/>
          <enumeration value="Eire"/>
          <enumeration value="Etc/GMT"/>
          <enumeration value="Etc/GMT+0"/>
          <enumeration value="Etc/GMT+1"/>
          <enumeration value="Etc/GMT+10"/>
          <enumeration value="Etc/GMT+11"/>
          <enumeration value="Etc/GMT+12"/>
          <enumeration value="Etc/GMT+2"/>
          <enumeration value="Etc/GMT+3"/>
          <enumeration value="Etc/GMT+4"/>
          <enumeration value="Etc/GMT+5"/>
          <enumeration value="Etc/GMT+6"/>
          <enumeration value="Etc/GMT+7"/>
          <enumeration value="Etc/GMT+8"/>
          <enumeration value="Etc/GMT+9"/>
          <enumeration value="Etc/GMT-0"/>
          <enumeration value="Etc/GMT-1"/>
          <enumeration value="Etc/GMT-10"/>
          <enumeration value="Etc/GMT-11"/>
          <enumeration value="Etc/GMT-12"/>
          <enumeration value="Etc/GMT-13"/>
          <enumeration value="Etc/GMT-14"/>
          <enumeration value="Etc/GMT-2"/>
          <enumeration value="Etc/GMT-3"/>
          <enumeration value="Etc/GMT-4"/>
          <enumeration value="Etc/GMT-5"/>
          <enumeration value="Etc/GMT-6"/>
          <enumeration value="Etc/GMT-7"/>
          <enumeration value="Etc/GMT-8"/>
          <enumeration value="Etc/GMT-9"/>
          <enumeration value="Etc/GMT0"/>
          <enumeration value="Etc/Greenwich"/>
          <enumeration value="Europe/Amsterdam"/>
          <enumeration value="Europe/Athens"/>
          <enumeration value="Europe/Belfast"/>
          <enumeration value="Europe/Belgrade"/>
          <enumeration value="Europe/Berlin"/>
          <enumeration value="Europe/Bratislava"/>
          <enumeration value="Europe/Brussels"/>
          <enumeration value="Europe/Bucharest"/>
          <enumeration value="Europe/Budapest"/>
          <enumeration value="Europe/Copenhagen"/>
          <enumeration value="Europe/Dublin"/>
          <enumeration value="Europe/Gibraltar"/>
          <enumeration value="Europe/Guernsey"/>
          <enumeration value="Europe/Helsinki"/>
          <enumeration value="Europe/Isle_of_Man"/>
          <enumeration value="Europe/Istanbul"/>
          <enumeration value="Europe/Jersey"/>
          <enumeration value="Europe/Kaliningrad"/>
          <enumeration value="Europe/Kiev"/>
          <enumeration value="Europe/Lisbon"/>
          <enumeration value="Europe/Ljubljana"/>
          <enumeration value="Europe/London"/>
          <enumeration value="Europe/Luxembourg"/>
          <enumeration value="Europe/Madrid"/>
          <enumeration value="Europe/Mariehamn"/>
          <enumeration value="Europe/Minsk"/>
          <enumeration value="Europe/Monaco"/>
          <enumeration value="Europe/Moscow"/>
          <enumeration value="Europe/Nicosia"/>
          <enumeration value="Europe/Oslo"/>
          <enumeration value="Europe/Paris"/>
          <enumeration value="Europe/Podgorica"/>
          <enumeration value="Europe/Prague"/>
          <enumeration value="Europe/Riga"/>
          <enumeration value="Europe/Rome"/>
          <enumeration value="Europe/Samara"/>
          <enumeration value="Europe/San_Marino"/>
          <enumeration value="Europe/Sarajevo"/>
          <enumeration value="Europe/Simferopol"/>
          <enumeration value="Europe/Skopje"/>
          <enumeration value="Europe/Sofia"/>
          <enumeration value="Europe/Stockholm"/>
          <enumeration value="Europe/Tallinn"/>
          <enumeration value="Europe/Tirane"/>
          <enumeration value="Europe/Uzhgorod"/>
          <enumeration value="Europe/Vatican"/>
          <enumeration value="Europe/Vienna"/>
          <enumeration value="Europe/Vilnius"/>
          <enumeration value="Europe/Volgograd"/>
          <enumeration value="Europe/Warsaw"/>
          <enumeration value="Europe/Zagreb"/>
          <enumeration value="Europe/Zaporozhye"/>
          <enumeration value="Europe/Zurich"/>
          <enumeration value="GB"/>
          <enumeration value="GB-Eire"/>
          <enumeration value="GMT"/>
          <enumeration value="GMT+0"/>
          <enumeration value="GMT-0"/>
          <enumeration value="GMT0"/>
          <enumeration value="Greenwich"/>
          <enumeration value="HST"/>
          <enumeration value="Hongkong"/>
          <enumeration value="Iceland"/>
          <enumeration value="Indian/Chagos"/>
          <enumeration value="Indian/Christmas"/>
          <enumeration value="Indian/Cocos"/>
          <enumeration value="Indian/Mayotte"/>
          <enumeration value="Indian/Reunion"/>
          <enumeration value="Iran"/>
          <enumeration value="Israel"/>
          <enumeration value="Jamaica"/>
          <enumeration value="Japan"/>
          <enumeration value="Kwajalein"/>
          <enumeration value="Libya"/>
          <enumeration value="MET"/>
          <enumeration value="MST"/>
          <enumeration value="MST7MDT"/>
          <enumeration value="Mexico/BajaNorte"/>
          <enumeration value="Mexico/BajaSur"/>
          <enumeration value="Mexico/General"/>
          <enumeration value="NZ"/>
          <enumeration value="NZ-CHAT"/>
          <enumeration value="Navajo"/>
          <enumeration value="PRC"/>
          <enumeration value="PST"/>
          <enumeration value="PST8PDT"/>
          <enumeration value="Pacific/Auckland"/>
          <enumeration value="Pacific/Chatham"/>
          <enumeration value="Pacific/Easter"/>
          <enumeration value="Pacific/Fakaofo"/>
          <enumeration value="Pacific/Fiji"/>
          <enumeration value="Pacific/Gambier"/>
          <enumeration value="Pacific/Guam"/>
          <enumeration value="Pacific/Honolulu"/>
          <enumeration value="Pacific/Johnston"/>
          <enumeration value="Pacific/Kiritimati"/>
          <enumeration value="Pacific/Kwajalein"/>
          <enumeration value="Pacific/Marquesas"/>
          <enumeration value="Pacific/Midway"/>
          <enumeration value="Pacific/Niue"/>
          <enumeration value="Pacific/Norfolk"/>
          <enumeration value="Pacific/Noumea"/>
          <enumeration value="Pacific/Pago_Pago"/>
          <enumeration value="Pacific/Pitcairn"/>
          <enumeration value="Pacific/Rarotonga"/>
          <enumeration value="Pacific/Saipan"/>
          <enumeration value="Pacific/Samoa"/>
          <enumeration value="Pacific/Tahiti"/>
          <enumeration value="Pacific/Tongatapu"/>
          <enumeration value="Pacific/Wake"/>
          <enumeration value="Pacific/Wallis"/>
          <enumeration value="Poland"/>
          <enumeration value="Portugal"/>
          <enumeration value="ROC"/>
          <enumeration value="ROK"/>
          <enumeration value="Singapore"/>
          <enumeration value="Turkey"/>
          <enumeration value="US/Alaska"/>
          <enumeration value="US/Aleutian"/>
          <enumeration value="US/Arizona"/>
          <enumeration value="US/Central"/>
          <enumeration value="US/East-Indiana"/>
          <enumeration value="US/Eastern"/>
          <enumeration value="US/Hawaii"/>
          <enumeration value="US/Indiana-Starke"/>
          <enumeration value="US/Michigan"/>
          <enumeration value="US/Mountain"/>
          <enumeration value="US/Pacific"/>
          <enumeration value="US/Pacific-New"/>
          <enumeration value="US/Samoa"/>
          <enumeration value="W-SU"/>
          <enumeration value="WET"/>
        </restriction>
      </simpleType>
      <simpleType name="WindowType">
        <restriction base="xsd:string">
          <enumeration value="Today"/>
          <enumeration value="Yesterday"/>
          <enumeration value="Past7Days"/>
          <enumeration value="Past30Days"/>
          <enumeration value="Custom"/>
        </restriction>
      </simpleType>
      <simpleType name="OutageType">
        <restriction base="xsd:string">
          <enumeration value="Planned"/>
          <enumeration value="Unplanned"/>
        </restriction>
      </simpleType>
      <simpleType name="PolicyFields">
        <restriction base="xsd:string">
          <enumeration value="policyId"/>
          <enumeration value="type"/>
          <enumeration value="name"/>
          <enumeration value="description"/>
          <enumeration value="startTime"/>
          <enumeration value="endTime"/>
          <enumeration value="frequency"/>
          <enumeration value="deployState"/>
          <enumeration value="reportState"/>
          <enumeration value="deviceCount"/>
          <enumeration value="devicesDeployed"/>
          <enumeration value="devicesReported"/>
          <enumeration value="onRequest"/>
          <enumeration value="createDate"/>
          <enumeration value="lastModifyDate"/>
          <enumeration value="creatorId"/>
          <enumeration value="isActive"/>
          <enumeration value="approver"/>
          <enumeration value="customerName"/>
        </restriction>
      </simpleType>
      <simpleType name="PolicyActivityState">
        <restriction base="xsd:string">
          <enumeration value="Active"/>
          <enumeration value="Inactive"/>
          <enumeration value="Both"/>
        </restriction>
      </simpleType>
      <simpleType name="PolicyCreator">
        <restriction base="xsd:string">
          <enumeration value="User"/>
          <enumeration value="System"/>
          <enumeration value="All"/>
        </restriction>
      </simpleType>
      <simpleType name="UserFields">
        <restriction base="xsd:string">
          <enumeration value="userId"/>
          <enumeration value="userName"/>
          <enumeration value="description"/>
          <enumeration value="firstName"/>
          <enumeration value="lastName"/>
          <enumeration value="emailAddress"/>
          <enumeration value="officePhone"/>
          <enumeration value="mobilePhone"/>
          <enumeration value="status"/>
          <enumeration value="createDate"/>
          <enumeration value="creatorId"/>
          <enumeration value="lastLoginDate"/>
          <enumeration value="timeZone"/>
          <enumeration value="customerName"/>
        </restriction>
      </simpleType>
      <simpleType name="RoleFields">
        <restriction base="xsd:string">
          <enumeration value="roleId"/>
          <enumeration value="roleName"/>
          <enumeration value="roleDescription"/>
          <enumeration value="roleTypeId"/>
          <enumeration value="createDate"/>
          <enumeration value="creatorId"/>
          <enumeration value="userCount"/>
          <enumeration value="customerName"/>
        </restriction>
      </simpleType>
      <simpleType name="ClockDriftReportFields">
        <restriction base="xsd:string">
          <enumeration value="usn"/>
          <enumeration value="servicePointId"/>
          <enumeration value="drift"/>
          <enumeration value="localTime"/>
          <enumeration value="systemTime"/>
        </restriction>
      </simpleType>
      <simpleType name="ClockAdjustmentReportFields">
        <restriction base="xsd:string">
          <enumeration value="usn"/>
          <enumeration value="servicePointId"/>
          <enumeration value="eventTime"/>
          <enumeration value="preCorrectionTime"/>
          <enumeration value="postCorrectionTime"/>
          <enumeration value="timeDelta"/>
          <enumeration value="clockSetSource"/>
        </restriction>
      </simpleType>
      <simpleType name="LengthUnit">
        <restriction base="xsd:string">
          <enumeration value="kilometers"/>
          <enumeration value="miles"/>
        </restriction>
      </simpleType>
      <simpleType name="StreetDirection">
        <restriction base="xsd:string">
          <enumeration value="N"/>
          <enumeration value="E"/>
          <enumeration value="S"/>
          <enumeration value="W"/>
          <enumeration value="NE"/>
          <enumeration value="NW"/>
          <enumeration value="SE"/>
          <enumeration value="SW"/>
        </restriction>
      </simpleType>
      <simpleType name="CommAssetFields">
        <restriction base="xsd:string">
          <enumeration value="bindState"/>
          <enumeration value="operationalStatus"/>
          <enumeration value="sgcSerialNumber"/>
          <enumeration value="boardSerialNumber"/>
          <enumeration value="mfgSerialNumber"/>
          <enumeration value="wanMacAddress"/>
          <enumeration value="hanMacAddress"/>
          <enumeration value="linkType"/>
        </restriction>
      </simpleType>
      <simpleType name="FirmwarePackageFields">
        <restriction base="xsd:string">
          <enumeration value="packageId"/>
          <enumeration value="packageName"/>
          <enumeration value="firmwareVersion"/>
          <enumeration value="hardwareVersion"/>
          <enumeration value="releaseDate"/>
          <enumeration value="deviceType"/>
          <enumeration value="packageDesc"/>
          <enumeration value="createDate"/>
          <enumeration value="creatorUserId"/>
          <enumeration value="status"/>
          <enumeration value="softwareType"/>
          <enumeration value="eligiblePlatform"/>
          <enumeration value="deviceCount"/>
          <enumeration value="packagePublisher"/>
        </restriction>
      </simpleType>
      <simpleType name="GroupFields">
        <restriction base="xsd:string">
          <enumeration value="groupId"/>
          <enumeration value="groupType"/>
          <enumeration value="name"/>
          <enumeration value="description"/>
          <enumeration value="dynamicQuery"/>
          <enumeration value="memberCount"/>
          <enumeration value="createDate"/>
          <enumeration value="creatorId"/>
          <enumeration value="groupCategory"/>
          <enumeration value="customerName"/>
        </restriction>
      </simpleType>
      <simpleType name="EligibleType">
        <restriction base="xsd:string">
          <enumeration value="eligible"/>
          <enumeration value="partiallyEligible"/>
          <enumeration value="notEligible"/>
        </restriction>
      </simpleType>
      <simpleType name="AuditTrailFields">
        <restriction base="xsd:string">
          <enumeration value="auditTrailId"/>
          <enumeration value="userId"/>
          <enumeration value="userName"/>
          <enumeration value="operationType"/>
          <enumeration value="operationTypeName"/>
          <enumeration value="objectTypeId"/>
          <enumeration value="objectTypeName"/>
          <enumeration value="objectId"/>
          <enumeration value="objectName"/>
          <enumeration value="status"/>
          <enumeration value="message"/>
          <enumeration value="created"/>
        </restriction>
      </simpleType>
      <simpleType name="NameType">
        <restriction base="xsd:string">
          <enumeration value="NameType-Device"/>
          <enumeration value="NameType-Policy"/>
          <enumeration value="NameType-DeviceGroup"/>
          <enumeration value="NameType-Meter"/>
          <enumeration value="NameType-SgModem"/>
          <enumeration value="NameType-User"/>
          <enumeration value="NameType-Role"/>
          <enumeration value="NameType-MfgCustomer"/>
          <enumeration value="NameType-MfgProduct"/>
          <enumeration value="NameType-ServicePoint"/>
          <enumeration value="NameType-CommAsset"/>
          <enumeration value="NameType-Feeder"/>
          <enumeration value="NameType-Transformer"/>
          <enumeration value="NameType-Subtransformer"/>
          <enumeration value="NameType-Topic"/>
          <enumeration value="NameType-Sla"/>
          <enumeration value="NameType-Customer"/>
          <enumeration value="NameType-WaterMeter"/>
          <enumeration value="NameType-GasMeter"/>
        </restriction>
      </simpleType>
      <simpleType name="policyResultEnforcementStatus">
        <restriction base="xsd:string">
          <enumeration value="All"/>
          <enumeration value="AwaitingResponse"/>
          <enumeration value="Failure"/>
          <enumeration value="Success"/>
        </restriction>
      </simpleType>
      <simpleType name="FailedEnforcementReportField">
        <restriction base="xsd:string">
          <enumeration value="utilitySerialNo"/>
          <enumeration value="lastNetworkEntry"/>
        </restriction>
      </simpleType>
      <simpleType name="FailedEnforcementReportType">
        <restriction base="xsd:string">
          <enumeration value="didNotReport"/>
          <enumeration value="reportedFailure"/>
        </restriction>
      </simpleType>
      <simpleType name="omsRequestType">
        <restriction base="xsd:string">
          <enumeration value="ONDEMAND"/>
          <enumeration value="RESTORE"/>
        </restriction>
      </simpleType>
      <simpleType name="DeviceStateMonitorEvent">
        <restriction base="xsd:string">
          <enumeration value="DiscoveredNoServicePoint"/>
          <enumeration value="InstalledNoNetwork"/>
        </restriction>
      </simpleType>
      <simpleType name="TopicType">
        <annotation>
          <documentation>The newDevices topic type is deprecated.  Please use newElectricityDevices instead.  allMeterEventsTopic, serviceEvents, meterHealth, and meterEvents topic types were deprecated in 2.4 and are no longer functional;  Please use allDeviceEvents, energyServiceEvents, healthEvents, and allDeviceEvents respectively instead.  The demandReadStream topic type is deprecated as of PolicyNet 2.6  Please use dataStreamData instead.</documentation>
        </annotation>
        <restriction base="xsd:string">
          <enumeration value="intervalData"/>
          <enumeration value="registerData"/>
          <enumeration value="powerQualityData"/>
          <enumeration value="ieeeOutageStats"/>
          <enumeration value="wimaxStats"/>
          <enumeration value="serviceEvents"/>
          <enumeration value="operationalEvents"/>
          <enumeration value="tamperEvents"/>
          <enumeration value="outageNotification"/>
          <enumeration value="meterEvents"/>
          <enumeration value="newElectricityDevices"/>
          <enumeration value="newDevices"/>
          <enumeration value="deviceOperationalState"/>
          <enumeration value="deviceStateMonitorTopic"/>
          <enumeration value="panEvents"/>
          <enumeration value="hanMeterReads"/>
          <enumeration value="commBinding"/>
          <enumeration value="newSgCards"/>
          <enumeration value="newMeters"/>
          <enumeration value="newRouters"/>
          <enumeration value="allMeterEventsTopic"/>
          <enumeration value="waterIntervalData"/>
          <enumeration value="waterRegisterData"/>
          <enumeration value="waterMeterEventsTopic"/>
          <enumeration value="newWaterMeters"/>
          <enumeration value="commServiceEvents"/>
          <enumeration value="energyServiceEvents"/>
          <enumeration value="waterServiceEvents"/>
          <enumeration value="healthEvents"/>
          <enumeration value="smartAgentEvents"/>
          <enumeration value="nmsServerEvents"/>
          <enumeration value="configControlEvents"/>
          <enumeration value="allDeviceEvents"/>
          <enumeration value="validatedIntervalData"/>
          <enumeration value="dataStreamData"/>
          <enumeration value="demandReadStream"/>
          <enumeration value="panTopology"/>
          <enumeration value="deviceConfigChange"/>
          <enumeration value="powerQualityProfileData"/>
          <enumeration value="customEventTopic"/>
          <enumeration value="gasReadData"/>
          <enumeration value="newGasMeters"/>
          <enumeration value="revenueAssuranceEvents"/>
          <enumeration value="billingReadData"/>
          <enumeration value="gasIntervalData"/>
          <enumeration value="gasRegisterData"/>
          <enumeration value="gasMeterEvents"/>
          <enumeration value="customDataExport"/>
          <enumeration value="scmCheckoutCart"/>
        </restriction>
      </simpleType>
      <simpleType name="TopicSearchRequestData">
        <restriction base="xsd:string">
          <enumeration value="topicData"/>
          <enumeration value="policyData"/>
          <enumeration value="allData"/>
        </restriction>
      </simpleType>
      <simpleType name="commDeviceStatus">
        <restriction base="xsd:string">
          <enumeration value="inactive"/>
          <enumeration value="active"/>
        </restriction>
      </simpleType>
      <simpleType name="commDeviceType">
        <restriction base="xsd:string">
          <enumeration value="baseStation"/>
          <enumeration value="baseStationSector"/>
          <enumeration value="asnGw"/>
          <enumeration value="switchRouter"/>
        </restriction>
      </simpleType>
      <simpleType name="DredStatusReportFields">
        <restriction base="xsd:string">
          <enumeration value="utilitySerialNumber"/>
          <enumeration value="servicePointId"/>
          <enumeration value="espUtilitySerialNumber"/>
          <enumeration value="loadSizeKva"/>
          <enumeration value="panStatus"/>
          <enumeration value="loadControlParticipation"/>
          <enumeration value="firmwareVersion"/>
          <enumeration value="nextEventTime"/>
          <enumeration value="customerName"/>
        </restriction>
      </simpleType>
      <simpleType name="DataRetentionType">
        <restriction base="xsd:string">
          <enumeration value="intervalData"/>
          <enumeration value="registerData"/>
          <enumeration value="deviceEventData"/>
          <enumeration value="policyEventData"/>
        </restriction>
      </simpleType>
      <simpleType name="ClockSetSource">
        <restriction base="xsd:string">
          <enumeration value="MeterClockSynchronizePolicy"/>
          <enumeration value="MeterClockSetPolicy"/>
          <enumeration value="Local"/>
        </restriction>
      </simpleType>
      <simpleType name="RadiusAccountingReportFields">
        <restriction base="xsd:string">
          <enumeration value="usn"/>
          <enumeration value="servicePointId"/>
          <enumeration value="callingStationId"/>
          <enumeration value="wanMacAddress"/>
          <enumeration value="baseStationSector"/>
          <enumeration value="ipAddress"/>
          <enumeration value="inputKb"/>
          <enumeration value="outputKb"/>
          <enumeration value="totalKb"/>
          <enumeration value="totalSessionTime"/>
          <enumeration value="totalSessions"/>
        </restriction>
      </simpleType>
      <simpleType name="SearchDevicesBaseFields">
        <restriction base="xsd:string">
          <enumeration value="utilitySerialNumber"/>
          <enumeration value="deviceType"/>
          <enumeration value="wanMacAddress"/>
          <enumeration value="servicePointId"/>
          <enumeration value="firmwareVersion"/>
          <enumeration value="baseStationSectorId"/>
          <enumeration value="signalStrength"/>
          <enumeration value="programId"/>
          <enumeration value="eui"/>
          <enumeration value="customerName"/>
          <enumeration value="manufacturer"/>
          <enumeration value="model"/>
          <enumeration value="phaseType"/>
          <enumeration value="form"/>
          <enumeration value="operatingMode"/>
          <enumeration value="parentUSN"/>
          <enumeration value="billingCycleId"/>
          <enumeration value="billingCycleName"/>
        </restriction>
      </simpleType>
      <simpleType name="slaStatus">
        <restriction base="xsd:string">
          <enumeration value="slaInProgress"/>
          <enumeration value="slaMet"/>
          <enumeration value="slaNotMet"/>
        </restriction>
      </simpleType>
      <simpleType name="subscriptionType">
        <restriction base="xsd:string">
          <enumeration value="Electric"/>
          <enumeration value="Water"/>
          <enumeration value="Gas"/>
          <enumeration value="Gateway"/>
        </restriction>
      </simpleType>
      <simpleType name="customerAction">
        <restriction base="xsd:string">
          <enumeration value="Reactivate"/>
          <enumeration value="Suspend"/>
          <enumeration value="Cancel"/>
        </restriction>
      </simpleType>
      <simpleType name="accountStatus">
        <restriction base="xsd:string">
          <enumeration value="Active"/>
          <enumeration value="Suspended"/>
          <enumeration value="Cancelled"/>
        </restriction>
      </simpleType>
      <simpleType name="OrderStatus">
        <restriction base="xsd:string">
          <enumeration value="Created"/>
          <enumeration value="Received"/>
          <enumeration value="Processing"/>
          <enumeration value="Manufacturing"/>
          <enumeration value="Shipping"/>
          <enumeration value="Complete"/>
          <enumeration value="Canceled"/>
        </restriction>
      </simpleType>
      <simpleType name="ScmTransactionType">
        <restriction base="xsd:string">
          <enumeration value="Provision"/>
          <enumeration value="Suspend"/>
          <enumeration value="Reactivate"/>
          <enumeration value="Cancel"/>
        </restriction>
      </simpleType>
      <simpleType name="ScmProvisioningAction">
        <restriction base="xsd:string">
          <enumeration value="Add"/>
          <enumeration value="Delete"/>
        </restriction>
      </simpleType>
      <simpleType name="BandType">
        <restriction base="xsd:string">
          <enumeration value="waterConsumption"/>
          <enumeration value="loadProfile"/>
          <enumeration value="maxDemand"/>
          <enumeration value="powerFactor"/>
        </restriction>
      </simpleType>
      <simpleType name="ReportType">
        <restriction base="xsd:string">
          <enumeration value="RegisterReport"/>
          <enumeration value="IntervalReport"/>
          <enumeration value="PowerQualityReport"/>
          <enumeration value="DeviceEventReport"/>
        </restriction>
      </simpleType>
      <simpleType name="Delimiter">
        <restriction base="xsd:string">
          <enumeration value="comma"/>
          <enumeration value="semicolon"/>
          <enumeration value="colon"/>
          <enumeration value="space"/>
          <enumeration value="tab"/>
          <enumeration value="pipe"/>
        </restriction>
      </simpleType>
      <simpleType name="EnergyStateFilter">
        <restriction base="xsd:string">
          <enumeration value="ENERGIZED"/>
          <enumeration value="DEENERGIZED"/>
          <enumeration value="UNKNOWN"/>
          <enumeration value="ALL"/>
        </restriction>
      </simpleType>
      <simpleType name="ScmReportType">
        <restriction base="xsd:string">
          <enumeration value="Daily"/>
          <enumeration value="Cycle"/>
          <enumeration value="Transaction"/>
        </restriction>
      </simpleType>
      <simpleType name="ScmSubscriptionCycle">
        <restriction base="xsd:string">
          <enumeration value="current"/>
          <enumeration value="previous"/>
          <enumeration value="userDefined"/>
        </restriction>
      </simpleType>
      <simpleType name="ApplicationPackageFields">
        <restriction base="xsd:string">
          <enumeration value="packageId"/>
          <enumeration value="packageName"/>
          <enumeration value="firmwareVersion"/>
          <enumeration value="hardwareVersion"/>
          <enumeration value="releaseDate"/>
          <enumeration value="packageDesc"/>
          <enumeration value="createDate"/>
          <enumeration value="creatorUserId"/>
          <enumeration value="status"/>
          <enumeration value="softwareType"/>
          <enumeration value="eligiblePlatform"/>
          <enumeration value="deviceCount"/>
        </restriction>
      </simpleType>
      <simpleType name="NasClientType">
        <restriction base="xsd:string">
          <enumeration value="nasClientType1"/>
          <enumeration value="nasClientType2"/>
        </restriction>
      </simpleType>
      <simpleType name="DeviceListFields">
        <restriction base="xsd:string">
          <enumeration value="deviceType"/>
          <enumeration value="utilitySerialNumber"/>
          <enumeration value="linkType"/>
          <enumeration value="wanMacAddress"/>
          <enumeration value="hanMacAddress"/>
          <enumeration value="eui"/>
          <enumeration value="operationalStatus"/>
          <enumeration value="programId"/>
          <enumeration value="wimaxConnectivity"/>
          <enumeration value="servicePointId"/>
          <enumeration value="streetNo"/>
          <enumeration value="streetAddress"/>
          <enumeration value="streetType"/>
          <enumeration value="streetDirection"/>
          <enumeration value="aptNumber"/>
          <enumeration value="city"/>
          <enumeration value="stateProv"/>
          <enumeration value="postalCode"/>
          <enumeration value="baseStationSectorId"/>
          <enumeration value="XCoordinate"/>
          <enumeration value="YCoordinate"/>
          <enumeration value="ZCoordinate"/>
          <enumeration value="lifeSafety"/>
          <enumeration value="transformerId"/>
          <enumeration value="subTransformerId"/>
          <enumeration value="feederId"/>
          <enumeration value="customerName"/>
        </restriction>
      </simpleType>
      <simpleType name="BindOperation">
        <restriction base="xsd:string">
          <enumeration value="bind"/>
          <enumeration value="unbind"/>
        </restriction>
      </simpleType>
      <simpleType name="EventSummaryField">
        <restriction base="xsd:string">
          <enumeration value="eventCategory"/>
          <enumeration value="eventCode"/>
          <enumeration value="eventDesc"/>
          <enumeration value="eventSeverity"/>
          <enumeration value="eventCount"/>
        </restriction>
      </simpleType>
      <simpleType name="OutageReportFields">
        <restriction base="xsd:string">
          <enumeration value="utilitySerialNumber"/>
          <enumeration value="servicePointId"/>
          <enumeration value="deviceType"/>
          <enumeration value="lastOutageTime"/>
          <enumeration value="feederId"/>
          <enumeration value="transformerId"/>
          <enumeration value="subTransformerId"/>
          <enumeration value="XCoordinate"/>
          <enumeration value="YCoordinate"/>
          <enumeration value="outageAddress"/>
          <enumeration value="feederFailedPct"/>
        </restriction>
      </simpleType>
      <simpleType name="DualAuthPolicyType">
        <annotation>
          <documentation>Only service switch ON and OFF policies support dual authorization.</documentation>
        </annotation>
        <restriction base="xsd:string">
          <enumeration value="energyServiceOff"/>
          <enumeration value="energyServiceOn"/>
          <enumeration value="directLoadControl"/>
          <enumeration value="directLoadControlOverride"/>
          <enumeration value="activateSupplyCapacityLimiting"/>
        </restriction>
      </simpleType>
      <simpleType name="LdapServerSecurityType">
        <annotation>
          <documentation>If "sslOneWayAuthentication", use SSL and only authenticate the LDAP server.</documentation>
        </annotation>
        <restriction base="xsd:string">
          <enumeration value="noSsl"/>
          <enumeration value="sslOneWayAuthentication"/>
        </restriction>
      </simpleType>
      <simpleType name="cardSwapRestriction">
        <restriction base="xsd:string">
          <enumeration value="allowSwapWithPriorUnbindingOnly"/>
          <enumeration value="allowSwapWithoutPriorUnbinding"/>
        </restriction>
      </simpleType>
      <complexType name="BinaryData">
        <sequence>
          <element ref="xop:Include" minOccurs="1" maxOccurs="1"/>
        </sequence>
        <attribute ref="xmime5:contentType" use="optional"/>
      </complexType>
      <complexType name="PeerSystem">
        <annotation>
          <documentation>Third party SOAP client or server that interacts with PolicyNet.</documentation>
        </annotation>
        <sequence/>
        <attribute name="systemId" type="xsd:int" use="optional"/>
        <attribute name="systemMrid" type="xsd:string" use="optional"/>
        <attribute name="systemName" type="xsd:string" use="required"/>
        <attribute name="systemDesc" type="xsd:string" use="optional"/>
        <attribute name="createDate" type="xsd:dateTime" use="optional"/>
        <attribute name="creatorId" type="xsd:string" use="optional"/>
        <attribute name="lastModifyDate" type="xsd:dateTime" use="optional"/>
        <attribute name="lastModifierId" type="xsd:string" use="optional"/>
      </complexType>
      <complexType name="DeviceGroupMember">
        <sequence/>
        <attribute name="utilitySerialNumber" type="policynet:UtilitySerialNumber" use="required"/>
        <attribute name="wanMacAddress" type="policynet:macAddress" use="required"/>
        <attribute name="servicePointId" type="policynet:ServicePointId" use="required"/>
        <attribute name="customerId" type="xsd:positiveInteger" use="optional"/>
        <attribute name="customerName" type="xsd:string" use="optional"/>
      </complexType>
      <complexType name="Devices">
        <sequence>
          <element name="device" type="policynet:DeviceGroupMember" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
        </sequence>
      </complexType>
      <complexType name="Consumer">
        <annotation>
          <documentation>Consumer of PolicyNet publications.</documentation>
        </annotation>
        <sequence>
          <element name="emailAddresses" type="xsd:string" minOccurs="0" maxOccurs="unbounded"/>
          <element name="emailToSmsAddresses" type="xsd:string" minOccurs="0" maxOccurs="unbounded"/>
          <element name="subscriptions" type="xsd:string" minOccurs="0" maxOccurs="unbounded"/>
        </sequence>
        <attribute name="mrid" type="policynet:Mrid" use="optional"/>
        <attribute name="wsdlUrl" type="xsd:string" use="optional"/>
        <attribute name="serviceName" type="xsd:string" use="required"/>
        <attribute name="consumerTypeId" type="xsd:positiveInteger" use="required"/>
        <attribute name="consumerType" type="xsd:string" use="optional"/>
        <attribute name="userName" type="xsd:string" use="optional"/>
        <attribute name="password" type="xsd:string" use="optional"/>
        <attribute name="creator" type="xsd:string" use="optional"/>
        <attribute name="customerId" type="xsd:positiveInteger" use="optional"/>
        <attribute name="customerName" type="xsd:string" use="optional"/>
        <attribute name="keyId" type="xsd:positiveInteger" use="optional"/>
      </complexType>
      <complexType name="Targets">
        <sequence>
          <element name="utilitySerialNumber" type="policynet:UtilitySerialNumber" minOccurs="0" maxOccurs="unbounded"/>
          <element name="groupId" type="xsd:int" minOccurs="0" maxOccurs="unbounded"/>
          <element name="servicePointId" type="policynet:ServicePointId" minOccurs="0" maxOccurs="unbounded"/>
          <element name="consumer" type="policynet:Consumer" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
        </sequence>
      </complexType>
      <complexType name="TimeSchedule">
        <annotation>
          <documentation>Policies are enforced at the defined Frequency during their Validity Window after the StartTime and before the EndTime.  Valid Frequencies are 1, 2, 3, 4, 5, 6, 10, 12, 15, 20, 30, and 60 minutes.  Frequency values of 60 minutes or more must be given in multiples of 60 minutes.  Frequency values of 24 hours or more must be given in multiples of 1440 minutes.  Future releases will support complex time schedules with multiple Validity Windows and irregular periods.</documentation>
        </annotation>
        <sequence>
          <choice>
            <element name="minutes" type="policynet:FrequencyMinutes" minOccurs="1" maxOccurs="1"/>
            <element name="hours" type="policynet:FrequencyHours" minOccurs="1" maxOccurs="1"/>
            <element name="days" type="policynet:FrequencyDays" minOccurs="1" maxOccurs="1"/>
          </choice>
          <element name="startTime" type="policynet:deviceLocalTime" minOccurs="1" maxOccurs="1">
            <annotation>
              <documentation>Time in device local time to Start policy enforcement. Format must be of 2008-10-28T13:36:47</documentation>
            </annotation>
          </element>
          <element name="endTime" type="policynet:deviceLocalTime" minOccurs="0" maxOccurs="1" nillable="true">
            <annotation>
              <documentation>Time in device local time to End policy enforcement. Format must be of 2008-10-28T13:36:47</documentation>
            </annotation>
          </element>
        </sequence>
      </complexType>
      <complexType name="NotifyAction">
        <annotation>
          <documentation>deprecated in 2.6.  It is no longer used or needed.</documentation>
        </annotation>
        <sequence>
          <element name="customerMessage" type="xsd:string" minOccurs="0" maxOccurs="1">
            <annotation>
              <documentation>Optional message to send to customer in HAN policies.</documentation>
            </annotation>
          </element>
          <element name="emailNotificationAddresses" type="xsd:string" minOccurs="0" maxOccurs="1">
            <annotation>
              <documentation>Optional comma-separated list of email addresses to send customer notifications about HAN policies.</documentation>
            </annotation>
          </element>
          <element name="notifyHanDevices" type="xsd:boolean" minOccurs="1" maxOccurs="1">
            <annotation>
              <documentation>Boolean used to send/not send customer notifications about HAN policies to all HAN devices registered with the meter.</documentation>
            </annotation>
          </element>
        </sequence>
      </complexType>
      <complexType name="BasePolicy">
        <sequence>
          <element name="schedule" type="policynet:TimeSchedule" minOccurs="1" maxOccurs="1"/>
        </sequence>
        <attribute name="policyId" type="xsd:positiveInteger" use="optional"/>
        <attribute name="name" type="policynet:Name" use="required">
          <annotation>
            <documentation>Policy name must be unique.  Use getNameList to interrogate existing policy names.</documentation>
          </annotation>
        </attribute>
        <attribute name="description" type="policynet:Description" use="optional"/>
        <attribute name="type" type="policynet:PolicyTaskType" use="required"/>
        <attribute name="reportState" type="policynet:PolicyReportState" use="optional"/>
        <attribute name="deployState" type="policynet:PolicyDeployState" use="optional"/>
        <attribute name="onRequest" type="xsd:boolean" use="optional" default="false">
          <annotation>
            <documentation>Boolean flag used to differentiate On-Request Policies (Run once, Now) which return data synchronously (e.g., createMeterRead) from other One-time Policies (Run once, Future) which return a PolicyId (e.g., createMeterReadSchedule).  PolicyNet supports house-keeping policies that automatically clean-up policies marked as On-Request.</documentation>
          </annotation>
        </attribute>
        <attribute name="reportingWindow" type="xsd:int" use="optional" default="0">
          <annotation>
            <documentation>A value of zero means the device should report immediately after successful enforcement.</documentation>
          </annotation>
        </attribute>
        <attribute name="devicesDeployed" type="xsd:int" use="optional"/>
        <attribute name="devicesReported" type="xsd:int" use="optional"/>
        <attribute name="devicesNotReported" type="xsd:int" use="optional"/>
        <attribute name="percentReported" type="xsd:double" use="optional"/>
        <attribute name="deviceCount" type="xsd:int" use="optional"/>
        <attribute name="approver" type="policynet:UserName" use="optional"/>
        <attribute name="isActive" type="xsd:boolean" use="optional"/>
        <attribute name="createDate" type="xsd:dateTime" use="optional"/>
        <attribute name="creatorId" type="xsd:string" use="optional"/>
        <attribute name="lastModifyDate" type="xsd:dateTime" use="optional"/>
        <attribute name="lastModifierId" type="xsd:string" use="optional"/>
        <attribute name="deploymentMethod" type="policynet:PolicyDeploymentMethod" use="optional">
          <annotation>
            <documentation>Deployment method for the policy.  If not specified, the policy will assume UnicastCops by DEFAULT</documentation>
          </annotation>
        </attribute>
        <attribute name="deployOnNextConnect" type="xsd:boolean" use="optional"/>
        <attribute name="customerId" type="xsd:positiveInteger" use="optional"/>
        <attribute name="customerName" type="xsd:string" use="optional"/>
        <attribute name="systemGenerated" type="xsd:boolean" use="optional"/>
      </complexType>
      <complexType name="Policy">
        <complexContent>
          <extension base="policynet:BasePolicy">
            <sequence>
              <element name="targets" type="policynet:Targets" minOccurs="0" maxOccurs="1" nillable="true"/>
            </sequence>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="oneM2MRequest">
        <complexContent>
          <extension base="policynet:Policy">
            <sequence>
              <element name="eventCategory" type="policynet:CmdhEventCategory" minOccurs="0" maxOccurs="unbounded"/>
            </sequence>
            <attribute name="requestExpirationTimestamp" type="policynet:deviceLocalTime" use="optional"/>
            <attribute name="resultExpirationTimestamp" type="policynet:deviceLocalTime" use="optional"/>
            <attribute name="operationExpirationTime" type="policynet:deviceLocalTime" use="optional"/>
            <attribute name="resultPersistence" type="policynet:deviceLocalTime" use="optional"/>
            <attribute name="deliveryAggregation" type="xsd:boolean" use="optional"/>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="ReportingFrequency">
        <sequence/>
        <attribute name="frequencyMinutes" type="policynet:FrequencyMinutes" use="required"/>
        <attribute name="opportunisticReport" type="xsd:boolean" use="required"/>
      </complexType>
      <complexType name="ReportTrafficShaping">
        <sequence>
          <choice>
            <element name="reportImmediately" type="xsd:boolean" minOccurs="1" maxOccurs="1" default="true"/>
            <element name="reportingFrequency" type="policynet:ReportingFrequency" minOccurs="1" maxOccurs="1" nillable="false"/>
          </choice>
        </sequence>
        <attribute name="reportingWindow" type="xsd:int" use="optional" default="0">
          <annotation>
            <documentation>Report Window (in seconds). At the regular reporting interval, the PEP will delay report transmission for a random number of seconds between 0 and reportingWindow to (approximately) evenly distribute report traffic across the window. Window Value must be less than the Report Frequency.</documentation>
          </annotation>
        </attribute>
      </complexType>
      <complexType name="WaterPolicy">
        <complexContent>
          <extension base="policynet:Policy">
            <sequence/>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="GasPolicy">
        <complexContent>
          <extension base="policynet:Policy">
            <sequence/>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="RegisterReadPolicy">
        <annotation>
          <documentation>Policy for SmartMeter to report Demand or Time-of-Use Register data and to potentially Reset Maximum Demands.</documentation>
        </annotation>
        <complexContent>
          <extension base="policynet:Policy">
            <sequence/>
            <attribute name="summations" type="xsd:boolean" use="required"/>
            <attribute name="demands" type="xsd:boolean" use="required"/>
            <attribute name="resetDemands" type="xsd:boolean" use="required"/>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="BillingCycleDate">
        <sequence/>
        <attribute name="billingCycleId" type="xsd:positiveInteger" use="optional"/>
        <attribute name="dateType" type="policynet:BillingCycleDateType" use="required"/>
        <attribute name="description" type="xsd:string" use="required"/>
        <attribute name="dayOfWeek" type="policynet:DayOfWeek" use="optional"/>
        <attribute name="dayOfMonth" type="policynet:DayOfMonth" use="optional"/>
        <attribute name="specificDate" type="xsd:dateTime" use="optional"/>
      </complexType>
      <complexType name="BillingReadPolicy">
        <annotation>
          <documentation>Policy for SmartMeter to report Demand or Time-of-Use Register data on a specific Billing Cycle schedule</documentation>
        </annotation>
        <complexContent>
          <extension base="policynet:Policy">
            <sequence>
              <element name="dates" type="policynet:BillingCycleDate" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
            </sequence>
            <attribute name="serviceType" type="policynet:ServiceType" use="required"/>
            <attribute name="billingCycleType" type="policynet:BillingCycleType" use="required"/>
            <attribute name="numCycles" type="xsd:positiveInteger" use="optional"/>
            <attribute name="resetDemands" type="xsd:boolean" use="required"/>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="ChannelMask">
        <annotation>
          <documentation>ChannelMask is used to identify particular Load Profile channels to read.</documentation>
        </annotation>
        <sequence>
          <element name="channel" type="policynet:ChannelNumber" minOccurs="1" maxOccurs="20"/>
        </sequence>
      </complexType>
      <complexType name="IntervalDataRange">
        <annotation>
          <documentation>A specific range of Load Profile interval data to request.</documentation>
        </annotation>
        <sequence>
          <element name="startInterval" type="xsd:dateTime" minOccurs="1" maxOccurs="1"/>
          <element name="endInterval" type="xsd:dateTime" minOccurs="1" maxOccurs="1"/>
        </sequence>
      </complexType>
      <complexType name="IntervalReadPolicy">
        <annotation>
          <documentation>Policy for SmartMeter to report Load Profile data. If sinceLastRead is set, PolicyNet will retrieve all intervals since the meter was last read.  If sinceLastRead is not set, a specific range of load profile intervals must be requested.</documentation>
        </annotation>
        <complexContent>
          <extension base="policynet:Policy">
            <sequence>
              <choice>
                <element name="sinceLastRead" type="xsd:boolean" minOccurs="1" maxOccurs="1" default="true"/>
                <element name="intervalDataRange" type="policynet:IntervalDataRange" minOccurs="1" maxOccurs="1" nillable="false"/>
              </choice>
              <element name="channelMask" type="policynet:ChannelMask" minOccurs="1" maxOccurs="1"/>
            </sequence>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="ValidatedIntervalReadPolicy">
        <annotation>
          <documentation>Policy for SmartMeter to report Load Profile interval data, with check validation of interval readings to register reading per read.  PolicyNet will retrieve all intervals since the meter was last read.</documentation>
        </annotation>
        <complexContent>
          <extension base="policynet:Policy">
            <sequence/>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="PowerQualityReadPolicy">
        <annotation>
          <documentation>This policy is deprecated as of 2.7.1 release.  Use the Power Quality Profile policy instead.</documentation>
        </annotation>
        <complexContent>
          <extension base="policynet:Policy">
            <sequence/>
            <attribute name="phaseAVoltage" type="xsd:boolean" use="required"/>
            <attribute name="phaseCVoltage" type="xsd:boolean" use="required"/>
            <attribute name="powerFactor" type="xsd:boolean" use="required"/>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="PowerQualityProfilePolicy">
        <annotation>
          <documentation>Policy for SmartMeter to report a sequence of readings for any of Voltage, current, line-frequency and/or Power Factor.</documentation>
        </annotation>
        <complexContent>
          <extension base="policynet:Policy">
            <sequence/>
            <attribute name="samplingFrequency" type="policynet:SamplingFrequencySeconds" use="optional">
              <annotation>
                <documentation>Sampling frequency is only required for recurring policies.</documentation>
              </annotation>
            </attribute>
            <attribute name="sampleVoltage" type="xsd:boolean" use="required"/>
            <attribute name="sampleCurrent" type="xsd:boolean" use="required"/>
            <attribute name="samplePowerFrequency" type="xsd:boolean" use="required"/>
            <attribute name="samplePowerFactor" type="xsd:boolean" use="required"/>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="VoltageBandMonitoringPolicy">
        <annotation>
          <documentation>Policy for SmartMeter to monitor for voltage band changes.  On a band change, the device will report the band and info.</documentation>
        </annotation>
        <complexContent>
          <extension base="policynet:Policy">
            <sequence/>
            <attribute name="samplingFrequency" type="policynet:SamplingFrequencySeconds" use="optional">
              <annotation>
                <documentation>How often to sample the voltage data to consider for a band change.  If omitted, a default sampling frequency will be chosen by the system.</documentation>
              </annotation>
            </attribute>
            <attribute name="consecutiveSamplingThreshold" type="xsd:positiveInteger" use="required">
              <annotation>
                <documentation>Specifies how many consecutive samples the voltage must be outside the original band (the new band of the last official band change) before it is considered an official band change and therefore will be reported by the device.</documentation>
              </annotation>
            </attribute>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="LossNeutralDetectionPolicy">
        <annotation>
          <documentation>Policy for SmartMeter to monitor for loss of neutral conditions.</documentation>
        </annotation>
        <complexContent>
          <extension base="policynet:Policy">
            <sequence/>
            <attribute name="samplingFrequency" type="policynet:SamplingFrequencySeconds" use="optional">
              <annotation>
                <documentation>How often to sample the current / voltage data</documentation>
              </annotation>
            </attribute>
            <attribute name="currentThreshold" type="xsd:nonNegativeInteger" use="required">
              <annotation>
                <documentation>Specifies the current change (Amps) threshold which will trigger loss of neutral algorithm (determines if true loss of neutral occured by calculating voltage variance DeltaV/DeltaI and comparing to voltage variance threshold) once exceeded.</documentation>
              </annotation>
            </attribute>
            <attribute name="voltageVarianceThreshold" type="xsd:decimal" use="required">
              <annotation>
                <documentation>Specifies the DeltaV/DeltaI threshold which is considered a true loss of neutral and will trigger the specified alarm condition (e.g. alarm, service disconnect) once exceeded.</documentation>
              </annotation>
            </attribute>
            <attribute name="disconnectService" type="xsd:boolean" use="required">
              <annotation>
                <documentation>Specifies whether service should be disconnected if a true loss of neutral is detected.</documentation>
              </annotation>
            </attribute>
            <attribute name="currentThresholdFloat" type="xsd:decimal" use="optional">
              <annotation>
                <documentation>If specified, overrides currentThreshold, with decimal threshold.</documentation>
              </annotation>
            </attribute>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="BrownOutDisconnectOptions">
        <sequence/>
        <attribute name="restorationVoltageThreshold" type="xsd:positiveInteger" use="required">
          <annotation>
            <documentation>Specifies the voltage above which the service can be reconnected.</documentation>
          </annotation>
        </attribute>
        <attribute name="restorationConsecutiveSamplingThreshold" type="xsd:positiveInteger" use="required">
          <annotation>
            <documentation>Specifies how many consecutive samples the voltage must be above the restoration threshold.</documentation>
          </annotation>
        </attribute>
        <attribute name="maxDisconnectReconnectCount" type="xsd:positiveInteger" use="required">
          <annotation>
            <documentation>Specifies how many disconnect/reconnect are allowed for a given period.</documentation>
          </annotation>
        </attribute>
        <attribute name="maxDisconnectReconnectPeriod" type="xsd:positiveInteger" use="required">
          <annotation>
            <documentation>Specifies the period for the number of allowed disconnect/reconnect.</documentation>
          </annotation>
        </attribute>
      </complexType>
      <complexType name="BrownOutDetectionPolicy">
        <annotation>
          <documentation>for SmartMeter to monitor for brownout conditions</documentation>
        </annotation>
        <complexContent>
          <extension base="policynet:Policy">
            <sequence>
              <element name="disconnectService" type="policynet:BrownOutDisconnectOptions" minOccurs="0" maxOccurs="1" nillable="true"/>
            </sequence>
            <attribute name="samplingFrequency" type="policynet:SamplingFrequencySeconds" use="optional"/>
            <attribute name="brownOutVoltageThreshold" type="xsd:positiveInteger" use="required"/>
            <attribute name="brownOutConsecutiveSamplingThreshold" type="xsd:positiveInteger" use="required"/>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="ServiceDegradationDetectionPolicy">
        <annotation>
          <documentation>Policy for Smartmeter service degredation detection</documentation>
        </annotation>
        <complexContent>
          <extension base="policynet:Policy">
            <sequence/>
            <attribute name="samplingFrequency" type="xsd:positiveInteger" use="required">
              <annotation>
                <documentation>The interval in seconds on which to sample the specified data.</documentation>
              </annotation>
            </attribute>
            <attribute name="currentThreshold" type="xsd:float" use="required">
              <annotation>
                <documentation>Specifies the current change (Amps) threshold which will trigger loss of neutral algorithm.</documentation>
              </annotation>
            </attribute>
            <attribute name="voltageCurrentChangeRatioThreshold" type="xsd:float" use="required">
              <annotation>
                <documentation>Specifies the DeltaV/DeltaI threshold which is considered a true loss of neutral and will trigger the specified alarm condition (e.g. alarm, service disconnect) once exceeded.</documentation>
              </annotation>
            </attribute>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="LowVoltageSwitchParams">
        <sequence/>
        <attribute name="RestorationThreshold" type="xsd:float" use="required"/>
        <attribute name="RestorationThresholdConsecutiveSamples" type="xsd:positiveInteger" use="required"/>
        <attribute name="MinimumLoadSwitchDisconnectDuration" type="xsd:positiveInteger" use="required"/>
        <attribute name="MaximumLoadSwitchDisconnectDuration" type="xsd:positiveInteger" use="required"/>
        <attribute name="MaximumLoadSwitchDisconnects" type="xsd:positiveInteger" use="required"/>
      </complexType>
      <complexType name="HighVoltageSwitchParams">
        <sequence/>
        <attribute name="RestorationThreshold" type="xsd:float" use="required"/>
        <attribute name="RestorationThresholdConsecutiveSamples" type="xsd:positiveInteger" use="required"/>
        <attribute name="MinimumLoadSwitchConnectDuration" type="xsd:positiveInteger" use="required"/>
        <attribute name="MaximumLoadSwitchConnectDuration" type="xsd:positiveInteger" use="required"/>
        <attribute name="MaximumLoadSwitchConnects" type="xsd:positiveInteger" use="required"/>
      </complexType>
      <complexType name="VoltageControlPolicy">
        <complexContent>
          <extension base="policynet:Policy">
            <sequence>
              <element name="lowVoltageSwitchParams" type="policynet:LowVoltageSwitchParams" minOccurs="0" maxOccurs="1" nillable="true">
                <annotation>
                  <documentation>Parameters enabled when disconnect load switch enabled.</documentation>
                </annotation>
              </element>
              <element name="highVoltageSwitchParams" type="policynet:HighVoltageSwitchParams" minOccurs="0" maxOccurs="1" nillable="true"/>
            </sequence>
            <attribute name="samplingFrequency" type="xsd:positiveInteger" use="required">
              <annotation>
                <documentation>Specifies the interval in seconds on which to sample the specified data.</documentation>
              </annotation>
            </attribute>
            <attribute name="lowVoltageThreshold" type="xsd:float" use="required"/>
            <attribute name="lowVoltageThresholdConsecutiveSamples" type="xsd:positiveInteger" use="required"/>
            <attribute name="lowVoltageEnableDisconnectLoadSwitch" type="xsd:boolean" use="required">
              <annotation>
                <documentation>If set load switch will be disconnected when a low voltage condition is detected.</documentation>
              </annotation>
            </attribute>
            <attribute name="highVoltageThreshold" type="xsd:float" use="required">
              <annotation>
                <documentation>If voltage exceeds the high voltage threshold an alarm and a load switch connect if highVoltageEnableConnectLoadSwitch is set will be triggered.  Units are in 0.1 V with a range 0.0 to 500.0.</documentation>
              </annotation>
            </attribute>
            <attribute name="highVoltageThresholdConsecutiveSamples" type="xsd:positiveInteger" use="required"/>
            <attribute name="highVoltageEnableConnectLoadSwitch" type="xsd:boolean" use="required">
              <annotation>
                <documentation>If set load switch will be connected when a high voltage condition is detected.</documentation>
              </annotation>
            </attribute>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="OutageStatisticsReadPolicy">
        <annotation>
          <documentation>Policy for SmartMeter to report IEEE Caidi/Maifi/Saifi Outage Statistics.</documentation>
        </annotation>
        <complexContent>
          <extension base="policynet:Policy">
            <sequence/>
            <attribute name="cumOutageTimeSecs" type="xsd:boolean" use="required"/>
            <attribute name="numOutages" type="xsd:boolean" use="required"/>
            <attribute name="dateTimeLastOutage" type="xsd:boolean" use="required"/>
            <attribute name="numSustainedMinutes" type="xsd:boolean" use="required"/>
            <attribute name="numSustainedInterupts" type="xsd:boolean" use="required"/>
            <attribute name="numMomentaryInterupts" type="xsd:boolean" use="required"/>
            <attribute name="numMomentaryEvents" type="xsd:boolean" use="required"/>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="DemandDataStreamPolicy">
        <annotation>
          <documentation>policynet__DemandDataStreamPolicy is deprecated as of policynet 2.6.  Please use policynet_DataStreamPolicy instead.</documentation>
        </annotation>
        <complexContent>
          <extension base="policynet:Policy">
            <sequence/>
            <attribute name="frequencySeconds" type="policynet:FrequencySeconds" use="required">
              <annotation>
                <documentation>Frequency seconds takes precedence over the base policy frequency. Note that the frequency here is specified in seconds whereas the base policy frequency was specified in minutes.</documentation>
              </annotation>
            </attribute>
            <attribute name="reportIntervals" type="xsd:boolean" use="required">
              <annotation>
                <documentation>Optionally report catch-up interval data.</documentation>
              </annotation>
            </attribute>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="DemandResetPolicy">
        <annotation>
          <documentation>Policy</documentation>
        </annotation>
        <complexContent>
          <extension base="policynet:Policy">
            <sequence/>
            <attribute name="reportRegisterSnapshots" type="xsd:boolean" use="required"/>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="RegisterSnapshotReadPolicy">
        <annotation>
          <documentation>Policy for SmartMeter to read snapshots in Std tables</documentation>
        </annotation>
        <complexContent>
          <extension base="policynet:Policy">
            <sequence/>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="DSDemands">
        <sequence>
          <element name="demand" type="policynet:DSDemand" minOccurs="1" maxOccurs="unbounded"/>
        </sequence>
      </complexType>
      <complexType name="DSSummations">
        <sequence>
          <element name="summation" type="policynet:DSSummation" minOccurs="1" maxOccurs="2"/>
        </sequence>
      </complexType>
      <complexType name="DSReading">
        <choice>
          <element name="demands" type="policynet:DSDemands" minOccurs="1" maxOccurs="1" nillable="false"/>
          <element name="summations" type="policynet:DSSummations" minOccurs="1" maxOccurs="1" nillable="false"/>
        </choice>
      </complexType>
      <complexType name="DataStreamPolicy">
        <annotation>
          <documentation>Policy for SmartMeter to report (near) real-time "stream" of data.</documentation>
        </annotation>
        <complexContent>
          <extension base="policynet:Policy">
            <sequence>
              <element name="frequencySeconds" type="policynet:DataStreamFrequencySeconds" minOccurs="1" maxOccurs="1">
                <annotation>
                  <documentation>FrequencySeconds takes precedence over the base policy frequency.</documentation>
                </annotation>
              </element>
              <element name="reportCatchupIntervals" type="xsd:boolean" minOccurs="1" maxOccurs="1"/>
              <element name="readElectricMeter" type="xsd:boolean" minOccurs="1" maxOccurs="1"/>
              <element name="readAllSubmeters" type="xsd:boolean" minOccurs="1" maxOccurs="1"/>
              <element name="readings" type="policynet:DSReading" minOccurs="1" maxOccurs="3" nillable="false"/>
            </sequence>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="MeterEventsPolicy">
        <annotation>
          <documentation>Policy for SmartMeter to monitor and report: //// Service Events:  Low Potential, Demand Overload, Received kWh, Leading kVAh, Voltage Sag, Voltage Swell, Power Up/Down //// Operational Events:  Read/Write Device Access, Test Mode Entry/Exit, Device Programming //// Tamper Events:  (ver.1.2): DC Detection, (Future Releases:) Meter Inversion, Meter Bypass, Unauthorized Removal, Reset Pin Tamper //// Meter Cautions:  Low Battery, Meter Unprogrammed, Loss of Program, Meter Time Changed, Bad Meter Password //// Meter Errors:  Metering Chip Error, Watchdog Timeout, RAM Error, ROM Error, EEPROM Error, Battery Failure</documentation>
        </annotation>
        <complexContent>
          <extension base="policynet:Policy">
            <sequence/>
            <attribute name="configAndControl" type="xsd:boolean" use="required"/>
            <attribute name="health" type="xsd:boolean" use="required"/>
            <attribute name="service" type="xsd:boolean" use="required"/>
            <attribute name="tamper" type="xsd:boolean" use="required"/>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="PCTPolicy">
        <annotation>
          <documentation>Policy is deprecated in 2.6</documentation>
        </annotation>
        <complexContent>
          <extension base="policynet:Policy">
            <sequence>
              <element name="notify" type="policynet:NotifyAction" minOccurs="1" maxOccurs="1"/>
            </sequence>
            <attribute name="fixedSetback" type="xsd:boolean" use="required"/>
            <attribute name="degreeSetback" type="xsd:int" use="optional"/>
            <attribute name="setbackStartTime" type="policynet:deviceLocalTime" use="required"/>
            <attribute name="setbackDuration" type="xsd:positiveInteger" use="required"/>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="SchedulePair">
        <sequence/>
        <attribute name="turnOffTime" type="xsd:time" use="required"/>
        <attribute name="turnOnTime" type="xsd:time" use="required"/>
      </complexType>
      <complexType name="ScheduleSet">
        <sequence/>
        <attribute name="turnOffTime" type="xsd:time" use="required"/>
        <attribute name="turnOnTime" type="xsd:time" use="required"/>
      </complexType>
      <complexType name="ScheduledLoadControlPolicy">
        <annotation>
          <documentation>Policy deprecated in 2.6</documentation>
        </annotation>
        <complexContent>
          <extension base="policynet:Policy">
            <sequence>
              <element name="weekdaySchedule" type="policynet:ScheduleSet" minOccurs="0" maxOccurs="unbounded" nillable="true">
                <annotation>
                  <documentation>Set of load switch turn-off and turn-on times for week days.</documentation>
                </annotation>
              </element>
              <element name="weekendSchedule" type="policynet:ScheduleSet" minOccurs="0" maxOccurs="unbounded" nillable="true">
                <annotation>
                  <documentation>Set of load switch turn-off and turn-on times for weekend days.</documentation>
                </annotation>
              </element>
              <element name="notify" type="policynet:NotifyAction" minOccurs="1" maxOccurs="1"/>
            </sequence>
            <attribute name="spreadOn" type="policynet:SpreadOn" use="required">
              <annotation>
                <documentation>Integer delay before switch is turned on, range = 0-60 mins in 1 min intervals.</documentation>
              </annotation>
            </attribute>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="LoadControlOverridePolicy">
        <annotation>
          <documentation>Policy is deprecated in 2.6</documentation>
        </annotation>
        <complexContent>
          <extension base="policynet:Policy">
            <sequence>
              <element name="notify" type="policynet:NotifyAction" minOccurs="1" maxOccurs="1"/>
            </sequence>
            <attribute name="switchAction" type="policynet:SwitchAction" use="required"/>
            <attribute name="actionStartTime" type="policynet:deviceLocalTime" use="required"/>
            <attribute name="spreadOn" type="policynet:SpreadOn" use="required">
              <annotation>
                <documentation>Integer delay before switch</documentation>
              </annotation>
            </attribute>
            <attribute name="overrideDuration" type="policynet:OverrideDuration" use="required">
              <annotation>
                <documentation>0 to 48 hours, in half hour increments. endTime from caller is ignored. endTime = startTime + overrideDuration.</documentation>
              </annotation>
            </attribute>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="LoadControlBoostPolicy">
        <annotation>
          <documentation>Policy is deprecated in 2.6</documentation>
        </annotation>
        <complexContent>
          <extension base="policynet:Policy">
            <sequence>
              <element name="notify" type="policynet:NotifyAction" minOccurs="1" maxOccurs="1"/>
            </sequence>
            <attribute name="actionStartTime" type="policynet:deviceLocalTime" use="required"/>
            <attribute name="boostDuration" type="policynet:BoostDuration" use="required">
              <annotation>
                <documentation>1 to 6 hours, in half hour increments. endTime from caller is ignored. endTime = startTime + boostDuration.</documentation>
              </annotation>
            </attribute>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="EnergyServiceOffPolicy">
        <annotation>
          <documentation>Policy to send a one-time disconnect to a Service Switch.</documentation>
        </annotation>
        <complexContent>
          <extension base="policynet:Policy">
            <sequence>
              <element name="notify" type="policynet:NotifyAction" minOccurs="1" maxOccurs="1"/>
            </sequence>
            <attribute name="actionStartTime" type="policynet:deviceLocalTime" use="required"/>
            <attribute name="lastRead" type="xsd:boolean" use="optional"/>
            <attribute name="resetDemand" type="xsd:boolean" use="optional"/>
            <attribute name="cycleStartMinutes" type="policynet:CycleStartMinutes" use="optional"/>
            <attribute name="cycleDurationMinutes" type="policynet:CycleDurationMinutes" use="optional"/>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="EnergyServiceOnPolicy">
        <annotation>
          <documentation>Policy to send a one-time reconnect to a Service Switch.</documentation>
        </annotation>
        <complexContent>
          <extension base="policynet:Policy">
            <sequence>
              <element name="notify" type="policynet:NotifyAction" minOccurs="1" maxOccurs="1"/>
            </sequence>
            <attribute name="actionStartTime" type="policynet:deviceLocalTime" use="required"/>
            <attribute name="armSwitchOnly" type="xsd:boolean" use="required">
              <annotation>
                <documentation>Boolean Indicates if the device should arm the mechanism that allows a local action to turn on the energy service. The device will not explicitly turn on the energy service if this attribute is set.</documentation>
              </annotation>
            </attribute>
            <attribute name="enableAutoDisconnect" type="xsd:boolean" use="required">
              <annotation>
                <documentation>Boolean Indicates whether or not the AutoDisconnect logic is enabled.</documentation>
              </annotation>
            </attribute>
            <attribute name="autoDisconnectLoadThreshold" type="policynet:AutoDisconnectLoad" use="optional">
              <annotation>
                <documentation>A load in Watts greater than or equal to autoDisconnectLoadThreshold for greater than or equal to autoDisconnectTimeThreshold seconds will trigger auto-Disconnect.  Load Range is 20 to 2500 Watts in 20 W increments.</documentation>
              </annotation>
            </attribute>
            <attribute name="autoDisconnectTimeThreshold" type="policynet:AutoDisconnectTime" use="optional">
              <annotation>
                <documentation>A load in Watts greater than or equal to autoDisconnectLoadThreshold for greater than or equal to autoDisconnectTimeThreshold minutes will trigger auto-Disconnect.  Time range is 1, 2, 3, 4, 5, 6, 10, 12, 15, 20, 30 or 60 minutes.</documentation>
              </annotation>
            </attribute>
            <attribute name="autoDisconnectDuration" type="policynet:AutoDisconnectDuration" use="optional">
              <annotation>
                <documentation>Indicates the length of time the auto disconnect functionality should be enabled. The service is turned back on after the autoDisconnectDuration expires. Range = 1-60 minutes in 1 minute increments.</documentation>
              </annotation>
            </attribute>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="NormalSupplyCapacityPolicy">
        <annotation>
          <documentation>Policy is deprecated in 2.6</documentation>
        </annotation>
        <complexContent>
          <extension base="policynet:Policy">
            <sequence>
              <element name="notify" type="policynet:NotifyAction" minOccurs="1" maxOccurs="1"/>
            </sequence>
            <attribute name="exportIntervals" type="policynet:SupplyCapacityInterval" use="required">
              <annotation>
                <documentation>X = 30-min periods to measure average demand across. Range is 1 to 10 thirty-minute intervals.</documentation>
              </annotation>
            </attribute>
            <attribute name="exportDemandLimit" type="policynet:DemandLimit" use="required">
              <annotation>
                <documentation>Y = demand limit for exported energy.  Range is 0.5 to 99 kilowatts, in 0.5 kilowatt increments</documentation>
              </annotation>
            </attribute>
            <attribute name="exportDisconnectDuration" type="policynet:DisconnectDuration" use="required">
              <annotation>
                <documentation>time in minutes to keep the switch open before auto-reclose.  Range is 1 to 60 minutes.</documentation>
              </annotation>
            </attribute>
            <attribute name="importIntervals" type="policynet:SupplyCapacityInterval" use="required">
              <annotation>
                <documentation>U = 30-min periods to measure average demand across. Range is 1 to 10 thirty-minute intervals.</documentation>
              </annotation>
            </attribute>
            <attribute name="importDemandLimit" type="policynet:DemandLimit" use="required">
              <annotation>
                <documentation>V = demand limit for imported energy.  Range is 0.5 to 99 kilowatts, in 0.5 kilowatt increments</documentation>
              </annotation>
            </attribute>
            <attribute name="importDisconnectDuration" type="policynet:DisconnectDuration" use="required">
              <annotation>
                <documentation>time in minutes to keep the switch open before auto-reclose.  Range is 1 to 60 minutes.</documentation>
              </annotation>
            </attribute>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="EmergencySupplyCapacityPolicy">
        <annotation>
          <documentation>Policy is deprecated in 2.6</documentation>
        </annotation>
        <complexContent>
          <extension base="policynet:Policy">
            <sequence>
              <element name="notify" type="policynet:NotifyAction" minOccurs="1" maxOccurs="1"/>
            </sequence>
            <attribute name="demandLimit" type="policynet:DemandLimit" use="required"/>
            <attribute name="numIntervals" type="policynet:EmergencyInterval" use="required"/>
            <attribute name="disconnectDuration" type="policynet:DisconnectDuration" use="required"/>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="ClockSynchronizationPolicy">
        <complexContent>
          <extension base="policynet:Policy">
            <sequence/>
            <attribute name="minimumClockDrift" type="policynet:ClockDrift" use="optional">
              <annotation>
                <documentation>Minimum meter clock drift in seconds (output only, derived from system settings on policy creation).  Rage is 1 to 86400 seconds (1 day)</documentation>
              </annotation>
            </attribute>
            <attribute name="maximumClockDrift" type="policynet:ClockDrift" use="optional">
              <annotation>
                <documentation>Maximum meter clock drift in seconds.  Rage is 1 to 86400 seconds (1 day)</documentation>
              </annotation>
            </attribute>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="ClockSetPolicy">
        <complexContent>
          <extension base="policynet:Policy">
            <sequence/>
            <attribute name="resetAllOutOfBoundsClocks" type="xsd:boolean" use="required">
              <annotation>
                <documentation>If false, targets list must not be empty.  If true, targets list will be ignored since all out of bounds clocks will be reset.</documentation>
              </annotation>
            </attribute>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="PanDeviceIdentificationPolicy">
        <complexContent>
          <extension base="policynet:Policy">
            <sequence/>
            <attribute name="identifyTime" type="xsd:positiveInteger" use="required"/>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="PanDredControlPolicy">
        <complexContent>
          <extension base="policynet:Policy">
            <sequence/>
            <attribute name="eventDuration" type="policynet:DredControlEventDuration" use="required"/>
            <attribute name="eventPeriod" type="xsd:positiveInteger" use="required"/>
            <attribute name="eventIssuerId" type="xsd:positiveInteger" use="required"/>
            <attribute name="dutyCycleOffPercentOverride" type="policynet:percentValue" use="optional">
              <annotation>
                <documentation>IMPORTANT:  The attribute name dutyCycleOffPercentOverride is a misnomer and should be dutyCyclePercentOverride i.e. the attribute specifies the percentage of time for the duty cycle.  So a value of 60 means a 60% duty cycle, therefore the DRED would be active (power is ON) 60% of the time and OFF 40% of the time.</documentation>
              </annotation>
            </attribute>
            <attribute name="criticalityLevel" type="policynet:CriticalityLevel" use="optional"/>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="PanRelayControlPolicy">
        <complexContent>
          <extension base="policynet:Policy">
            <sequence/>
            <attribute name="actionStartTime" type="policynet:deviceLocalTime" use="required"/>
            <attribute name="relayAction" type="policynet:SwitchAction" use="required"/>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="PanTextMessagePolicy">
        <complexContent>
          <extension base="policynet:Policy">
            <sequence>
              <choice>
                <element name="displayDurationMinutes" type="policynet:PanTextMessageDurationMinutes" minOccurs="1" maxOccurs="1" default="1"/>
                <element name="untilUserConfirmation" type="xsd:boolean" minOccurs="1" maxOccurs="1" default="false"/>
                <element name="untilChanged" type="xsd:boolean" minOccurs="1" maxOccurs="1" default="false"/>
              </choice>
            </sequence>
            <attribute name="message" type="policynet:PanTextMessage" use="required"/>
            <attribute name="actionStartTime" type="policynet:deviceLocalTime" use="required"/>
            <attribute name="issuerEventId" type="xsd:positiveInteger" use="optional"/>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="DirectLoadControlPolicy">
        <complexContent>
          <extension base="policynet:Policy">
            <sequence>
              <element name="weekdaySchedule" type="policynet:SchedulePair" minOccurs="1" maxOccurs="5" nillable="false"/>
              <element name="weekendSchedule" type="policynet:SchedulePair" minOccurs="1" maxOccurs="5" nillable="false"/>
            </sequence>
            <attribute name="spreadOn" type="policynet:SpreadValue" use="required"/>
            <attribute name="spreadOff" type="policynet:SpreadValue" use="required"/>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="DirectLoadControlOverridePolicy">
        <complexContent>
          <extension base="policynet:Policy">
            <sequence/>
            <attribute name="switchAction" type="policynet:SwitchAction" use="required"/>
            <attribute name="overrideDuration" type="policynet:DirectLoadControlOverrideDuration" use="required"/>
            <attribute name="spreadOn" type="policynet:SpreadValue" use="required"/>
            <attribute name="spreadOff" type="policynet:SpreadValue" use="required"/>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="ActivateSupplyCapacityLimitingPolicy">
        <complexContent>
          <extension base="policynet:Policy">
            <sequence/>
            <attribute name="activateMode" type="policynet:SupplyCapacityLimitingMode" use="required"/>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="PanPricingTierDataEntry">
        <sequence/>
        <attribute name="tierId" type="policynet:TierNumber" use="required">
          <annotation>
            <documentation>IF meter pricing mode is NonToU, MUST be set to 0</documentation>
          </annotation>
        </attribute>
        <attribute name="label" type="policynet:PanPricingInformationString" use="required"/>
        <attribute name="price" type="policynet:positiveRealNumberString" use="required">
          <annotation>
            <documentation>Price of this tier in cents or sub-currency</documentation>
          </annotation>
        </attribute>
        <attribute name="generationPrice" type="policynet:positiveRealNumberString" use="optional">
          <annotation>
            <documentation>Generation Price of this tier in cents or sub-currency</documentation>
          </annotation>
        </attribute>
        <attribute name="alternateCostDelivered" type="policynet:positiveRealNumberString" use="optional">
          <annotation>
            <documentation>Cost of the energy consumed in units of Kg of CO2 per unit of measure.</documentation>
          </annotation>
        </attribute>
      </complexType>
      <complexType name="PanPricingTierDataEntrySet">
        <sequence>
          <element name="tierDataEntry" type="policynet:PanPricingTierDataEntry" minOccurs="1" maxOccurs="6" nillable="false"/>
        </sequence>
        <attribute name="dayType" type="policynet:ProgramScheduleDayType" use="required">
          <annotation>
            <documentation>If meter pricing mode is NonToU, MUST be set to "everyDay".  If ToU mode, only "weekdays" dayType supported currently.</documentation>
          </annotation>
        </attribute>
      </complexType>
      <complexType name="PanPricingInformationPolicy">
        <annotation>
          <documentation>RULES:  pricingMode SHOULD be specified, or will be assumed to be "ToU" mode by default.  If "NonToU" mode, then 1. meterProgramId must be set to "N/A" . 2.  Only 1 tier in tierDataEntrySet allowed 3. tierId of the only tier in tierDataEntrySet MUST be 0  4.  dayType in tierDataEntrySet MUST be "everyDay"</documentation>
        </annotation>
        <complexContent>
          <extension base="policynet:Policy">
            <sequence>
              <element name="tierDataEntrySet" type="policynet:PanPricingTierDataEntrySet" minOccurs="1" maxOccurs="unbounded" nillable="false"/>
            </sequence>
            <attribute name="providerIdentifier" type="xsd:positiveInteger" use="required"/>
            <attribute name="ratePlan" type="policynet:PanPricingInformationString" use="required"/>
            <attribute name="eventIssuerId" type="xsd:positiveInteger" use="required"/>
            <attribute name="unit" type="policynet:UnitOfMeasure" use="required"/>
            <attribute name="currencyFormat" type="policynet:Currency" use="required"/>
            <attribute name="meterProgramId" type="xsd:string" use="required">
              <annotation>
                <documentation>If meter pricing mode is NonToU, MUST be set to the string "N/A" since meter program(s) will be implied by targets selection</documentation>
              </annotation>
            </attribute>
            <attribute name="pricingMode" type="policynet:MeterPricingMode" use="optional"/>
            <attribute name="normalPrice" type="policynet:positiveRealNumberString" use="optional"/>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="PanNetworkChannels">
        <sequence>
          <element name="channel" type="policynet:PanChannelNumber" minOccurs="1" maxOccurs="7"/>
        </sequence>
      </complexType>
      <complexType name="PanNetworkProvisioningPolicyCommissionSettings">
        <choice>
          <element name="specificChannels" type="policynet:PanNetworkChannels" minOccurs="1" maxOccurs="1" nillable="false"/>
          <element name="useFrequencyAgility" type="xsd:boolean" minOccurs="1" maxOccurs="1"/>
        </choice>
      </complexType>
      <complexType name="PanNetworkProvisioningPolicy">
        <complexContent>
          <extension base="policynet:Policy">
            <sequence>
              <element name="commissionSettings" type="policynet:PanNetworkProvisioningPolicyCommissionSettings" minOccurs="0" maxOccurs="1" nillable="true">
                <annotation>
                  <documentation>If action = provision then commissionSettings MUST be specified.</documentation>
                </annotation>
              </element>
            </sequence>
            <attribute name="action" type="policynet:PanProvisioningAction" use="required"/>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="PanDeviceProvisioningPolicy">
        <complexContent>
          <extension base="policynet:Policy">
            <sequence>
              <element name="eui" type="policynet:PanEui" minOccurs="1" maxOccurs="unbounded"/>
            </sequence>
            <attribute name="action" type="policynet:PanProvisioningAction" use="required"/>
            <attribute name="identifyTime" type="xsd:positiveInteger" use="required"/>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="PanLabelInfo">
        <sequence/>
        <attribute name="labelId" type="xsd:positiveInteger" use="required"/>
        <attribute name="labelName" type="policynet:PanLabel" use="required"/>
      </complexType>
      <complexType name="DemandResponseTier">
        <sequence/>
        <attribute name="tierId" type="policynet:TierNumber" use="required"/>
        <attribute name="price" type="xsd:positiveInteger" use="required"/>
        <attribute name="scaleFactor" type="policynet:ScaleFactor" use="required"/>
        <attribute name="duration" type="xsd:positiveInteger" use="required"/>
      </complexType>
      <complexType name="DemandResponseTiers">
        <sequence>
          <element name="tier" type="policynet:DemandResponseTier" minOccurs="1" maxOccurs="255"/>
        </sequence>
      </complexType>
      <complexType name="CPPPolicy">
        <annotation>
          <documentation>Policy is deprecated in 2.6</documentation>
        </annotation>
        <complexContent>
          <extension base="policynet:Policy">
            <sequence>
              <element name="tiers" type="policynet:DemandResponseTiers" minOccurs="1" maxOccurs="1"/>
              <element name="notify" type="policynet:NotifyAction" minOccurs="1" maxOccurs="1"/>
            </sequence>
            <attribute name="priceStartTime" type="policynet:deviceLocalTime" use="required">
              <annotation>
                <documentation>Timestamp indicating the start of the Critical Peak Pricing period.</documentation>
              </annotation>
            </attribute>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="FirmwareUpgradePolicy">
        <annotation>
          <documentation>Policy to remotely upgrade Device Firmware.</documentation>
        </annotation>
        <complexContent>
          <extension base="policynet:Policy">
            <sequence/>
            <attribute name="packageId" type="xsd:int" use="required"/>
            <attribute name="retryNumber" type="policynet:RetryNumber" use="required"/>
            <attribute name="firmwareDownloadWindow" type="policynet:FirmwareDownloadWindow" use="optional"/>
            <attribute name="fixedDownloadWindow" type="xsd:positiveInteger" use="optional"/>
            <attribute name="avgDownloadTime" type="xsd:positiveInteger" use="optional"/>
            <attribute name="enforceOffPeakHours" type="xsd:boolean" use="optional" default="false"/>
            <attribute name="downloadUrl" type="xsd:string" use="optional"/>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="DemandReadPolicy">
        <annotation>
          <documentation>Policy for SmartMeter to report Demand</documentation>
        </annotation>
        <complexContent>
          <extension base="policynet:Policy">
            <sequence/>
            <attribute name="samplingFrequency" type="policynet:SamplingFrequencySeconds" use="optional"/>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="SoftwareUpdatePolicy">
        <complexContent>
          <extension base="policynet:Policy">
            <sequence/>
            <attribute name="packageId" type="xsd:int" use="required"/>
            <attribute name="active" type="xsd:boolean" use="required"/>
            <attribute name="packageName" type="xsd:string" use="optional"/>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="meterProgramChannel">
        <sequence/>
        <attribute name="channelNum" type="xsd:int" use="required"/>
        <attribute name="channelSource" type="xsd:int" use="required"/>
        <attribute name="channelUom" type="xsd:int" use="required"/>
        <attribute name="channelTimebase" type="xsd:int" use="required"/>
        <attribute name="channelMinMax" type="xsd:int" use="required"/>
        <attribute name="channelMultiplier" type="xsd:int" use="required"/>
        <attribute name="channelMeasurement" type="xsd:string" use="required"/>
        <attribute name="lpSetNum" type="xsd:int" use="optional"/>
      </complexType>
      <complexType name="meterProgramTierDetail">
        <sequence/>
        <attribute name="switchTime" type="xsd:time" use="required"/>
        <attribute name="tierId" type="xsd:int" use="required"/>
      </complexType>
      <complexType name="meterProgramTierSchedule">
        <annotation>
          <documentation>This represents the tier schedule. Only supports LG meter programs currently.</documentation>
        </annotation>
        <sequence>
          <element name="tierDetails" type="policynet:meterProgramTierDetail" minOccurs="1" maxOccurs="unbounded" nillable="false"/>
        </sequence>
        <attribute name="dayType" type="policynet:ProgramScheduleDayType" use="required"/>
        <attribute name="seasonId" type="xsd:int" use="optional"/>
      </complexType>
      <complexType name="meterProgramCalendar">
        <sequence/>
        <attribute name="action" type="policynet:meterProgramCalendarAction" use="required"/>
        <attribute name="month" type="xsd:int" use="required"/>
        <attribute name="day" type="xsd:int" use="required"/>
        <attribute name="weekday" type="xsd:int" use="required"/>
        <attribute name="offset" type="xsd:int" use="required"/>
        <attribute name="isRecurring" type="xsd:boolean" use="required"/>
        <attribute name="selfRead" type="xsd:boolean" use="required"/>
        <attribute name="demandReset" type="xsd:boolean" use="required"/>
      </complexType>
      <complexType name="meterProgramLoadControl">
        <sequence/>
        <attribute name="durationSupported" type="xsd:boolean" use="required"/>
        <attribute name="randomizationSupported" type="xsd:boolean" use="required"/>
        <attribute name="manualOverrideSupported" type="xsd:boolean" use="required"/>
        <attribute name="manualTurnOnSupported" type="xsd:boolean" use="required"/>
        <attribute name="stateVerificationSupported" type="xsd:boolean" use="required"/>
        <attribute name="anchorDataSupported" type="xsd:boolean" use="required"/>
        <attribute name="sourceConditionSupported" type="xsd:boolean" use="required"/>
        <attribute name="tierConditionSupported" type="xsd:boolean" use="required"/>
        <attribute name="timeConditionSupported" type="xsd:boolean" use="required"/>
        <attribute name="nbrOfControlPoints" type="xsd:int" use="required"/>
        <attribute name="nbrRecurringDates" type="xsd:int" use="required"/>
        <attribute name="nbrNonrecurringDates" type="xsd:int" use="required"/>
        <attribute name="nbrEvents" type="xsd:int" use="required"/>
        <attribute name="nbrOfWeeklySchedules" type="xsd:int" use="required"/>
        <attribute name="nbrOfConditions" type="xsd:int" use="required"/>
        <attribute name="nbrOfConsumptions" type="xsd:int" use="required"/>
        <attribute name="sclMode" type="policynet:SupplyCapacityLimitingMode" use="optional"/>
        <attribute name="slmConditionLen" type="xsd:int" use="required"/>
        <attribute name="slmEquationLen" type="xsd:int" use="required"/>
        <attribute name="normalImportDemandLimit" type="xsd:decimal" use="optional"/>
        <attribute name="normalImportDemandDuration" type="xsd:int" use="optional"/>
        <attribute name="normalExportDemandLimit" type="xsd:decimal" use="optional"/>
        <attribute name="normalExportDemandDuration" type="xsd:int" use="optional"/>
        <attribute name="normalRecloseDelay" type="xsd:int" use="optional"/>
        <attribute name="emergencyDemandLimit" type="xsd:decimal" use="optional"/>
        <attribute name="emergencyDemandDuration" type="xsd:int" use="optional"/>
        <attribute name="emergencyRecloseDelay" type="xsd:int" use="optional"/>
      </complexType>
      <complexType name="meterProgramLoadControlStatus">
        <sequence/>
        <attribute name="statusName" type="xsd:string" use="required"/>
        <attribute name="requestedLevel" type="xsd:boolean" use="required"/>
        <attribute name="outputLevel" type="xsd:boolean" use="required"/>
        <attribute name="sensedLevel" type="xsd:boolean" use="required"/>
        <attribute name="levelSupported" type="xsd:boolean" use="required"/>
        <attribute name="manuallyOverridden" type="xsd:boolean" use="required"/>
        <attribute name="waitingTurOn" type="xsd:boolean" use="required"/>
        <attribute name="durationCountDown" type="xsd:string" use="required"/>
        <attribute name="randomizationCountDown" type="xsd:string" use="required"/>
      </complexType>
      <complexType name="meterProgramLoadControlConfiguration">
        <sequence/>
        <attribute name="statusName" type="xsd:string" use="required"/>
        <attribute name="minimumOnTime" type="xsd:string" use="required"/>
        <attribute name="minimumOffTime" type="xsd:string" use="required"/>
        <attribute name="manualOverride" type="xsd:boolean" use="required"/>
        <attribute name="manualTurnOn" type="xsd:boolean" use="required"/>
        <attribute name="directControlEnable" type="xsd:boolean" use="required"/>
      </complexType>
      <complexType name="meterProgramTier">
        <annotation>
          <documentation>DEPRECATED This represents the tier schedule. This structure will be DEPRECATED in a future release.</documentation>
        </annotation>
        <sequence/>
        <attribute name="tierId" type="xsd:int" use="required"/>
        <attribute name="switchTime" type="xsd:string" use="required"/>
        <attribute name="scheduleId" type="xsd:int" use="required"/>
      </complexType>
      <complexType name="meterProgramLoadControlSchedule">
        <annotation>
          <documentation>DEPRECATED This represents the load control schedules for GE meter programs.  Structure will be DEPRECATED in a future release.</documentation>
        </annotation>
        <sequence/>
        <attribute name="sunday" type="xsd:boolean" use="required"/>
        <attribute name="monday" type="xsd:boolean" use="required"/>
        <attribute name="tuesday" type="xsd:boolean" use="required"/>
        <attribute name="wednesday" type="xsd:boolean" use="required"/>
        <attribute name="thursday" type="xsd:boolean" use="required"/>
        <attribute name="friday" type="xsd:boolean" use="required"/>
        <attribute name="saturday" type="xsd:boolean" use="required"/>
        <attribute name="lcTime" type="xsd:string" use="required"/>
        <attribute name="switchStatus" type="xsd:boolean" use="required"/>
        <attribute name="switchName" type="policynet:SwitchName" use="required"/>
        <attribute name="durationTime" type="xsd:string" use="required"/>
        <attribute name="randomizationTime" type="xsd:string" use="required"/>
      </complexType>
      <complexType name="meterProgramLoadControlScheduleSet">
        <sequence>
          <element name="dayType" type="policynet:ProgramScheduleDayType" minOccurs="1" maxOccurs="unbounded"/>
        </sequence>
        <attribute name="lcTime" type="xsd:string" use="required"/>
        <attribute name="switchStatus" type="xsd:boolean" use="required"/>
      </complexType>
      <complexType name="meterProgramLoadControlScheduleSetLG">
        <sequence>
          <element name="scheduleSet" type="policynet:meterProgramLoadControlScheduleSet" minOccurs="1" maxOccurs="unbounded" nillable="false"/>
        </sequence>
        <attribute name="randomDelayOnMinutes" type="xsd:positiveInteger" use="required"/>
        <attribute name="randomDelayOffMinutes" type="xsd:positiveInteger" use="required"/>
        <attribute name="overridePeriodMinutes" type="xsd:positiveInteger" use="required"/>
        <attribute name="enableBoostPrimacy" type="xsd:boolean" use="required"/>
        <attribute name="boostDurationMinutes" type="xsd:positiveInteger" use="required"/>
      </complexType>
      <complexType name="rippleTelegram">
        <sequence>
          <element name="telegramName" type="xsd:string" minOccurs="1" maxOccurs="1"/>
          <element name="telegramAction" type="xsd:string" minOccurs="1" maxOccurs="1"/>
          <element name="retrigger" type="xsd:boolean" minOccurs="1" maxOccurs="1"/>
        </sequence>
      </complexType>
      <complexType name="rippleConfiguration">
        <sequence>
          <element name="numberOfTelegrams" type="xsd:positiveInteger" minOccurs="1" maxOccurs="1"/>
          <element name="rippleTelegram" type="policynet:rippleTelegram" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
        </sequence>
      </complexType>
      <complexType name="meterProgramInfo">
        <annotation>
          <documentation>NOTE: (LG) tierSchedule: Each tierSchedule element will have a unique dayType and seasonId combo so tier schedules with both same dayType and seasonId will be combined into one tierSchedule element.  (LG) loadControlScheduleLG : Each scheduleSet can only contain one type of dayType.  If two dayTypes have the same lcTime and switchStatus, two scheduleSet will be present, one for each dayType.</documentation>
        </annotation>
        <sequence>
          <element name="summation" type="policynet:meterProgramChannel" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          <element name="demand" type="policynet:meterProgramChannel" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          <element name="lp" type="policynet:meterProgramChannel" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          <element name="coincident" type="policynet:meterProgramChannel" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          <choice>
            <element name="tier" type="policynet:meterProgramTier" minOccurs="0" maxOccurs="unbounded"/>
            <element name="tierSchedule" type="policynet:meterProgramTierSchedule" minOccurs="1" maxOccurs="unbounded"/>
          </choice>
          <element name="calendar" type="policynet:meterProgramCalendar" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          <element name="loadControl" type="policynet:meterProgramLoadControl" minOccurs="1" maxOccurs="1"/>
          <element name="loadControlStatus" type="policynet:meterProgramLoadControlStatus" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          <choice>
            <element name="loadControlSchedule" type="policynet:meterProgramLoadControlSchedule" minOccurs="0" maxOccurs="unbounded"/>
            <element name="loadControlScheduleLG" type="policynet:meterProgramLoadControlScheduleSetLG" minOccurs="1" maxOccurs="unbounded"/>
          </choice>
          <element name="loadControlConfiguration" type="policynet:meterProgramLoadControlConfiguration" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          <element name="rippleConfiguration" type="policynet:rippleConfiguration" minOccurs="0" maxOccurs="1" nillable="true"/>
        </sequence>
        <attribute name="meterProgramId" type="xsd:string" use="required"/>
        <attribute name="isActive" type="xsd:int" use="required"/>
        <attribute name="programName" type="policynet:Name" use="required"/>
        <attribute name="programDate" type="xsd:dateTime" use="required"/>
        <attribute name="deviceType" type="xsd:string" use="required"/>
        <attribute name="deviceManufacturer" type="xsd:string" use="required"/>
        <attribute name="serialNumber" type="xsd:string" use="optional"/>
        <attribute name="owner" type="xsd:string" use="optional"/>
        <attribute name="customerId" type="xsd:string" use="optional"/>
        <attribute name="utilityDivision" type="xsd:string" use="optional"/>
        <attribute name="electricAddress" type="xsd:string" use="optional"/>
        <attribute name="servicePointId" type="policynet:ServicePointId" use="optional"/>
        <attribute name="XCoordinate" type="xsd:string" use="optional"/>
        <attribute name="YCoordinate" type="xsd:string" use="optional"/>
        <attribute name="ZCoordinate" type="xsd:string" use="optional"/>
        <attribute name="meterReaderId" type="xsd:string" use="optional"/>
        <attribute name="swVendor1" type="xsd:string" use="optional"/>
        <attribute name="swVersion1" type="xsd:int" use="required"/>
        <attribute name="swRevision1" type="xsd:int" use="required"/>
        <attribute name="swVendor2" type="xsd:string" use="optional"/>
        <attribute name="swVersion2" type="xsd:int" use="required"/>
        <attribute name="swRevision2" type="xsd:int" use="required"/>
        <attribute name="timeZoneOffset" type="xsd:int" use="required"/>
        <attribute name="dstHour" type="xsd:positiveInteger" use="optional"/>
        <attribute name="dstAdjustmentMinutes" type="xsd:positiveInteger" use="optional"/>
        <attribute name="meterMode" type="xsd:int" use="required"/>
        <attribute name="programComment" type="xsd:string" use="optional"/>
        <attribute name="uploadDate" type="xsd:dateTime" use="required"/>
        <attribute name="creatorName" type="xsd:string" use="required"/>
        <attribute name="createDate" type="xsd:dateTime" use="required"/>
        <attribute name="numSummationChannels" type="xsd:int" use="required"/>
        <attribute name="numDemandChannels" type="xsd:int" use="required"/>
        <attribute name="demandInterval" type="xsd:int" use="required"/>
        <attribute name="numLpChannels" type="xsd:int" use="required"/>
        <attribute name="lpInterval" type="xsd:int" use="required"/>
        <attribute name="lpBlocks" type="xsd:int" use="required"/>
        <attribute name="numLpChannels2" type="xsd:int" use="required"/>
        <attribute name="lpInterval2" type="xsd:int" use="required"/>
        <attribute name="lpBlocks2" type="xsd:int" use="required"/>
        <attribute name="numLpChannels3" type="xsd:int" use="required"/>
        <attribute name="lpInterval3" type="xsd:int" use="required"/>
        <attribute name="lpBlocks3" type="xsd:int" use="required"/>
        <attribute name="numLpChannels4" type="xsd:int" use="required"/>
        <attribute name="lpInterval4" type="xsd:int" use="required"/>
        <attribute name="lpBlocks4" type="xsd:int" use="required"/>
        <attribute name="lpIntervalFormat" type="xsd:int" use="required"/>
        <attribute name="lpIntervalsPerBlock" type="xsd:int" use="required"/>
        <attribute name="programSize" type="xsd:int" use="required"/>
        <attribute name="deviceCount" type="xsd:unsignedInt" use="required"/>
        <attribute name="hash-sha1" type="xsd:string" use="required"/>
        <attribute name="ripple" type="xsd:boolean" use="optional"/>
        <attribute name="customerName" type="xsd:string" use="optional"/>
        <attribute name="sequenceNumber" type="xsd:positiveInteger" use="optional"/>
      </complexType>
      <complexType name="MeterProgramSearchFilter">
        <sequence>
          <element name="meterProgramId" type="xsd:string" minOccurs="0" maxOccurs="unbounded"/>
        </sequence>
        <attribute name="activeState" type="xsd:boolean" use="optional"/>
        <attribute name="ripple" type="xsd:boolean" use="optional"/>
        <attribute name="utilitySerialNumber" type="policynet:UtilitySerialNumber" use="optional"/>
        <attribute name="customerId" type="xsd:positiveInteger" use="optional"/>
        <attribute name="meterType" type="xsd:string" use="optional"/>
        <attribute name="firstRow" type="xsd:int" use="required"/>
        <attribute name="lastRow" type="xsd:int" use="required"/>
      </complexType>
      <complexType name="MeterProgramUpdateFilter">
        <sequence/>
        <attribute name="meterProgramId" type="xsd:string" use="required"/>
        <attribute name="active" type="xsd:boolean" use="required"/>
        <attribute name="customerId" type="xsd:positiveInteger" use="optional"/>
      </complexType>
      <complexType name="MeterProgramDeleteFilter">
        <sequence/>
        <attribute name="meterProgramId" type="xsd:string" use="required"/>
        <attribute name="customerId" type="xsd:positiveInteger" use="optional"/>
      </complexType>
      <complexType name="MeterProgramPolicy">
        <annotation>
          <documentation>Policy to remotely upgrade a Meter Rate Program.</documentation>
        </annotation>
        <complexContent>
          <extension base="policynet:Policy">
            <sequence/>
            <attribute name="meterProgramId" type="xsd:string" use="required"/>
            <attribute name="clearRegisters" type="xsd:boolean" use="optional"/>
            <attribute name="ripple" type="xsd:boolean" use="optional"/>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="QosAttribute">
        <sequence/>
        <attribute name="dictionaryName" type="xsd:string" use="required"/>
        <attribute name="name" type="xsd:string" use="required"/>
        <attribute name="operator" type="policynet:QosAttributeOp" use="optional" default="Set"/>
        <attribute name="value" type="xsd:string" use="required"/>
        <attribute name="valueName" type="xsd:string" use="optional"/>
      </complexType>
      <complexType name="QosProfile">
        <sequence>
          <element name="attribute" type="policynet:QosAttribute" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
        </sequence>
        <attribute name="profileId" type="xsd:positiveInteger" use="optional"/>
        <attribute name="profileName" type="xsd:string" use="required"/>
        <attribute name="description" type="xsd:string" use="optional"/>
        <attribute name="createDate" type="xsd:dateTime" use="optional"/>
        <attribute name="creatorName" type="xsd:string" use="optional"/>
        <attribute name="deviceCount" type="xsd:positiveInteger" use="optional"/>
        <attribute name="customerId" type="xsd:positiveInteger" use="optional"/>
        <attribute name="customerName" type="xsd:string" use="optional"/>
      </complexType>
      <complexType name="QosProfileSearchFilter">
        <sequence>
          <element name="profileId" type="xsd:positiveInteger" minOccurs="0" maxOccurs="unbounded"/>
        </sequence>
        <attribute name="firstRow" type="xsd:int" use="required"/>
        <attribute name="lastRow" type="xsd:int" use="required"/>
      </complexType>
      <complexType name="RadiusDictionaryValueEnumeration">
        <sequence/>
        <attribute name="key" type="xsd:string" use="required"/>
        <attribute name="value" type="xsd:string" use="required"/>
      </complexType>
      <complexType name="RadiusDictionaryAllowedValues">
        <sequence>
          <element name="enumeration" type="policynet:RadiusDictionaryValueEnumeration" minOccurs="1" maxOccurs="unbounded" nillable="false"/>
        </sequence>
      </complexType>
      <complexType name="RadiusDictionaryValuePattern">
        <sequence/>
        <attribute name="pattern" type="xsd:string" use="required"/>
        <attribute name="radiusTypeName" type="xsd:string" use="required"/>
      </complexType>
      <complexType name="RadiusDictionaryAttribute">
        <sequence>
          <choice>
            <element name="allowedValues" type="policynet:RadiusDictionaryAllowedValues" minOccurs="1" maxOccurs="1" nillable="false"/>
            <element name="pattern" type="policynet:RadiusDictionaryValuePattern" minOccurs="1" maxOccurs="1" nillable="false"/>
          </choice>
        </sequence>
        <attribute name="name" type="xsd:string" use="required"/>
      </complexType>
      <complexType name="RadiusDictionary">
        <sequence>
          <element name="attribute" type="policynet:RadiusDictionaryAttribute" minOccurs="1" maxOccurs="unbounded" nillable="false"/>
        </sequence>
        <attribute name="dictionaryName" type="xsd:string" use="required"/>
      </complexType>
      <complexType name="FirmwarePackage">
        <sequence>
          <element name="eligiblePlatform" type="xsd:string" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
        </sequence>
        <attribute name="packageId" type="xsd:positiveInteger" use="required"/>
        <attribute name="packageName" type="policynet:Name" use="required"/>
        <attribute name="packageDesc" type="xsd:string" use="required"/>
        <attribute name="creatorUserId" type="xsd:string" use="required"/>
        <attribute name="creatorName" type="xsd:string" use="required"/>
        <attribute name="createDate" type="xsd:dateTime" use="required"/>
        <attribute name="firmwareVersion" type="xsd:string" use="required"/>
        <attribute name="releaseDate" type="xsd:dateTime" use="required"/>
        <attribute name="isActive" type="xsd:boolean" use="required"/>
        <attribute name="deviceType" type="policynet:DeviceType" use="required"/>
        <attribute name="softwareType" type="policynet:SoftwareType" use="required"/>
        <attribute name="deviceCount" type="xsd:positiveInteger" use="required"/>
        <attribute name="customerId" type="xsd:positiveInteger" use="optional"/>
        <attribute name="customerName" type="xsd:string" use="optional"/>
      </complexType>
      <complexType name="FirmwareHistoryRow">
        <sequence/>
        <attribute name="packageId" type="xsd:positiveInteger" use="required"/>
        <attribute name="packageName" type="policynet:Name" use="required"/>
        <attribute name="version" type="xsd:string" use="required"/>
        <attribute name="softwareType" type="policynet:SoftwareType" use="required"/>
        <attribute name="packageInstallDate" type="xsd:dateTime" use="required"/>
        <attribute name="creatorId" type="xsd:positiveInteger" use="required"/>
        <attribute name="creatorName" type="xsd:string" use="required"/>
      </complexType>
      <complexType name="SystemReliabilityOrderBy">
        <sequence/>
        <attribute name="fieldName" type="policynet:SystemReliabilityField" use="required"/>
        <attribute name="fieldValue" type="xsd:int" use="optional"/>
        <attribute name="sortOrder" type="policynet:SortOrder" use="required"/>
      </complexType>
      <complexType name="SystemReliabilityIndexCriteria">
        <sequence/>
        <attribute name="indexType" type="policynet:SystemReliabilityIndexType" use="required"/>
        <attribute name="op" type="policynet:NumericOperator" use="required"/>
        <attribute name="value" type="xsd:decimal" use="required"/>
      </complexType>
      <complexType name="SystemReliabilityReportFilter">
        <sequence>
          <element name="indexCriteria" type="policynet:SystemReliabilityIndexCriteria" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          <element name="orderBy" type="policynet:SystemReliabilityOrderBy" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
        </sequence>
        <attribute name="summaryLevel" type="policynet:SystemReliabilitySummaryLevel" use="required"/>
        <attribute name="summaryWindowType" type="policynet:summaryWindowType" use="required"/>
        <attribute name="summaryStartTime" type="xsd:dateTime" use="optional"/>
        <attribute name="summaryEndTime" type="xsd:dateTime" use="optional"/>
        <attribute name="feederId" type="xsd:string" use="optional"/>
        <attribute name="transformerId" type="xsd:string" use="optional"/>
        <attribute name="subTransformerId" type="xsd:string" use="optional"/>
        <attribute name="firstRow" type="xsd:int" use="required"/>
        <attribute name="lastRow" type="xsd:int" use="required"/>
      </complexType>
      <complexType name="SystemReliabilityReportRow">
        <sequence>
          <element name="subTransformerId" type="xsd:string" minOccurs="1" maxOccurs="unbounded" nillable="false"/>
        </sequence>
        <attribute name="feederId" type="xsd:string" use="required"/>
        <attribute name="transformerId" type="xsd:string" use="required"/>
        <attribute name="saifiValue" type="xsd:decimal" use="required"/>
        <attribute name="saidiValue" type="xsd:decimal" use="required"/>
        <attribute name="caifiValue" type="xsd:decimal" use="required"/>
        <attribute name="caidiValue" type="xsd:decimal" use="required"/>
        <attribute name="asaiValue" type="xsd:decimal" use="required"/>
        <attribute name="maifiValue" type="xsd:decimal" use="required"/>
        <attribute name="ciiiValue" type="xsd:decimal" use="required"/>
        <attribute name="maifieValue" type="xsd:decimal" use="required"/>
      </complexType>
      <complexType name="OutageComponent">
        <sequence/>
        <attribute name="componentType" type="policynet:OutageComponentType" use="required"/>
        <attribute name="componentId" type="xsd:string" use="required"/>
      </complexType>
      <complexType name="PlannedOutage">
        <sequence>
          <element name="component" type="policynet:OutageComponent" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
        </sequence>
        <attribute name="outageId" type="xsd:positiveInteger" use="optional"/>
        <attribute name="description" type="xsd:string" use="required"/>
        <attribute name="startTime" type="policynet:deviceLocalTime" use="required"/>
        <attribute name="durationMin" type="xsd:positiveInteger" use="required"/>
        <attribute name="numAffectedDevices" type="xsd:positiveInteger" use="optional"/>
        <attribute name="status" type="policynet:OutageStatus" use="optional"/>
        <attribute name="customerId" type="xsd:positiveInteger" use="optional"/>
        <attribute name="customerName" type="xsd:string" use="optional"/>
        <attribute name="recalculateIndices" type="xsd:boolean" use="optional"/>
      </complexType>
      <complexType name="PlannedOutageSearchFilter">
        <sequence/>
        <attribute name="outageId" type="xsd:positiveInteger" use="optional"/>
        <attribute name="description" type="xsd:string" use="optional"/>
        <attribute name="startTime" type="xsd:dateTime" use="optional"/>
        <attribute name="endTime" type="xsd:dateTime" use="optional"/>
        <attribute name="durationMin" type="xsd:positiveInteger" use="optional"/>
        <attribute name="customerId" type="xsd:positiveInteger" use="optional"/>
        <attribute name="firstRow" type="xsd:int" use="required"/>
        <attribute name="lastRow" type="xsd:int" use="required"/>
      </complexType>
      <complexType name="TmedCalcType">
        <sequence>
          <element name="autoContinuous" type="xsd:boolean" minOccurs="0" maxOccurs="1" nillable="true"/>
          <element name="autoLastYearEnd" type="xsd:boolean" minOccurs="0" maxOccurs="1" nillable="true"/>
          <element name="tmedValue" type="policynet:TmedValue" minOccurs="0" maxOccurs="1" nillable="true"/>
        </sequence>
      </complexType>
      <complexType name="SystemReliabilityConfig">
        <sequence>
          <element name="tmedCalcType" type="policynet:TmedCalcType" minOccurs="1" maxOccurs="1"/>
        </sequence>
        <attribute name="forceTmedRecalc" type="xsd:boolean" use="required"/>
        <attribute name="includeTmedInReports" type="xsd:boolean" use="required"/>
        <attribute name="excludeSubMeters" type="xsd:boolean" use="optional"/>
        <attribute name="momentaryThresholdMins" type="xsd:positiveInteger" use="required"/>
        <attribute name="blinkThreshold" type="xsd:positiveInteger" use="optional"/>
      </complexType>
      <complexType name="FirmwareHistory">
        <sequence>
          <element name="firmware" type="policynet:FirmwareHistoryRow" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
        </sequence>
      </complexType>
      <complexType name="ProgramHistoryRow">
        <sequence/>
        <attribute name="programId" type="xsd:string" use="required"/>
        <attribute name="programName" type="policynet:Name" use="required"/>
        <attribute name="programInstallDate" type="xsd:dateTime" use="required"/>
        <attribute name="creatorId" type="xsd:positiveInteger" use="required"/>
        <attribute name="creatorName" type="xsd:string" use="required"/>
      </complexType>
      <complexType name="ProgramHistory">
        <sequence>
          <element name="program" type="policynet:ProgramHistoryRow" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
        </sequence>
      </complexType>
      <complexType name="DeviceHistory">
        <sequence>
          <element name="smartAgentHistory" type="policynet:FirmwareHistory" minOccurs="1" maxOccurs="1"/>
          <element name="metrologyHistory" type="policynet:FirmwareHistory" minOccurs="0" maxOccurs="1" nillable="true"/>
          <element name="programHistory" type="policynet:ProgramHistory" minOccurs="0" maxOccurs="1" nillable="true"/>
        </sequence>
        <attribute name="utilitySerialNumber" type="policynet:UtilitySerialNumber" use="required"/>
      </complexType>
      <complexType name="MeterRebootPolicy">
        <annotation>
          <documentation>Policy to remotely reboot a SmartMeter.</documentation>
        </annotation>
        <complexContent>
          <extension base="policynet:Policy">
            <sequence/>
            <attribute name="randomTimeOffset" type="xsd:unsignedInt" use="required"/>
            <attribute name="useInactivePartition" type="xsd:boolean" use="required"/>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="WimaxStatisticsPolicy">
        <annotation>
          <documentation>Policy to report device's Wimax Statistics.</documentation>
        </annotation>
        <complexContent>
          <extension base="policynet:Policy">
            <sequence/>
            <attribute name="samplingFrequency" type="policynet:SamplingFrequencySeconds" use="optional"/>
            <attribute name="desiredStatistics" type="xsd:string" use="required"/>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="CopsModePolicy">
        <annotation>
          <documentation>Policy to control the mode of COPS operation.  ReconnectTimeOffset may be used to randomize the reconnection of devices operating in Disconnected Mode.</documentation>
        </annotation>
        <complexContent>
          <extension base="policynet:Policy">
            <sequence/>
            <attribute name="connectionMode" type="policynet:CopsConnectionMode" use="required"/>
            <attribute name="reconnectTimeOffset" type="xsd:unsignedInt" use="required"/>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="QoSProfilePolicy">
        <annotation>
          <documentation>This policy will modify the device(s) QoS Id, which will modify the WiMAX Service Flows return by the PolicyNet RADIUS server at the next network entry time.</documentation>
        </annotation>
        <complexContent>
          <extension base="policynet:Policy">
            <sequence/>
            <attribute name="qosId" type="xsd:unsignedInt" use="required"/>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="StateMonitorSmartMeter">
        <sequence/>
        <attribute name="monitorDiscovered" type="xsd:boolean" use="required"/>
        <attribute name="discoveredFlagDuration" type="xsd:positiveInteger" use="required"/>
        <attribute name="monitorInstalled" type="xsd:boolean" use="required"/>
        <attribute name="installedFlagDuration" type="xsd:positiveInteger" use="required"/>
      </complexType>
      <complexType name="StateMonitorSgRouter">
        <sequence/>
        <attribute name="monitorDiscovered" type="xsd:boolean" use="required"/>
        <attribute name="discoveredFlagDuration" type="xsd:positiveInteger" use="required"/>
        <attribute name="monitorInstalled" type="xsd:boolean" use="required"/>
        <attribute name="installedFlagDuration" type="xsd:positiveInteger" use="required"/>
      </complexType>
      <complexType name="StateMonitorGasMeter">
        <sequence/>
        <attribute name="monitorInstalled" type="xsd:boolean" use="required"/>
        <attribute name="installedFlagDuration" type="xsd:positiveInteger" use="required"/>
      </complexType>
      <complexType name="StateMonitorWaterMeter">
        <sequence/>
        <attribute name="monitorInstalled" type="xsd:boolean" use="required"/>
        <attribute name="installedFlagDuration" type="xsd:positiveInteger" use="required"/>
      </complexType>
      <complexType name="DeviceStateMonitorPolicy">
        <annotation>
          <documentation>A server policy that monitors certain conditions based on the Operational State of a device.</documentation>
        </annotation>
        <complexContent>
          <extension base="policynet:Policy">
            <sequence>
              <choice>
                <element name="smartMeter" type="policynet:StateMonitorSmartMeter" minOccurs="0" maxOccurs="1" nillable="true"/>
                <element name="sgRouter" type="policynet:StateMonitorSgRouter" minOccurs="0" maxOccurs="1" nillable="true"/>
                <element name="gasMeter" type="policynet:StateMonitorGasMeter" minOccurs="0" maxOccurs="1" nillable="true"/>
                <element name="waterMeter" type="policynet:StateMonitorWaterMeter" minOccurs="0" maxOccurs="1" nillable="true"/>
              </choice>
            </sequence>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="RevenueAssurancePolicy">
        <annotation>
          <documentation>A server policy that monitors the number of missed billing report and tag these devices as "chronic failures" after specified threshold.</documentation>
        </annotation>
        <complexContent>
          <extension base="policynet:Policy">
            <sequence/>
            <attribute name="intervalReadPolicyId" type="xsd:positiveInteger" use="required"/>
            <attribute name="maxMissedReport" type="xsd:positiveInteger" use="required"/>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="IntervalDataSummaryReportConfig">
        <annotation>
          <documentation>A server policy that configures the runtime for the interval data summary report and gap report.</documentation>
        </annotation>
        <complexContent>
          <extension base="policynet:Policy">
            <sequence/>
            <attribute name="intervalReadPolicyId" type="xsd:positiveInteger" use="required"/>
            <attribute name="fillGaps" type="xsd:boolean" use="optional"/>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="MeterPasswordType">
        <sequence>
          <element name="passwordName" type="xsd:string" minOccurs="1" maxOccurs="1"/>
          <choice>
            <element name="randomPasswordValue" type="xsd:boolean" minOccurs="1" maxOccurs="1" default="true"/>
            <element name="existingPasswordValue" type="xsd:boolean" minOccurs="1" maxOccurs="1" default="true"/>
            <element name="userDefinedPasswordValue" type="policynet:meterPasswordHex" minOccurs="1" maxOccurs="1" nillable="false"/>
          </choice>
        </sequence>
      </complexType>
      <complexType name="MeterPassword">
        <sequence>
          <element name="passwordName" type="xsd:string" minOccurs="1" maxOccurs="1"/>
          <element name="passwordValue" type="policynet:meterPasswordHex" minOccurs="1" maxOccurs="1"/>
        </sequence>
      </complexType>
      <complexType name="MeterPasswordSet">
        <sequence>
          <element name="password" type="policynet:MeterPasswordType" minOccurs="3" maxOccurs="255" nillable="false"/>
        </sequence>
      </complexType>
      <complexType name="PsemxKeyType">
        <sequence>
          <element name="keyName" type="xsd:string" minOccurs="1" maxOccurs="1"/>
          <choice>
            <element name="randomKeyValue" type="xsd:boolean" minOccurs="1" maxOccurs="1" default="true"/>
            <element name="existingKeyValue" type="xsd:boolean" minOccurs="1" maxOccurs="1" default="true"/>
            <element name="userDefinedKeyValue" type="policynet:psemSecurityKey" minOccurs="1" maxOccurs="1" nillable="false"/>
          </choice>
        </sequence>
      </complexType>
      <complexType name="PsemxKey">
        <sequence/>
        <attribute name="keyName" type="xsd:string" use="required"/>
        <attribute name="keyValue" type="policynet:psemSecurityKey" use="required"/>
      </complexType>
      <complexType name="PsemxKeySet">
        <sequence>
          <element name="PsemxKey" type="policynet:PsemxKeyType" minOccurs="1" maxOccurs="1"/>
        </sequence>
      </complexType>
      <complexType name="MeterPasswordUpdatePolicy">
        <annotation>
          <documentation>The Meter Password Update Policy supports one-time or periodic key management for C12.19 meter password sets and optional psemx encryption keys.</documentation>
        </annotation>
        <complexContent>
          <extension base="policynet:Policy">
            <sequence>
              <element name="MeterPasswordSet" type="policynet:MeterPasswordSet" minOccurs="0" maxOccurs="1" nillable="true"/>
              <element name="PsemxKeySet" type="policynet:PsemxKeySet" minOccurs="0" maxOccurs="1" nillable="true"/>
            </sequence>
            <attribute name="passwordUpdateTime" type="policynet:deviceLocalTime" use="required"/>
            <attribute name="usePsemx" type="xsd:boolean" use="required"/>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="MeterPasswordReportRow">
        <sequence>
          <element name="utilitySerialNumber" type="policynet:UtilitySerialNumber" minOccurs="1" maxOccurs="1"/>
          <element name="meterPassword" type="policynet:MeterPassword" minOccurs="3" maxOccurs="255" nillable="false"/>
          <element name="psemxKey" type="policynet:PsemxKey" minOccurs="1" maxOccurs="1"/>
        </sequence>
      </complexType>
      <complexType name="DeviceDiagnosticsPolicy">
        <complexContent>
          <extension base="policynet:Policy">
            <sequence/>
            <attribute name="reportingTimeOfDay" type="policynet:ReportingTimeOfDay" use="required"/>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="Service">
        <sequence/>
        <attribute name="certSubjectName" type="policynet:SubjectName" use="required"/>
        <attribute name="serviceName" type="policynet:ServiceName" use="required"/>
        <attribute name="serviceType" type="policynet:PNService" use="required"/>
      </complexType>
      <complexType name="ServerCertificateSigningReqPolicy">
        <annotation>
          <documentation>A server policy that is used to issue X509 certificates to various PolicyNet services.</documentation>
        </annotation>
        <complexContent>
          <extension base="policynet:Policy">
            <sequence>
              <element name="service" type="policynet:Service" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
            </sequence>
            <attribute name="actionStartTime" type="xsd:dateTime" use="required"/>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="DeviceCertificateSigningReqPolicy">
        <annotation>
          <documentation>A policy that is used to issue X509 certificates to various PolicyNet devices.</documentation>
        </annotation>
        <complexContent>
          <extension base="policynet:Policy">
            <sequence/>
            <attribute name="actionStartTime" type="xsd:dateTime" use="required"/>
            <attribute name="rejoinNetwork" type="xsd:boolean" use="required"/>
            <attribute name="serverUrl" type="policynet:ServerUrl" use="required"/>
            <attribute name="numberRetries" type="xsd:positiveInteger" use="required"/>
            <attribute name="maxEnforcementDelay" type="xsd:positiveInteger" use="required"/>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="DeviceExportCertificate">
        <sequence/>
        <attribute name="serviceName" type="policynet:ServiceName" use="required"/>
        <attribute name="serialNo" type="xsd:positiveInteger" use="required"/>
        <attribute name="cert" type="xsd:string" use="required"/>
      </complexType>
      <complexType name="SupplicantConfigPolicy">
        <complexContent>
          <extension base="policynet:Policy">
            <sequence/>
            <attribute name="actionStartTime" type="xsd:dateTime" use="required"/>
            <attribute name="authType" type="policynet:authType" use="required"/>
            <attribute name="realm" type="policynet:Realm" use="required"/>
            <attribute name="rejoinNetwork" type="xsd:boolean" use="required"/>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="NetworkAddress">
        <sequence/>
        <attribute name="ipAddress" type="policynet:IpAddress" use="required"/>
        <attribute name="subnetMask" type="policynet:IpAddress" use="required"/>
      </complexType>
      <complexType name="NetworkAddressType">
        <sequence>
          <choice>
            <element name="dynamic" type="xsd:boolean" minOccurs="1" maxOccurs="1" default="true"/>
            <element name="address" type="policynet:NetworkAddress" minOccurs="1" maxOccurs="1" nillable="false"/>
          </choice>
        </sequence>
        <attribute name="label" type="xsd:string" use="required"/>
      </complexType>
      <complexType name="NetworkAddressConfig">
        <sequence>
          <element name="NetworkAddress" type="policynet:NetworkAddressType" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
        </sequence>
        <attribute name="linkName" type="xsd:string" use="required"/>
      </complexType>
      <complexType name="LANConfig">
        <sequence/>
        <attribute name="enable" type="xsd:boolean" use="required"/>
        <attribute name="useDefaultValues" type="xsd:boolean" use="optional"/>
        <attribute name="ipAddress" type="policynet:IpAddress" use="optional"/>
        <attribute name="subnetMask" type="policynet:IpAddress" use="optional"/>
      </complexType>
      <complexType name="IpsecService">
        <sequence>
          <choice>
            <element name="X509" type="xsd:boolean" minOccurs="1" maxOccurs="1" default="true"/>
            <element name="Psk" type="xsd:string" minOccurs="1" maxOccurs="1" nillable="false"/>
          </choice>
        </sequence>
        <attribute name="remoteLanAddress" type="policynet:IpAddress" use="required"/>
        <attribute name="remoteWanAddress" type="policynet:IpAddress" use="required"/>
      </complexType>
      <complexType name="IpsecServiceConfig">
        <sequence>
          <choice>
            <element name="IpsecServiceDisable" type="xsd:boolean" minOccurs="1" maxOccurs="1" default="true"/>
            <element name="IpsecService" type="policynet:IpsecService" minOccurs="1" maxOccurs="1" nillable="false"/>
          </choice>
        </sequence>
      </complexType>
      <complexType name="DhcpService">
        <sequence/>
        <attribute name="interface" type="xsd:string" use="required"/>
        <attribute name="startIpAddress" type="policynet:IpAddress" use="required"/>
        <attribute name="endIpAddress" type="policynet:IpAddress" use="required"/>
        <attribute name="ntpServer" type="xsd:string" use="optional"/>
        <attribute name="dnsServer" type="xsd:string" use="optional"/>
        <attribute name="subnet" type="xsd:string" use="optional"/>
        <attribute name="routerAddress" type="policynet:IpAddress" use="optional"/>
        <attribute name="broadcastAddress" type="policynet:IpAddress" use="optional"/>
      </complexType>
      <complexType name="DhcpServiceConfig">
        <sequence>
          <choice>
            <element name="DhcpServiceDisable" type="xsd:boolean" minOccurs="1" maxOccurs="1" default="true"/>
            <element name="DhcpService" type="policynet:DhcpService" minOccurs="1" maxOccurs="1" nillable="false"/>
          </choice>
        </sequence>
      </complexType>
      <complexType name="FirewallService">
        <sequence/>
        <attribute name="natEnable" type="xsd:boolean" use="required"/>
        <attribute name="bridgeAddress" type="policynet:IpAddress" use="optional"/>
      </complexType>
      <complexType name="FirewallServiceConfig">
        <sequence>
          <choice>
            <element name="FirewallServiceDisable" type="xsd:boolean" minOccurs="1" maxOccurs="1" default="true"/>
            <element name="FirewallService" type="policynet:FirewallService" minOccurs="1" maxOccurs="1" nillable="false"/>
          </choice>
        </sequence>
      </complexType>
      <complexType name="RouteEntry">
        <sequence/>
        <attribute name="address" type="policynet:IpAddress" use="required"/>
        <attribute name="netmask" type="policynet:IpAddress" use="required"/>
        <attribute name="gateway" type="policynet:IpAddress" use="required"/>
        <attribute name="device" type="policynet:LinkName" use="required"/>
      </complexType>
      <complexType name="RoutingServiceConfig">
        <sequence>
          <element name="Route" type="policynet:RouteEntry" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
        </sequence>
        <attribute name="enableForwarding" type="xsd:boolean" use="required"/>
      </complexType>
      <complexType name="ScanProfile">
        <sequence/>
        <attribute name="channelFrequency" type="policynet:ChannelFrequency" use="required"/>
        <attribute name="frequencyStep" type="policynet:FrequencyStep" use="required"/>
        <attribute name="numFrequencies" type="policynet:FrequencyCount" use="required"/>
        <attribute name="channelBandwidth" type="policynet:ChannelBandwidth" use="required"/>
      </complexType>
      <complexType name="RadioConfig">
        <sequence>
          <element name="scanProfile" type="policynet:ScanProfile" minOccurs="1" maxOccurs="unbounded" nillable="false"/>
        </sequence>
        <attribute name="rejoinNetwork" type="xsd:boolean" use="required"/>
      </complexType>
      <complexType name="ChannelPlan">
        <sequence/>
        <attribute name="firstFreq" type="policynet:ChannelFrequency" use="required"/>
        <attribute name="lastFreq" type="policynet:ChannelFrequency" use="required"/>
        <attribute name="nextFreqStep" type="policynet:FrequencyStep" use="required"/>
        <attribute name="channelBandwidth" type="policynet:ChannelBandwidth" use="required"/>
      </complexType>
      <complexType name="RadioChannelPlanConfig">
        <sequence>
          <element name="ChannelPlan" type="policynet:ChannelPlan" minOccurs="1" maxOccurs="unbounded" nillable="false"/>
        </sequence>
      </complexType>
      <complexType name="AuthenticationTypeConfig">
        <sequence/>
        <attribute name="authType" type="policynet:authType" use="required"/>
        <attribute name="rejoinNetwork" type="xsd:boolean" use="required"/>
      </complexType>
      <complexType name="NetworkEntryConfig">
        <sequence/>
        <attribute name="backoffFactor" type="xsd:positiveInteger" use="required">
          <annotation>
            <documentation>Backoff factor in seconds for binary truncated backoff algorithm. If value = 0, than disable</documentation>
          </annotation>
        </attribute>
        <attribute name="backoffMaximumExponent" type="xsd:positiveInteger" use="required">
          <annotation>
            <documentation>Exponent for binary truncated backoff algorithm</documentation>
          </annotation>
        </attribute>
        <attribute name="backoffOffset" type="xsd:positiveInteger" use="required">
          <annotation>
            <documentation>Minimum offset (in seconds) for binary truncated backoff algorithm</documentation>
          </annotation>
        </attribute>
        <attribute name="lastGood" type="xsd:positiveInteger" use="required">
          <annotation>
            <documentation>Number of most-recently-used (good) sectors to remember</documentation>
          </annotation>
        </attribute>
        <attribute name="mobilityIdleTimeout" type="xsd:positiveInteger" use="required">
          <annotation>
            <documentation>Time (in seconds) before device enters idle mode after inactivity. If value = 0, than disable</documentation>
          </annotation>
        </attribute>
        <attribute name="maxFailedScans" type="xsd:positiveInteger" use="required">
          <annotation>
            <documentation>Fall back to default keying material after this number of failed scans</documentation>
          </annotation>
        </attribute>
        <attribute name="maxFailedPrimaryAuthentications" type="xsd:positiveInteger" use="required">
          <annotation>
            <documentation>Fall back to default keying material after this number of failed authentications</documentation>
          </annotation>
        </attribute>
      </complexType>
      <complexType name="DeviceNetworkTunablesConfig">
        <sequence/>
        <attribute name="networkHeartbeatLowerBound" type="policynet:NetworkHeartbeat" use="required"/>
        <attribute name="networkHeartbeatUpperBound" type="policynet:NetworkHeartbeat" use="required"/>
        <attribute name="copsCloseReconnectLowerBound" type="policynet:CopsClientReconnect" use="required"/>
        <attribute name="copsCloseReconnectUpperBound" type="policynet:CopsClientReconnect" use="required"/>
        <attribute name="copsServerNotFoundReconnectLowerBound" type="policynet:CopsClientReconnect" use="required"/>
        <attribute name="copsServerNotFoundReconnectUpperBound" type="policynet:CopsClientReconnect" use="required"/>
        <attribute name="copsOutageNotificationMaximumDelay" type="policynet:CopsOutageNotificationDelay" use="required"/>
        <attribute name="csrClientConnectLowerBound" type="policynet:CsrClientConnect" use="required"/>
        <attribute name="csrClientConnectUpperBound" type="policynet:CsrClientConnect" use="required"/>
      </complexType>
      <complexType name="NspIdEntry">
        <sequence/>
        <attribute name="priority" type="xsd:positiveInteger" use="required"/>
        <attribute name="nspId" type="policynet:NspId" use="required"/>
      </complexType>
      <complexType name="NspIdList">
        <sequence>
          <element name="NspId" type="policynet:NspIdEntry" minOccurs="0" maxOccurs="unbounded"/>
        </sequence>
      </complexType>
      <complexType name="NapIdEntry">
        <sequence/>
        <attribute name="priority" type="xsd:positiveInteger" use="required"/>
        <attribute name="napId" type="policynet:NapId" use="required"/>
      </complexType>
      <complexType name="NapIdList">
        <sequence>
          <element name="NapId" type="policynet:NapIdEntry" minOccurs="0" maxOccurs="unbounded"/>
        </sequence>
      </complexType>
      <complexType name="NetworkParameters">
        <sequence>
          <element name="NapIdList" type="policynet:NapIdList" minOccurs="0" maxOccurs="1"/>
          <element name="NspIdList" type="policynet:NspIdList" minOccurs="0" maxOccurs="1"/>
          <element name="channelPlanConfig" type="policynet:RadioChannelPlanConfig" minOccurs="0" maxOccurs="1" nillable="true"/>
          <element name="networkEntry" type="policynet:NetworkEntryConfig" minOccurs="0" maxOccurs="1" nillable="true"/>
        </sequence>
      </complexType>
      <complexType name="Link">
        <sequence>
          <choice>
            <element name="PhyCinrThresholdDisable" type="xsd:boolean" minOccurs="1" maxOccurs="1" default="true"/>
            <element name="PhyCinrThreshold" type="xsd:positiveInteger" minOccurs="1" maxOccurs="1"/>
          </choice>
          <element name="NetworkParameters" type="policynet:NetworkParameters" minOccurs="0" maxOccurs="1" nillable="true"/>
        </sequence>
        <attribute name="name" type="policynet:LinkName" use="required"/>
        <attribute name="type" type="policynet:NetworkLinkType" use="required"/>
      </complexType>
      <complexType name="LinkConfig">
        <sequence>
          <element name="Link" type="policynet:Link" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
        </sequence>
      </complexType>
      <complexType name="RealmConfig">
        <sequence/>
        <attribute name="realm" type="policynet:Realm" use="required"/>
        <attribute name="authType" type="policynet:authType" use="required"/>
      </complexType>
      <complexType name="VpnConnectionParameters">
        <sequence/>
        <attribute name="AllowOobMessages" type="xsd:boolean" use="optional"/>
        <attribute name="maxAttemptsPerHour" type="xsd:nonNegativeInteger" use="optional"/>
        <attribute name="backoffBaseline" type="xsd:nonNegativeInteger" use="optional"/>
        <attribute name="randomizedInitialBackoff" type="xsd:nonNegativeInteger" use="optional"/>
        <attribute name="maximumBackoffExponent" type="xsd:nonNegativeInteger" use="optional"/>
        <attribute name="factoryDefaultOnFailureCount" type="xsd:nonNegativeInteger" use="optional"/>
      </complexType>
      <complexType name="VpnConfig">
        <sequence>
          <choice>
            <element name="disable" type="xsd:boolean" minOccurs="1" maxOccurs="1"/>
            <element name="vpnConnectionParameters" type="policynet:VpnConnectionParameters" minOccurs="1" maxOccurs="1" nillable="false"/>
          </choice>
        </sequence>
      </complexType>
      <complexType name="NetworkConfiguration">
        <sequence>
          <choice>
            <element name="networkAddressConfig" type="policynet:NetworkAddressConfig" minOccurs="0" maxOccurs="1" nillable="true"/>
            <element name="ipsecConfig" type="policynet:IpsecServiceConfig" minOccurs="0" maxOccurs="1" nillable="true"/>
            <element name="firewallConfig" type="policynet:FirewallServiceConfig" minOccurs="0" maxOccurs="1" nillable="true"/>
            <element name="routingConfig" type="policynet:RoutingServiceConfig" minOccurs="0" maxOccurs="1" nillable="true"/>
            <element name="linkConfig" type="policynet:LinkConfig" minOccurs="0" maxOccurs="1" nillable="true"/>
            <element name="realmConfig" type="policynet:RealmConfig" minOccurs="0" maxOccurs="1" nillable="true"/>
            <element name="networkTunablesConfig" type="policynet:DeviceNetworkTunablesConfig" minOccurs="0" maxOccurs="1" nillable="true"/>
            <element name="vpnConfig" type="policynet:VpnConfig" minOccurs="0" maxOccurs="1" nillable="true"/>
          </choice>
        </sequence>
      </complexType>
      <complexType name="RouterConfiguration">
        <sequence>
          <choice>
            <element name="lanConfig" type="policynet:LANConfig" minOccurs="0" maxOccurs="1" nillable="true"/>
            <element name="ipsecConfig" type="policynet:IpsecServiceConfig" minOccurs="0" maxOccurs="1" nillable="true"/>
            <element name="dhcpConfig" type="policynet:DhcpServiceConfig" minOccurs="0" maxOccurs="1" nillable="true"/>
            <element name="firewallConfig" type="policynet:FirewallServiceConfig" minOccurs="0" maxOccurs="1" nillable="true"/>
            <element name="routingConfig" type="policynet:RoutingServiceConfig" minOccurs="0" maxOccurs="1" nillable="true"/>
          </choice>
        </sequence>
      </complexType>
      <complexType name="RouterConfigurations">
        <sequence>
          <element name="configuration" type="policynet:RouterConfiguration" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
        </sequence>
      </complexType>
      <complexType name="NetworkConfigurations">
        <sequence>
          <element name="configuration" type="policynet:NetworkConfiguration" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
        </sequence>
      </complexType>
      <complexType name="RouterConfigPolicy">
        <complexContent>
          <extension base="policynet:Policy">
            <sequence>
              <element name="configurations" type="policynet:RouterConfigurations" minOccurs="1" maxOccurs="1"/>
            </sequence>
            <attribute name="actionStartTime" type="xsd:dateTime" use="required"/>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="NetworkProvisioningPolicy">
        <complexContent>
          <extension base="policynet:Policy">
            <sequence>
              <element name="configurations" type="policynet:NetworkConfigurations" minOccurs="1" maxOccurs="1"/>
            </sequence>
            <attribute name="actionStartTime" type="xsd:dateTime" use="required"/>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="CheckMulticastPerformancePolicy">
        <complexContent>
          <extension base="policynet:Policy">
            <sequence/>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="ConfigureMulticastGroupPolicy">
        <complexContent>
          <extension base="policynet:Policy">
            <sequence/>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="SSHConfigPolicy">
        <complexContent>
          <extension base="policynet:Policy">
            <sequence>
              <element name="publicKey" type="xsd:string" minOccurs="1" maxOccurs="1"/>
            </sequence>
            <attribute name="actionStartTime" type="xsd:dateTime" use="required"/>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="RadioConfigPolicy">
        <complexContent>
          <extension base="policynet:Policy">
            <sequence>
              <element name="scanProfile" type="policynet:ScanProfile" minOccurs="1" maxOccurs="unbounded" nillable="false"/>
            </sequence>
            <attribute name="actionStartTime" type="xsd:dateTime" use="required"/>
            <attribute name="rejoinNetwork" type="xsd:boolean" use="required"/>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="BackOffParameters">
        <sequence/>
        <attribute name="initialBackoffTime" type="xsd:positiveInteger" use="required"/>
        <attribute name="additionalBackoffTime" type="xsd:positiveInteger" use="optional"/>
        <attribute name="maximumBackoffTime" type="xsd:positiveInteger" use="required"/>
        <attribute name="randomBackoffTime" type="xsd:positiveInteger" use="optional"/>
      </complexType>
      <complexType name="FlowControlParameters">
        <sequence/>
        <attribute name="sectorActiveMax" type="xsd:positiveInteger" use="optional"/>
      </complexType>
      <complexType name="CmdhNetworkAccessRule">
        <sequence/>
        <attribute name="description" type="xsd:string" use="optional"/>
        <attribute name="minReqVolume" type="xsd:string" use="optional"/>
        <attribute name="spreadingWaitTime" type="xsd:positiveInteger" use="optional"/>
        <attribute name="initialBackoffTime" type="xsd:positiveInteger" use="required"/>
        <attribute name="additionalBackoffTime" type="xsd:positiveInteger" use="optional"/>
        <attribute name="maximumBackoffTime" type="xsd:positiveInteger" use="required"/>
        <attribute name="randomBackoffTime" type="xsd:positiveInteger" use="optional"/>
        <attribute name="sectorActiveMax" type="xsd:positiveInteger" use="optional"/>
      </complexType>
      <complexType name="CmdhNetworkAccessRules">
        <sequence>
          <element name="cmdhNetworkAccessRule" type="policynet:CmdhNetworkAccessRule" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          <element name="eventCategory" type="policynet:CmdhEventCategory" minOccurs="0" maxOccurs="unbounded"/>
        </sequence>
        <attribute name="description" type="xsd:string" use="optional"/>
      </complexType>
      <complexType name="CmdhBuffer">
        <sequence/>
        <attribute name="mgmtDefinition" type="xsd:string" use="required"/>
        <attribute name="description" type="xsd:string" use="required"/>
        <attribute name="applicableEventCategory" type="xsd:string" use="required"/>
        <attribute name="maxBufferSize" type="xsd:positiveInteger" use="required"/>
        <attribute name="storagePriority" type="xsd:positiveInteger" use="required"/>
      </complexType>
      <complexType name="CmdhDefEcValue">
        <sequence/>
        <attribute name="mgmtDefinition" type="xsd:string" use="required"/>
        <attribute name="description" type="xsd:string" use="required"/>
        <attribute name="applicableEventCategory" type="xsd:string" use="required"/>
        <attribute name="requestOrigin" type="xsd:string" use="required"/>
        <attribute name="order" type="xsd:positiveInteger" use="required"/>
        <attribute name="defEcValue" type="policynet:CmdhEventCategory" use="required"/>
        <attribute name="requestContext" type="xsd:string" use="required"/>
        <attribute name="requestContextNotification" type="xsd:boolean" use="optional"/>
        <attribute name="requestCharacteristics" type="xsd:boolean" use="optional"/>
      </complexType>
      <complexType name="CmdhEcDefParamValues">
        <sequence/>
        <attribute name="mgmtDefinition" type="xsd:string" use="required"/>
        <attribute name="description" type="xsd:string" use="required"/>
        <attribute name="applicableEventCategory" type="xsd:string" use="required"/>
        <attribute name="defaultRequestExpTime" type="policynet:deviceLocalTime" use="required"/>
        <attribute name="defaultResultExpTime" type="policynet:deviceLocalTime" use="required"/>
        <attribute name="defaultOpExecTime" type="policynet:deviceLocalTime" use="required"/>
        <attribute name="defaultRespPersistence" type="policynet:deviceLocalTime" use="required"/>
        <attribute name="defaultDelAggregation" type="xsd:boolean" use="required"/>
      </complexType>
      <complexType name="CmdhDefaults">
        <sequence>
          <element name="cmdhDefEcValue" type="policynet:CmdhDefEcValue" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          <element name="cmdhEcDefParamValues" type="policynet:CmdhEcDefParamValues" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
        </sequence>
        <attribute name="mgmtDefinition" type="xsd:string" use="required"/>
      </complexType>
      <complexType name="CmdhLimits">
        <sequence/>
        <attribute name="mgmtDefinition" type="xsd:string" use="required"/>
        <attribute name="description" type="xsd:string" use="required"/>
        <attribute name="order" type="xsd:positiveInteger" use="required"/>
        <attribute name="requestOrigin" type="xsd:string" use="required"/>
        <attribute name="requestContext" type="xsd:string" use="required"/>
        <attribute name="requestContextNotification" type="xsd:boolean" use="optional"/>
        <attribute name="requestCharacteristics" type="xsd:boolean" use="optional"/>
        <attribute name="limitsEventCategory" type="xsd:string" use="required"/>
        <attribute name="limitsRequestExpTime" type="policynet:deviceLocalTime" use="required"/>
        <attribute name="limitsResultExpTime" type="policynet:deviceLocalTime" use="required"/>
        <attribute name="limitsOpExecTime" type="policynet:deviceLocalTime" use="required"/>
        <attribute name="limitsRespPersistence" type="policynet:deviceLocalTime" use="required"/>
        <attribute name="limitsDelAggregation" type="xsd:boolean" use="required"/>
      </complexType>
      <complexType name="cmdhPolicy">
        <complexContent>
          <extension base="policynet:oneM2MRequest">
            <sequence>
              <element name="cmdhDefault" type="policynet:CmdhDefaults" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
              <element name="cmdhLimits" type="policynet:CmdhLimits" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
              <element name="cmdhNetworkAccessRules" type="policynet:CmdhNetworkAccessRules" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
              <element name="cmdhBufferList" type="policynet:CmdhBuffer" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
            </sequence>
            <attribute name="activeCmdhPolicy" type="xsd:boolean" use="optional"/>
            <attribute name="mgmtDefinition" type="xsd:string" use="optional"/>
            <attribute name="enforcementPoint" type="policynet:ServiceFlowEnforcement" use="optional"/>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="ScaEventConfig">
        <sequence>
          <element name="operationTypes" type="policynet:ScaOperationType" minOccurs="1" maxOccurs="5"/>
          <element name="eventType" type="policynet:ScaEventType" minOccurs="0" maxOccurs="unbounded"/>
        </sequence>
      </complexType>
      <complexType name="scaPolicy">
        <complexContent>
          <extension base="policynet:oneM2MRequest">
            <sequence>
              <element name="statsConfig" type="policynet:ScaEventConfig" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
            </sequence>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="LteConfig">
        <sequence>
          <element name="eventCategory" type="policynet:CmdhEventCategory" minOccurs="0" maxOccurs="unbounded"/>
          <element name="apn" type="policynet:Apn" minOccurs="0" maxOccurs="unbounded"/>
        </sequence>
        <attribute name="keepAliveFreq" type="xsd:positiveInteger" use="required"/>
        <attribute name="missedKeepAliveThreshold" type="xsd:positiveInteger" use="required"/>
      </complexType>
      <complexType name="lteNetworkConfigPolicy">
        <complexContent>
          <extension base="policynet:Policy">
            <sequence>
              <element name="lteConfig" type="policynet:LteConfig" minOccurs="1" maxOccurs="1"/>
            </sequence>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="locationPolicy">
        <complexContent>
          <extension base="policynet:Policy">
            <sequence>
              <element name="eventCategory" type="policynet:CmdhEventCategory" minOccurs="0" maxOccurs="unbounded"/>
            </sequence>
            <attribute name="step" type="xsd:string" use="required"/>
            <attribute name="locationUpdatePeriod" type="xsd:positiveInteger" use="required"/>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="WaterMeterReadPolicy">
        <annotation>
          <documentation>Policy for SmartMeter to report register and interval reads from a Water Meter.</documentation>
        </annotation>
        <complexContent>
          <extension base="policynet:WaterPolicy">
            <sequence/>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="WaterRegisterReadPolicy">
        <annotation>
          <documentation>Policy for SmartMeter to report a cumulative summation read from a Water Meter.</documentation>
        </annotation>
        <complexContent>
          <extension base="policynet:WaterPolicy">
            <sequence/>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="WaterMeterEventsPolicy">
        <annotation>
          <documentation>Policy for SmartMeter to report the following events from a Water Meter: Low Battery; Comm Failure; Water Leak</documentation>
        </annotation>
        <complexContent>
          <extension base="policynet:WaterPolicy">
            <sequence/>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="GasMeterReadPolicy">
        <annotation>
          <documentation>Policy for SmartMeter to report register and interval reads from a gas Meter.</documentation>
        </annotation>
        <complexContent>
          <extension base="policynet:GasPolicy">
            <sequence/>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="GasRegisterReadPolicy">
        <annotation>
          <documentation>Policy for SmartMeter to report a cumulative summation read from a Gas Meter.</documentation>
        </annotation>
        <complexContent>
          <extension base="policynet:GasPolicy">
            <sequence/>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="GasMeterEventsPolicy">
        <annotation>
          <documentation>Policy for SmartMeter to report the following events from a Gas Meter: Low Battery; Comm Failure; Gas Leak</documentation>
        </annotation>
        <complexContent>
          <extension base="policynet:GasPolicy">
            <sequence/>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="PolicyType">
        <choice>
          <element name="meterReadPolicy" type="policynet:MeterReadType" minOccurs="1" maxOccurs="1" nillable="false"/>
          <element name="meterControlPolicy" type="policynet:MeterControlType" minOccurs="1" maxOccurs="1" nillable="false"/>
          <element name="loadControlPolicy" type="policynet:LoadControlType" minOccurs="1" maxOccurs="1" nillable="false"/>
          <element name="panPolicy" type="policynet:PanType" minOccurs="1" maxOccurs="1" nillable="false"/>
          <element name="serverPolicy" type="policynet:ServerPolicyType" minOccurs="1" maxOccurs="1" nillable="false"/>
          <element name="waterMeterReadPolicy" type="policynet:WaterMeterReadType" minOccurs="1" maxOccurs="1" nillable="false"/>
          <element name="gasMeterReadPolicy" type="policynet:GasMeterReadType" minOccurs="1" maxOccurs="1" nillable="false"/>
          <element name="deviceControlPolicy" type="policynet:DeviceControlType" minOccurs="1" maxOccurs="1" nillable="false"/>
        </choice>
      </complexType>
      <complexType name="MeterReadType">
        <choice>
          <element name="registerRead" type="policynet:RegisterReadPolicy" minOccurs="1" maxOccurs="1" nillable="false"/>
          <element name="intervalRead" type="policynet:IntervalReadPolicy" minOccurs="1" maxOccurs="1" nillable="false"/>
          <element name="validatedIntervalRead" type="policynet:ValidatedIntervalReadPolicy" minOccurs="1" maxOccurs="1" nillable="false"/>
          <element name="powerQualityRead" type="policynet:PowerQualityReadPolicy" minOccurs="1" maxOccurs="1" nillable="false"/>
          <element name="outageStatsRead" type="policynet:OutageStatisticsReadPolicy" minOccurs="1" maxOccurs="1" nillable="false"/>
          <element name="demandDataStream" type="policynet:DemandDataStreamPolicy" minOccurs="1" maxOccurs="1" nillable="false"/>
          <element name="meterEvents" type="policynet:MeterEventsPolicy" minOccurs="1" maxOccurs="1" nillable="false"/>
          <element name="wimaxStatistics" type="policynet:WimaxStatisticsPolicy" minOccurs="1" maxOccurs="1" nillable="false"/>
          <element name="dataStream" type="policynet:DataStreamPolicy" minOccurs="1" maxOccurs="1" nillable="false"/>
          <element name="powerQualityProfile" type="policynet:PowerQualityProfilePolicy" minOccurs="1" maxOccurs="1" nillable="false"/>
          <element name="voltageBandMonitoring" type="policynet:VoltageBandMonitoringPolicy" minOccurs="1" maxOccurs="1" nillable="false"/>
          <element name="lossNeutralDetection" type="policynet:LossNeutralDetectionPolicy" minOccurs="1" maxOccurs="1" nillable="false"/>
          <element name="brownOutDetection" type="policynet:BrownOutDetectionPolicy" minOccurs="1" maxOccurs="1" nillable="false"/>
          <element name="serviceDegradationDetection" type="policynet:ServiceDegradationDetectionPolicy" minOccurs="1" maxOccurs="1" nillable="false"/>
          <element name="voltageControl" type="policynet:VoltageControlPolicy" minOccurs="1" maxOccurs="1" nillable="false"/>
          <element name="demandReset" type="policynet:DemandResetPolicy" minOccurs="1" maxOccurs="1" nillable="false"/>
          <element name="registerSnapshotRead" type="policynet:RegisterSnapshotReadPolicy" minOccurs="1" maxOccurs="1" nillable="false"/>
          <element name="billingRead" type="policynet:BillingReadPolicy" minOccurs="1" maxOccurs="1" nillable="false"/>
          <element name="demandRead" type="policynet:DemandReadPolicy" minOccurs="1" maxOccurs="1" nillable="false"/>
        </choice>
      </complexType>
      <complexType name="OnRequestMeterReadType">
        <choice>
          <element name="registerRead" type="policynet:RegisterReadPolicy" minOccurs="1" maxOccurs="1" nillable="false"/>
          <element name="intervalRead" type="policynet:IntervalReadPolicy" minOccurs="1" maxOccurs="1" nillable="false"/>
          <element name="powerQualityRead" type="policynet:PowerQualityReadPolicy" minOccurs="1" maxOccurs="1" nillable="false"/>
          <element name="outageStatsRead" type="policynet:OutageStatisticsReadPolicy" minOccurs="1" maxOccurs="1" nillable="false"/>
          <element name="powerQualityProfile" type="policynet:PowerQualityProfilePolicy" minOccurs="1" maxOccurs="1" nillable="false"/>
          <element name="demandRead" type="policynet:DemandReadPolicy" minOccurs="1" maxOccurs="1" nillable="false"/>
        </choice>
      </complexType>
      <complexType name="MeterControlType">
        <choice>
          <element name="firmwareUpgrade" type="policynet:FirmwareUpgradePolicy" minOccurs="1" maxOccurs="1" nillable="false"/>
          <element name="meterProgram" type="policynet:MeterProgramPolicy" minOccurs="1" maxOccurs="1" nillable="false"/>
          <element name="meterReboot" type="policynet:MeterRebootPolicy" minOccurs="1" maxOccurs="1" nillable="false"/>
          <element name="copsMode" type="policynet:CopsModePolicy" minOccurs="1" maxOccurs="1" nillable="false"/>
          <element name="clockSynchronization" type="policynet:ClockSynchronizationPolicy" minOccurs="1" maxOccurs="1" nillable="false"/>
          <element name="clockSet" type="policynet:ClockSetPolicy" minOccurs="1" maxOccurs="1" nillable="false"/>
          <element name="meterPasswordUpdate" type="policynet:MeterPasswordUpdatePolicy" minOccurs="1" maxOccurs="1" nillable="false"/>
          <element name="deviceDiagnostics" type="policynet:DeviceDiagnosticsPolicy" minOccurs="1" maxOccurs="1" nillable="false"/>
          <element name="deviceCSR" type="policynet:DeviceCertificateSigningReqPolicy" minOccurs="1" maxOccurs="1" nillable="false"/>
          <element name="supplicantConfig" type="policynet:SupplicantConfigPolicy" minOccurs="1" maxOccurs="1" nillable="false"/>
          <element name="radioConfig" type="policynet:RadioConfigPolicy" minOccurs="1" maxOccurs="1" nillable="false"/>
        </choice>
      </complexType>
      <complexType name="DeviceControlType">
        <choice>
          <element name="firmwareUpgrade" type="policynet:FirmwareUpgradePolicy" minOccurs="1" maxOccurs="1" nillable="false"/>
          <element name="softwareUpdate" type="policynet:SoftwareUpdatePolicy" minOccurs="1" maxOccurs="1" nillable="false"/>
          <element name="copsMode" type="policynet:CopsModePolicy" minOccurs="1" maxOccurs="1" nillable="false"/>
          <element name="deviceDiagnostics" type="policynet:DeviceDiagnosticsPolicy" minOccurs="1" maxOccurs="1" nillable="false"/>
          <element name="deviceCSR" type="policynet:DeviceCertificateSigningReqPolicy" minOccurs="1" maxOccurs="1" nillable="false"/>
          <element name="supplicantConfig" type="policynet:SupplicantConfigPolicy" minOccurs="1" maxOccurs="1" nillable="false"/>
          <element name="radioConfig" type="policynet:RadioConfigPolicy" minOccurs="1" maxOccurs="1" nillable="false"/>
          <element name="routerConfig" type="policynet:RouterConfigPolicy" minOccurs="1" maxOccurs="1" nillable="false"/>
          <element name="sshConfig" type="policynet:SSHConfigPolicy" minOccurs="1" maxOccurs="1" nillable="false"/>
          <element name="networkProvisioning" type="policynet:NetworkProvisioningPolicy" minOccurs="1" maxOccurs="1" nillable="false"/>
          <element name="configureMulticastGroup" type="policynet:ConfigureMulticastGroupPolicy" minOccurs="1" maxOccurs="1" nillable="false"/>
          <element name="checkMulticastPerformance" type="policynet:CheckMulticastPerformancePolicy" minOccurs="1" maxOccurs="1" nillable="false"/>
          <element name="cmdh" type="policynet:cmdhPolicy" minOccurs="1" maxOccurs="1" nillable="false"/>
          <element name="sca" type="policynet:scaPolicy" minOccurs="1" maxOccurs="1" nillable="false"/>
          <element name="lteNetworkConfig" type="policynet:lteNetworkConfigPolicy" minOccurs="1" maxOccurs="1" nillable="false"/>
          <element name="location" type="policynet:locationPolicy" minOccurs="1" maxOccurs="1" nillable="false"/>
        </choice>
      </complexType>
      <complexType name="LoadControlType">
        <choice>
          <element name="cpp" type="policynet:CPPPolicy" minOccurs="1" maxOccurs="1" nillable="false"/>
          <element name="pct" type="policynet:PCTPolicy" minOccurs="1" maxOccurs="1" nillable="false"/>
          <element name="scheduledLoadControl" type="policynet:ScheduledLoadControlPolicy" minOccurs="1" maxOccurs="1" nillable="false"/>
          <element name="loadControlOverride" type="policynet:LoadControlOverridePolicy" minOccurs="1" maxOccurs="1" nillable="false"/>
          <element name="loadControlBoost" type="policynet:LoadControlBoostPolicy" minOccurs="1" maxOccurs="1" nillable="false"/>
          <element name="energyServiceOn" type="policynet:EnergyServiceOnPolicy" minOccurs="1" maxOccurs="1" nillable="false"/>
          <element name="energyServiceOff" type="policynet:EnergyServiceOffPolicy" minOccurs="1" maxOccurs="1" nillable="false"/>
          <element name="normalSupplyCapacity" type="policynet:NormalSupplyCapacityPolicy" minOccurs="1" maxOccurs="1" nillable="false"/>
          <element name="emergencySupplyCapacity" type="policynet:EmergencySupplyCapacityPolicy" minOccurs="1" maxOccurs="1" nillable="false"/>
          <element name="directLoadControl" type="policynet:DirectLoadControlPolicy" minOccurs="1" maxOccurs="1" nillable="false"/>
          <element name="directLoadControlOverride" type="policynet:DirectLoadControlOverridePolicy" minOccurs="1" maxOccurs="1" nillable="false"/>
          <element name="activateSupplyCapacityLimiting" type="policynet:ActivateSupplyCapacityLimitingPolicy" minOccurs="1" maxOccurs="1" nillable="false"/>
        </choice>
      </complexType>
      <complexType name="WaterMeterReadType">
        <choice>
          <element name="waterMeterRead" type="policynet:WaterMeterReadPolicy" minOccurs="1" maxOccurs="1" nillable="false"/>
          <element name="waterRegisterRead" type="policynet:WaterRegisterReadPolicy" minOccurs="1" maxOccurs="1" nillable="false"/>
          <element name="waterMeterEvents" type="policynet:WaterMeterEventsPolicy" minOccurs="1" maxOccurs="1" nillable="false"/>
        </choice>
      </complexType>
      <complexType name="GasMeterReadType">
        <choice>
          <element name="gasMeterRead" type="policynet:GasMeterReadPolicy" minOccurs="1" maxOccurs="1" nillable="false"/>
          <element name="gasRegisterRead" type="policynet:GasRegisterReadPolicy" minOccurs="1" maxOccurs="1" nillable="false"/>
          <element name="gasMeterEvents" type="policynet:GasMeterEventsPolicy" minOccurs="1" maxOccurs="1" nillable="false"/>
        </choice>
      </complexType>
      <complexType name="OnRequestWaterMeterReadType">
        <choice>
          <element name="waterMeterRead" type="policynet:WaterMeterReadPolicy" minOccurs="1" maxOccurs="1" nillable="false"/>
          <element name="waterRegisterRead" type="policynet:WaterRegisterReadPolicy" minOccurs="1" maxOccurs="1" nillable="false"/>
        </choice>
      </complexType>
      <complexType name="OnRequestGasMeterReadType">
        <choice>
          <element name="gasMeterRead" type="policynet:GasMeterReadPolicy" minOccurs="1" maxOccurs="1" nillable="false"/>
          <element name="gasRegisterRead" type="policynet:GasRegisterReadPolicy" minOccurs="1" maxOccurs="1" nillable="false"/>
        </choice>
      </complexType>
      <complexType name="PanType">
        <choice>
          <element name="panDeviceIdentification" type="policynet:PanDeviceIdentificationPolicy" minOccurs="1" maxOccurs="1" nillable="false"/>
          <element name="panTextMessage" type="policynet:PanTextMessagePolicy" minOccurs="1" maxOccurs="1" nillable="false"/>
          <element name="panPricingInformation" type="policynet:PanPricingInformationPolicy" minOccurs="1" maxOccurs="1" nillable="false"/>
          <element name="panNetworkProvisioning" type="policynet:PanNetworkProvisioningPolicy" minOccurs="1" maxOccurs="1" nillable="false"/>
          <element name="panDeviceProvisioning" type="policynet:PanDeviceProvisioningPolicy" minOccurs="1" maxOccurs="1" nillable="false"/>
          <element name="panDredControl" type="policynet:PanDredControlPolicy" minOccurs="1" maxOccurs="1" nillable="false"/>
          <element name="panRelayControl" type="policynet:PanRelayControlPolicy" minOccurs="1" maxOccurs="1" nillable="false"/>
        </choice>
      </complexType>
      <complexType name="ServerPolicyType">
        <choice>
          <element name="deviceStateMonitor" type="policynet:DeviceStateMonitorPolicy" minOccurs="1" maxOccurs="1" nillable="false"/>
          <element name="qosProfile" type="policynet:QoSProfilePolicy" minOccurs="1" maxOccurs="1" nillable="false"/>
          <element name="revenueAssurance" type="policynet:RevenueAssurancePolicy" minOccurs="1" maxOccurs="1" nillable="false"/>
          <element name="intervalDataSummaryReportConfig" type="policynet:IntervalDataSummaryReportConfig" minOccurs="1" maxOccurs="1" nillable="false"/>
          <element name="serverCSR" type="policynet:ServerCertificateSigningReqPolicy" minOccurs="1" maxOccurs="1" nillable="false"/>
        </choice>
      </complexType>
      <complexType name="FilterItemString">
        <annotation>
          <documentation>Filter for String type attributes.  Wildcards (*) are allowed in the value when the "Like" or "NotLike" operators are being used</documentation>
        </annotation>
        <sequence/>
        <attribute name="operator" type="policynet:StringOperator" use="optional" default="Equal"/>
        <attribute name="value" type="policynet:deviceAttributeValue" use="optional"/>
      </complexType>
      <complexType name="FilterItemDecimal">
        <annotation>
          <documentation>Filter for Decimal type attributes.</documentation>
        </annotation>
        <sequence/>
        <attribute name="operator" type="policynet:NumericOperator" use="optional" default="Equal"/>
        <attribute name="value" type="xsd:decimal" use="optional"/>
      </complexType>
      <complexType name="FilterItemKey">
        <annotation>
          <documentation>Filter for Key type attributes.  Call getDeviceAttributeValues() to get valid Key / Value mappings</documentation>
        </annotation>
        <sequence/>
        <attribute name="operator" type="policynet:KeyOperator" use="optional" default="Equal"/>
        <attribute name="value" type="xsd:positiveInteger" use="optional"/>
      </complexType>
      <complexType name="FilterItemBoolean">
        <annotation>
          <documentation>Filter for Boolean attributes.  Possible values are "true" or "false".</documentation>
        </annotation>
        <sequence/>
        <attribute name="operator" type="policynet:BooleanOperator" use="optional" default="Equal"/>
        <attribute name="value" type="xsd:boolean" use="optional"/>
      </complexType>
      <complexType name="FilterItemCustom">
        <annotation>
          <documentation>Filter for extended attributes.  Supply attribute name and string value.  Wildcards (*) are allowed in the value when using the Like or NotLike operators.</documentation>
        </annotation>
        <sequence/>
        <attribute name="name" type="xsd:string" use="required"/>
        <attribute name="operator" type="policynet:StringOperator" use="optional" default="Equal"/>
        <attribute name="value" type="xsd:string" use="required"/>
      </complexType>
      <complexType name="DeviceGroupRoleFilterGroup">
        <annotation>
          <documentation>Add one or more role filters and nested filter groups to a DeviceGroupRoleFilterGroup.  Use "And" or "Or" as operator to combine them.  Call getDeviceGroupAttributeValues() to get possible keys / values for the filter items.</documentation>
        </annotation>
        <sequence>
          <element name="utilitySerialNumber" type="policynet:FilterItemString" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          <element name="wanMacAddress" type="policynet:FilterItemString" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          <element name="servicePointId" type="policynet:FilterItemString" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          <element name="operationalStatus" type="policynet:FilterItemKey" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          <element name="bindState" type="policynet:FilterItemKey" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          <element name="linkType" type="policynet:FilterItemKey" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          <element name="mfgSerialNumber" type="policynet:FilterItemString" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          <element name="manufacturer" type="policynet:FilterItemString" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          <element name="model" type="policynet:FilterItemString" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          <element name="serviceSwitch" type="policynet:FilterItemBoolean" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          <element name="serviceSwitchStatus" type="policynet:FilterItemBoolean" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          <element name="operatingMode" type="policynet:FilterItemKey" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          <element name="meterPricingMode" type="policynet:FilterItemString" minOccurs="0" maxOccurs="unbounded" nillable="true">
            <annotation>
              <documentation>value must be of MeterPricingMode type</documentation>
            </annotation>
          </element>
          <element name="hardwareVersion" type="policynet:FilterItemString" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          <element name="loadSwitch" type="policynet:FilterItemBoolean" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          <element name="loadSwitchStatus" type="policynet:FilterItemBoolean" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          <element name="meterCapability" type="policynet:FilterItemKey" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          <element name="loadProfileStatus" type="policynet:FilterItemBoolean" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          <element name="meterIsProvisioned" type="policynet:FilterItemBoolean" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          <element name="firmwareVersion" type="policynet:FilterItemString" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          <element name="meterSwVersion" type="policynet:FilterItemString" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          <element name="streetNo" type="policynet:FilterItemString" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          <element name="streetAddress" type="policynet:FilterItemString" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          <element name="streetType" type="policynet:FilterItemString" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          <element name="city" type="policynet:FilterItemString" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          <element name="stateProv" type="policynet:FilterItemString" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          <element name="postalCode" type="policynet:FilterItemString" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          <element name="XCoordinate" type="policynet:FilterItemDecimal" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          <element name="YCoordinate" type="policynet:FilterItemDecimal" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          <element name="ZCoordinate" type="policynet:FilterItemDecimal" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          <element name="programId" type="policynet:FilterItemString" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          <element name="billingCycleId" type="policynet:FilterItemKey" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          <element name="offCycleRouteId" type="policynet:FilterItemString" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          <element name="customerTypeId" type="policynet:FilterItemKey" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          <element name="customerSizeId" type="policynet:FilterItemKey" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          <element name="baseStationSectorId" type="policynet:FilterItemString" minOccurs="0" maxOccurs="unbounded" nillable="true">
            <annotation>
              <documentation>Six byte colon-separated base station Sector Id.  E.g.,  00:00:21:00:00:0a</documentation>
            </annotation>
          </element>
          <element name="transformerId" type="policynet:FilterItemString" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          <element name="feederId" type="policynet:FilterItemString" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          <element name="mediumVoltageFeederId" type="policynet:FilterItemString" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          <element name="distributorId" type="policynet:FilterItemKey" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          <element name="retailerId" type="policynet:FilterItemKey" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          <element name="waterServiceType" type="policynet:FilterItemKey" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          <element name="sleepTimeFreq" type="policynet:FilterItemDecimal" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          <element name="pulseRate" type="policynet:FilterItemDecimal" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          <element name="phaseType" type="policynet:FilterItemKey" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          <element name="extendedAttribute" type="policynet:FilterItemCustom" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          <element name="espUtilitySerialNumber" type="policynet:FilterItemString" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          <element name="panEui" type="policynet:FilterItemString" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          <element name="panDeviceType" type="policynet:FilterItemKey" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          <element name="panCapability" type="policynet:FilterItemKey" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          <element name="panLabel" type="policynet:FilterItemKey" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          <element name="panAppVersion" type="policynet:FilterItemString" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          <element name="panOptOut" type="policynet:FilterItemBoolean" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          <element name="panNetworkChannel" type="policynet:FilterItemKey" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          <element name="customerId" type="policynet:FilterItemDecimal" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          <element name="form" type="policynet:FilterItemString" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          <element name="currentClass" type="policynet:FilterItemString" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          <element name="billingCycleName" type="policynet:FilterItemString" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          <element name="rateSchedule" type="policynet:FilterItemString" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          <element name="lifeSafety" type="policynet:FilterItemBoolean" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          <element name="subMeter" type="policynet:FilterItemBoolean" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          <element name="filterGroup" type="policynet:DeviceGroupRoleFilterGroup" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
        </sequence>
        <attribute name="operator" type="policynet:GroupOperator" use="optional" default="And"/>
      </complexType>
      <complexType name="Group">
        <sequence/>
        <attribute name="groupId" type="xsd:positiveInteger" use="optional"/>
        <attribute name="name" type="policynet:Name" use="required">
          <annotation>
            <documentation>Group name must be unique.  Use getNameList to interrogate existing group names.</documentation>
          </annotation>
        </attribute>
        <attribute name="description" type="policynet:Description" use="optional"/>
        <attribute name="createDate" type="xsd:dateTime" use="optional"/>
        <attribute name="creatorId" type="xsd:string" use="optional"/>
        <attribute name="lastModifyDate" type="xsd:dateTime" use="optional"/>
        <attribute name="lastModifierId" type="xsd:string" use="optional"/>
        <attribute name="groupType" type="policynet:GroupType" use="required"/>
        <attribute name="memberCount" type="xsd:int" use="optional"/>
        <attribute name="customerId" type="xsd:positiveInteger" use="optional"/>
        <attribute name="customerName" type="xsd:string" use="optional"/>
        <attribute name="systemGenerated" type="xsd:boolean" use="optional"/>
      </complexType>
      <complexType name="DeviceGroup">
        <complexContent>
          <extension base="policynet:Group">
            <sequence>
              <element name="filterGroup" type="policynet:DeviceGroupRoleFilterGroup" minOccurs="0" maxOccurs="1" nillable="true">
                <annotation>
                  <documentation>RoleFilters built from device attributes are retrieved from PolicyNet using getDeviceGroupAttributeValues().  Add one or more role filter items, or nested filter groups to filterGroup.  Filters in a group are combined using the AND or OR operator.</documentation>
                </annotation>
              </element>
              <element name="operationalStatus" type="policynet:OperationalStatus" minOccurs="1" maxOccurs="6"/>
              <element name="devices" type="policynet:Devices" minOccurs="0" maxOccurs="1" nillable="true"/>
            </sequence>
            <attribute name="memberType" type="policynet:DeviceGroupMemberType" use="optional"/>
            <attribute name="groupCategory" type="policynet:DeviceGroupCategory" use="required"/>
            <attribute name="pricingMode" type="policynet:MeterPricingMode" use="optional">
              <annotation>
                <documentation>Only applicable if groupCategory=panPricingGroup</documentation>
              </annotation>
            </attribute>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="PolicyGroup">
        <complexContent>
          <extension base="policynet:Group">
            <sequence>
              <element name="roleFilters" type="xsd:string" minOccurs="0" maxOccurs="unbounded"/>
              <element name="memberPolicyIds" type="xsd:positiveInteger" minOccurs="0" maxOccurs="unbounded"/>
              <element name="memberGroupIds" type="xsd:positiveInteger" minOccurs="0" maxOccurs="unbounded"/>
            </sequence>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="Groups">
        <sequence>
          <element name="group" type="policynet:Group" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
        </sequence>
      </complexType>
      <complexType name="Policies">
        <sequence>
          <element name="policy" type="policynet:Policy" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
        </sequence>
      </complexType>
      <complexType name="DeviceStatus">
        <sequence/>
        <attribute name="utilitySerialNumber" type="policynet:UtilitySerialNumber" use="optional"/>
        <attribute name="energyStatus" type="policynet:EnergyState" use="required"/>
        <attribute name="networkConnectivity" type="policynet:NetworkConnectivity" use="required"/>
        <attribute name="linkType" type="policynet:LinkType" use="required"/>
        <attribute name="broadbandEnabled" type="xsd:boolean" use="optional"/>
        <attribute name="signalStrength" type="policynet:SignalStrength" use="required"/>
        <attribute name="serviceSwitchStatus" type="xsd:boolean" use="optional"/>
        <attribute name="loadSwitchStatus" type="xsd:boolean" use="optional"/>
        <attribute name="operationalStatus" type="policynet:OperationalStatus" use="optional"/>
        <attribute name="bindState" type="policynet:BindState" use="optional"/>
      </complexType>
      <complexType name="CdpAttributes">
        <sequence/>
        <attribute name="imsi" type="policynet:Imsi" use="optional"/>
        <attribute name="imei" type="policynet:Imei" use="optional"/>
        <attribute name="subscriptionState" type="xsd:string" use="optional"/>
        <attribute name="bandwidthConsumed" type="xsd:unsignedInt" use="optional"/>
        <attribute name="lastTrace" type="xsd:string" use="optional"/>
        <attribute name="lastSyncTime" type="policynet:deviceLocalTime" use="optional"/>
        <attribute name="msisdn" type="policynet:Msisdn" use="optional"/>
        <attribute name="min" type="policynet:min" use="optional"/>
        <attribute name="iccid" type="xsd:string" use="optional"/>
        <attribute name="connected" type="xsd:boolean" use="optional"/>
        <attribute name="createdDate" type="policynet:deviceLocalTime" use="optional"/>
        <attribute name="lastActivationDate" type="policynet:deviceLocalTime" use="optional"/>
        <attribute name="lastConnectionDate" type="policynet:deviceLocalTime" use="optional"/>
        <attribute name="billingCycleEndDate" type="policynet:deviceLocalTime" use="optional"/>
      </complexType>
      <complexType name="Device">
        <sequence>
          <element name="policies" type="policynet:Policies" minOccurs="0" maxOccurs="1" nillable="true"/>
          <element name="groups" type="policynet:Groups" minOccurs="0" maxOccurs="1" nillable="true"/>
          <element name="deviceStatus" type="policynet:DeviceStatus" minOccurs="0" maxOccurs="1" nillable="true"/>
          <element name="servicePoint" type="policynet:ServicePoint" minOccurs="0" maxOccurs="1" nillable="true"/>
          <element name="cdpAttributes" type="policynet:CdpAttributes" minOccurs="0" maxOccurs="1" nillable="true"/>
        </sequence>
        <attribute name="wanMacAddress" type="policynet:macAddress" use="optional"/>
        <attribute name="cdmaNai" type="policynet:nai" use="optional"/>
        <attribute name="cdmaMdn" type="policynet:mdn" use="optional"/>
        <attribute name="cdmaMsid" type="policynet:msid" use="optional"/>
        <attribute name="cdmaSid" type="policynet:sid" use="optional"/>
        <attribute name="cdmaNid" type="policynet:nid" use="optional"/>
        <attribute name="cdmaBsid" type="policynet:bsid" use="optional"/>
        <attribute name="cdmaRat" type="policynet:rat" use="optional"/>
        <attribute name="linkType" type="policynet:LinkType" use="optional"/>
        <attribute name="commsRssi" type="xsd:decimal" use="optional"/>
        <attribute name="commsCinr" type="xsd:decimal" use="optional"/>
        <attribute name="utilitySerialNumber" type="policynet:UtilitySerialNumber" use="required"/>
        <attribute name="parentUSN" type="xsd:string" use="optional"/>
        <attribute name="manufacturer" type="xsd:string" use="optional"/>
        <attribute name="model" type="xsd:string" use="optional"/>
        <attribute name="moduleType" type="xsd:string" use="optional"/>
        <attribute name="mfgSerialNumber" type="xsd:string" use="optional"/>
        <attribute name="deviceType" type="policynet:DeviceType" use="required"/>
        <attribute name="parentDeviceType" type="policynet:DeviceType" use="optional"/>
        <attribute name="parentNetworkConnectivity" type="policynet:NetworkConnectivity" use="optional"/>
        <attribute name="copsConnectionMode" type="policynet:CopsConnectionMode" use="optional"/>
        <attribute name="firmwareVersion" type="xsd:string" use="optional"/>
        <attribute name="applicationFirmwareVersion" type="xsd:string" use="optional"/>
        <attribute name="configVersion" type="xsd:string" use="optional"/>
        <attribute name="firmwarePackageId" type="xsd:positiveInteger" use="optional"/>
        <attribute name="hardwareVersion" type="xsd:string" use="optional"/>
        <attribute name="ipAddress" type="xsd:string" use="optional"/>
        <attribute name="lastReboot" type="xsd:string" use="optional"/>
        <attribute name="baseStationSectorId" type="xsd:string" use="optional"/>
        <attribute name="parentBaseStationSectorId" type="xsd:string" use="optional"/>
        <attribute name="activeBank" type="xsd:int" use="optional"/>
        <attribute name="qosProfileId" type="xsd:positiveInteger" use="optional"/>
        <attribute name="qosProfileName" type="xsd:string" use="optional"/>
        <attribute name="servicePointId" type="policynet:ServicePointId" use="optional"/>
        <attribute name="clockState" type="policynet:MeterClockState" use="optional"/>
        <attribute name="lastRequestTime" type="xsd:dateTime" use="optional"/>
        <attribute name="deviceSystemTime" type="policynet:deviceLocalTime" use="optional"/>
        <attribute name="meterTime" type="policynet:deviceLocalTime" use="optional"/>
        <attribute name="customerId" type="xsd:positiveInteger" use="optional"/>
        <attribute name="customerName" type="xsd:string" use="optional"/>
        <attribute name="comments" type="xsd:string" use="optional"/>
        <attribute name="networkType" type="xsd:string" use="optional"/>
        <attribute name="batteryVoltage" type="xsd:decimal" use="optional"/>
        <attribute name="remainingBatteryCapacity" type="xsd:decimal" use="optional"/>
        <attribute name="temperature" type="xsd:decimal" use="optional"/>
        <attribute name="reportingFrequency" type="xsd:positiveInteger" use="optional"/>
        <attribute name="propertyNumber" type="xsd:string" use="optional"/>
      </complexType>
      <complexType name="SoftSwitchI210c">
        <sequence/>
        <attribute name="type" type="policynet:SoftSwitchTypeI210c" use="required"/>
        <attribute name="status" type="policynet:SoftSwitchStatus" use="optional"/>
      </complexType>
      <complexType name="SoftSwitchConfigI210c">
        <sequence>
          <element name="softSwitch" type="policynet:SoftSwitchI210c" minOccurs="0" maxOccurs="256" nillable="true"/>
        </sequence>
      </complexType>
      <complexType name="SoftSwitchKV2c">
        <sequence/>
        <attribute name="type" type="policynet:SoftSwitchTypeKV2c" use="required"/>
        <attribute name="status" type="policynet:SoftSwitchStatus" use="optional"/>
      </complexType>
      <complexType name="SoftSwitchConfigKV2c">
        <sequence>
          <element name="softSwitch" type="policynet:SoftSwitchKV2c" minOccurs="0" maxOccurs="256" nillable="true"/>
        </sequence>
      </complexType>
      <complexType name="SoftSwitchConfig">
        <choice>
          <element name="i210c" type="policynet:SoftSwitchConfigI210c" minOccurs="1" maxOccurs="1" nillable="false"/>
          <element name="kv2c" type="policynet:SoftSwitchConfigKV2c" minOccurs="1" maxOccurs="1" nillable="false"/>
        </choice>
      </complexType>
      <complexType name="Meter">
        <complexContent>
          <extension base="policynet:Device">
            <sequence>
              <element name="softSwitchConfig" type="policynet:SoftSwitchConfig" minOccurs="0" maxOccurs="1" nillable="true"/>
            </sequence>
            <attribute name="programId" type="xsd:string" use="optional"/>
            <attribute name="programName" type="xsd:string" use="optional"/>
            <attribute name="rippleProgramId" type="xsd:string" use="optional"/>
            <attribute name="rippleProgramName" type="xsd:string" use="optional"/>
            <attribute name="phaseType" type="policynet:MeterPhaseType" use="optional"/>
            <attribute name="meterType" type="policynet:MeterType" use="optional"/>
            <attribute name="operatingMode" type="policynet:MeterMode" use="optional"/>
            <attribute name="meterCapability" type="policynet:MeterCapability" use="optional"/>
            <attribute name="serviceSwitch" type="xsd:boolean" use="optional"/>
            <attribute name="serviceSwitchStatus" type="xsd:boolean" use="optional"/>
            <attribute name="loadSwitch" type="xsd:boolean" use="optional"/>
            <attribute name="loadSwitchStatus" type="xsd:boolean" use="optional"/>
            <attribute name="meterHwVersion" type="xsd:string" use="optional"/>
            <attribute name="meterSwVersion" type="xsd:string" use="optional"/>
            <attribute name="meterSwPackageId" type="xsd:positiveInteger" use="optional"/>
            <attribute name="sgcSerialNumber" type="policynet:sgcSerialNumber" use="optional"/>
            <attribute name="panState" type="policynet:PanState" use="optional"/>
            <attribute name="formNumber" type="xsd:string" use="optional"/>
            <attribute name="frequency" type="xsd:int" use="optional">
              <annotation>
                <documentation>is E_FREQ from ANSI C12.19</documentation>
              </annotation>
            </attribute>
            <attribute name="baseType" type="xsd:int" use="optional">
              <annotation>
                <documentation>is E_BASE_TYPE from ANSI C12.19</documentation>
              </annotation>
            </attribute>
            <attribute name="voltage" type="xsd:int" use="optional">
              <annotation>
                <documentation>is E_ELEMENT_VOLTS from ANSI C12.19</documentation>
              </annotation>
            </attribute>
            <attribute name="numberOfElements" type="xsd:int" use="optional">
              <annotation>
                <documentation>is E_NO_OF_ELEMENTS from ANSI C12.19</documentation>
              </annotation>
            </attribute>
            <attribute name="currentClass" type="xsd:string" use="optional"/>
            <attribute name="loadProfileStatus" type="xsd:boolean" use="optional"/>
            <attribute name="loadControlEligible" type="xsd:boolean" use="optional"/>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="SgModem">
        <complexContent>
          <extension base="policynet:Device">
            <sequence>
              <element name="configurations" type="policynet:RouterConfigurations" minOccurs="1" maxOccurs="1"/>
            </sequence>
            <attribute name="operatingMode" type="policynet:ModemMode" use="optional"/>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="AutoTcu">
        <complexContent>
          <extension base="policynet:Device">
            <sequence/>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="Gateway">
        <complexContent>
          <extension base="policynet:Device">
            <sequence/>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="PanDeviceStatus">
        <sequence/>
        <attribute name="operationalStatus" type="policynet:OperationalStatus" use="optional"/>
        <attribute name="bindState" type="policynet:BindState" use="optional"/>
      </complexType>
      <complexType name="PanDevice">
        <complexContent>
          <extension base="policynet:Device">
            <sequence>
              <element name="description" type="policynet:PanDescription" minOccurs="0" maxOccurs="unbounded"/>
              <element name="capability" type="policynet:PanCapability" minOccurs="0" maxOccurs="unbounded"/>
            </sequence>
            <attribute name="eui" type="policynet:PanEui" use="required"/>
            <attribute name="espUtilitySerialNumber" type="policynet:UtilitySerialNumber" use="required"/>
            <attribute name="installCode" type="policynet:PanInstallCode" use="required"/>
            <attribute name="version" type="xsd:string" use="required">
              <annotation>
                <documentation>version is deprecated in 2.6.  Please use firmwareVersion instead.</documentation>
              </annotation>
            </attribute>
            <attribute name="powerMode" type="policynet:PanPowerMode" use="required"/>
            <attribute name="installationLabel" type="xsd:string" use="optional"/>
            <attribute name="status" type="policynet:PanStatus" use="required"/>
            <attribute name="dutyCycleOffPercent" type="policynet:percentValue" use="optional">
              <annotation>
                <documentation>IMPORTANT:  The attribute name dutyCycleOffPercent is a misnomer and should be dutyCyclePercent i.e. the attribute specifies the percentage of time for the duty cycle.  So a value of 60 means a 60% duty cycle, therefore the DRED would be active (power is ON) 60% of the time and OFF 40% of the time.</documentation>
              </annotation>
            </attribute>
            <attribute name="loadSizeKva" type="xsd:decimal" use="optional"/>
            <attribute name="loadControlParticipation" type="policynet:LoadControlParticipation" use="optional"/>
            <attribute name="loadControlStatus" type="policynet:LoadControlStatus" use="optional"/>
            <attribute name="networkId" type="policynet:PanNetworkId" use="required"/>
            <attribute name="channelNumber" type="xsd:positiveInteger" use="optional"/>
            <attribute name="circuitId" type="policynet:PanCircuitId" use="optional"/>
            <attribute name="circuitCount" type="xsd:positiveInteger" use="optional"/>
            <attribute name="relayState" type="policynet:SwitchAction" use="optional"/>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="GasMeter">
        <complexContent>
          <extension base="policynet:PanDevice">
            <sequence/>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="WaterMeter">
        <complexContent>
          <extension base="policynet:PanDevice">
            <sequence/>
            <attribute name="mfgSerialNumber" type="xsd:string" use="optional"/>
            <attribute name="sleepTimeFreq" type="xsd:positiveInteger" use="required"/>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="SgDevice">
        <choice>
          <element name="meter" type="policynet:Meter" minOccurs="1" maxOccurs="1" nillable="false"/>
          <element name="sgModem" type="policynet:SgModem" minOccurs="1" maxOccurs="1" nillable="false"/>
          <element name="waterMeter" type="policynet:WaterMeter" minOccurs="1" maxOccurs="1" nillable="false"/>
          <element name="gasMeter" type="policynet:GasMeter" minOccurs="1" maxOccurs="1" nillable="false"/>
          <element name="panDevice" type="policynet:PanDevice" minOccurs="1" maxOccurs="1" nillable="false"/>
          <element name="autoTcu" type="policynet:AutoTcu" minOccurs="1" maxOccurs="1" nillable="false"/>
          <element name="gateway" type="policynet:Gateway" minOccurs="1" maxOccurs="1" nillable="false"/>
        </choice>
      </complexType>
      <complexType name="SmartGridCard">
        <sequence>
          <element name="wanMacAddress" type="policynet:macAddress" minOccurs="1" maxOccurs="unbounded"/>
          <element name="hanMacAddress" type="policynet:hanMacAddress" minOccurs="1" maxOccurs="unbounded"/>
        </sequence>
        <attribute name="boardSerialNumber" type="policynet:boardSerialNumber" use="required"/>
        <attribute name="sgcSerialNumber" type="policynet:sgcSerialNumber" use="required"/>
        <attribute name="mfgSerialNumber" type="xsd:string" use="optional"/>
        <attribute name="meterUtilitySerialNumber" type="policynet:UtilitySerialNumber" use="optional"/>
        <attribute name="operationalStatus" type="policynet:OperationalStatus" use="optional"/>
        <attribute name="bindState" type="policynet:BindState" use="optional"/>
        <attribute name="linkType" type="policynet:LinkType" use="optional"/>
        <attribute name="hardwareVersion" type="xsd:string" use="optional"/>
      </complexType>
      <complexType name="OperatingMode">
        <choice>
          <element name="meterMode" type="policynet:MeterMode" minOccurs="1" maxOccurs="1"/>
          <element name="modemMode" type="policynet:ModemMode" minOccurs="1" maxOccurs="1"/>
        </choice>
      </complexType>
      <complexType name="CustomDeviceAttribute">
        <sequence/>
        <attribute name="utilitySerialNumber" type="policynet:UtilitySerialNumber" use="required"/>
        <attribute name="attributeName" type="policynet:deviceAttributeName" use="required"/>
        <attribute name="attributeValue" type="policynet:deviceAttributeValue" use="required"/>
      </complexType>
      <complexType name="KeyValuePair">
        <sequence>
          <element name="key" type="xsd:string" minOccurs="1" maxOccurs="1"/>
          <element name="value" type="xsd:string" minOccurs="1" maxOccurs="1"/>
        </sequence>
      </complexType>
      <complexType name="AttributeValue">
        <sequence>
          <element name="attribute" type="xsd:string" minOccurs="1" maxOccurs="1"/>
          <element name="values" type="policynet:KeyValuePair" minOccurs="0" maxOccurs="unbounded"/>
        </sequence>
      </complexType>
      <complexType name="KeyValuePairAttribute">
        <sequence/>
        <attribute name="key" type="xsd:string" use="required"/>
        <attribute name="value" type="xsd:string" use="required"/>
      </complexType>
      <complexType name="ExceptionType">
        <sequence>
          <element name="info" type="xsd:string" minOccurs="0" maxOccurs="1" nillable="true">
            <annotation>
              <documentation>Additional info on the exception that occurred may be included in this info string.  The presence of and contents of the info string depends on the exception that occured.</documentation>
            </annotation>
          </element>
          <element name="property" type="policynet:KeyValuePairAttribute" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
        </sequence>
        <attribute name="code" type="xsd:int" use="required"/>
        <attribute name="description" type="xsd:string" use="required"/>
      </complexType>
      <complexType name="deviceAssetResponseRow">
        <sequence>
          <element name="utilitySerialNumber" type="policynet:UtilitySerialNumber" minOccurs="1" maxOccurs="1"/>
        </sequence>
      </complexType>
      <complexType name="ScaledQty">
        <sequence/>
        <attribute name="v" type="xsd:decimal" use="required">
          <annotation>
            <documentation>Scaled reading Value</documentation>
          </annotation>
        </attribute>
        <attribute name="u" type="xsd:string" use="required">
          <annotation>
            <documentation>Unit of Measure with timebase and mulitplier applied (kWh, etc)</documentation>
          </annotation>
        </attribute>
      </complexType>
      <complexType name="RawQty">
        <sequence/>
        <attribute name="v" type="xsd:decimal" use="required">
          <annotation>
            <documentation>Raw reading Value</documentation>
          </annotation>
        </attribute>
        <attribute name="u" type="policynet:c1219UomIdCode" use="optional">
          <annotation>
            <documentation>Optional ANSI C12.19 Unit of Measure ID Code</documentation>
          </annotation>
        </attribute>
        <attribute name="tb" type="policynet:c1219Timebase" use="optional">
          <annotation>
            <documentation>Optional ANSI C12.19 Unit of Measure Timebase</documentation>
          </annotation>
        </attribute>
        <attribute name="m" type="policynet:c1219Multiplier" use="optional">
          <annotation>
            <documentation>Optional ANSI C12.19 Unit of Measure Multiplier</documentation>
          </annotation>
        </attribute>
      </complexType>
      <complexType name="MaximumDemand">
        <complexContent>
          <extension base="policynet:ScaledQty">
            <sequence/>
            <attribute name="t" type="policynet:deviceLocalTime" use="optional">
              <annotation>
                <documentation>Timestamp of MSP maximum demand</documentation>
              </annotation>
            </attribute>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="CoincidentValue">
        <complexContent>
          <extension base="policynet:ScaledQty">
            <sequence/>
            <attribute name="coincidentNumber" type="policynet:CoincidentNumber" use="required">
              <annotation>
                <documentation>Coincident Number</documentation>
              </annotation>
            </attribute>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="Register">
        <sequence>
          <element name="S" type="policynet:ScaledQty" minOccurs="0" maxOccurs="1" nillable="true">
            <annotation>
              <documentation>Summation register</documentation>
            </annotation>
          </element>
          <element name="MD" type="policynet:MaximumDemand" minOccurs="0" maxOccurs="1" nillable="true">
            <annotation>
              <documentation>Maximum Demand register</documentation>
            </annotation>
          </element>
          <element name="CD" type="policynet:ScaledQty" minOccurs="0" maxOccurs="1" nillable="true">
            <annotation>
              <documentation>Cumulative Demand register</documentation>
            </annotation>
          </element>
          <element name="CCD" type="policynet:ScaledQty" minOccurs="0" maxOccurs="1" nillable="true">
            <annotation>
              <documentation>Continuous Cumulative Demand register</documentation>
            </annotation>
          </element>
          <element name="Coincident" type="policynet:CoincidentValue" minOccurs="0" maxOccurs="256" nillable="true">
            <annotation>
              <documentation>Value of a measured quantity coincident to the selected demands.</documentation>
            </annotation>
          </element>
        </sequence>
        <attribute name="id" type="xsd:string" use="optional">
          <annotation>
            <documentation>Register display ID if it is supported and also set</documentation>
          </annotation>
        </attribute>
        <attribute name="n" type="policynet:RegisterNumber" use="required"/>
      </complexType>
      <complexType name="Tier">
        <sequence>
          <element name="R" type="policynet:Register" minOccurs="1" maxOccurs="256" nillable="false"/>
        </sequence>
        <attribute name="n" type="policynet:TierNumber" use="required"/>
        <attribute name="f" type="xsd:string" use="optional">
          <annotation>
            <documentation>Tier Function (TOU, CPP, etc)</documentation>
          </annotation>
        </attribute>
      </complexType>
      <complexType name="MaximumDemandMSP">
        <complexContent>
          <extension base="policynet:ScaledQty">
            <sequence/>
            <attribute name="t" type="xsd:dateTime" use="optional"/>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="RegisterMSP">
        <sequence>
          <element name="S" type="policynet:ScaledQty" minOccurs="0" maxOccurs="1" nillable="true"/>
          <element name="MD" type="policynet:MaximumDemandMSP" minOccurs="0" maxOccurs="1" nillable="true"/>
          <element name="CD" type="policynet:ScaledQty" minOccurs="0" maxOccurs="1" nillable="true"/>
          <element name="CCD" type="policynet:ScaledQty" minOccurs="0" maxOccurs="1" nillable="true"/>
          <element name="Coincident" type="policynet:CoincidentValue" minOccurs="0" maxOccurs="256" nillable="true"/>
        </sequence>
        <attribute name="id" type="xsd:string" use="optional"/>
        <attribute name="n" type="policynet:RegisterNumber" use="required"/>
      </complexType>
      <complexType name="TierMSP">
        <sequence>
          <element name="R" type="policynet:RegisterMSP" minOccurs="1" maxOccurs="256" nillable="false"/>
        </sequence>
        <attribute name="n" type="policynet:TierNumber" use="required"/>
        <attribute name="f" type="xsd:string" use="optional"/>
      </complexType>
      <complexType name="RegisterData">
        <sequence>
          <element name="Tr" type="policynet:Tier" minOccurs="1" maxOccurs="256" nillable="false"/>
        </sequence>
        <attribute name="s" type="xsd:string" use="optional">
          <annotation>
            <documentation>Optional Season of year of the reading</documentation>
          </annotation>
        </attribute>
        <attribute name="t" type="policynet:deviceLocalTime" use="required">
          <annotation>
            <documentation>Timestamp of reading</documentation>
          </annotation>
        </attribute>
        <attribute name="ct" type="xsd:dateTime" use="required">
          <annotation>
            <documentation>Timestamp of creation</documentation>
          </annotation>
        </attribute>
        <attribute name="dR" type="xsd:boolean" use="required">
          <annotation>
            <documentation>Indicates if Demand Reset was performed after the reading</documentation>
          </annotation>
        </attribute>
        <attribute name="dis" type="policynet:RegisterDisplayIdSupportType" use="optional">
          <annotation>
            <documentation>Describes the current type of support for Register Display Id.  Note: If "notSupported", either the meter firmware or SmartNOS firmware (or BOTH) does not support Register Display Id function.  If not specified, it implies "notSupported".  The "id" element in type Register SHOULD NOT appear unless the register display ID support type is "supported"</documentation>
          </annotation>
        </attribute>
      </complexType>
      <complexType name="RegisterDataMSP">
        <sequence>
          <element name="Tr" type="policynet:TierMSP" minOccurs="1" maxOccurs="256" nillable="false"/>
        </sequence>
        <attribute name="s" type="xsd:string" use="optional"/>
        <attribute name="t" type="xsd:dateTime" use="required"/>
        <attribute name="ct" type="xsd:dateTime" use="required"/>
        <attribute name="dR" type="xsd:boolean" use="required"/>
        <attribute name="dis" type="policynet:RegisterDisplayIdSupportType" use="optional"/>
      </complexType>
      <complexType name="c1219ChannelStatus">
        <sequence/>
        <attribute name="overflow" type="xsd:boolean" use="optional"/>
        <attribute name="partialInterval" type="xsd:boolean" use="optional"/>
        <attribute name="longInterval" type="xsd:boolean" use="optional"/>
        <attribute name="skippedInterval" type="xsd:boolean" use="optional"/>
        <attribute name="testModeData" type="xsd:boolean" use="optional"/>
      </complexType>
      <complexType name="IntervalChan">
        <complexContent>
          <extension base="policynet:ScaledQty">
            <sequence>
              <element name="s" type="policynet:c1219ChannelStatus" minOccurs="0" maxOccurs="1" nillable="true">
                <annotation>
                  <documentation>Optional ANSI C12.19 Channel Status</documentation>
                </annotation>
              </element>
            </sequence>
            <attribute name="n" type="xsd:int" use="required">
              <annotation>
                <documentation>Channel Number</documentation>
              </annotation>
            </attribute>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="ValidatedIntervalChan">
        <complexContent>
          <extension base="policynet:IntervalChan">
            <sequence/>
            <attribute name="dailyCheckSumValue" type="xsd:decimal" use="optional">
              <annotation>
                <documentation>Optional Check Sum value corresponding to this Interval Channel and Unit-of-Measure.  Check Sum approximately equals the last 24 hours worth of readings from this Interval Channel.  The Check Sum Unit-of-Measure equals the corresponding Interval Channel Unit-of-Measure.  The Check Sum is only valid when corresponding to a Midnight Interval Timestamp.</documentation>
              </annotation>
            </attribute>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="c1219ItvlStatus">
        <sequence/>
        <attribute name="dst" type="xsd:boolean" use="optional">
          <annotation>
            <documentation>Daylight Savings Time In Effect during interval</documentation>
          </annotation>
        </attribute>
        <attribute name="pf" type="xsd:boolean" use="optional">
          <annotation>
            <documentation>Power Failure occurred during interval</documentation>
          </annotation>
        </attribute>
        <attribute name="crf" type="xsd:boolean" use="optional">
          <annotation>
            <documentation>Clock Reset Forward during interval</documentation>
          </annotation>
        </attribute>
        <attribute name="crb" type="xsd:boolean" use="optional">
          <annotation>
            <documentation>Clock Reset Backward during interval</documentation>
          </annotation>
        </attribute>
      </complexType>
      <complexType name="Interval">
        <sequence>
          <choice>
            <element name="c" type="policynet:IntervalChan" minOccurs="1" maxOccurs="256"/>
            <element name="ValidatedIntervalChannel" type="policynet:ValidatedIntervalChan" minOccurs="1" maxOccurs="256"/>
          </choice>
          <element name="s" type="policynet:c1219ItvlStatus" minOccurs="0" maxOccurs="1" nillable="true">
            <annotation>
              <documentation>Optional ANSI C12.19 common Interval Status</documentation>
            </annotation>
          </element>
        </sequence>
        <attribute name="t" type="policynet:deviceLocalTime" use="optional">
          <annotation>
            <documentation>Interval Timestamp may be optionally included with every interval</documentation>
          </annotation>
        </attribute>
        <attribute name="ct" type="xsd:dateTime" use="required">
          <annotation>
            <documentation>Interval Created Timestamp</documentation>
          </annotation>
        </attribute>
        <attribute name="rt" type="xsd:dateTime" use="required">
          <annotation>
            <documentation>Read Time Timestamp</documentation>
          </annotation>
        </attribute>
        <attribute name="lpSetNumber" type="policynet:LpSetNumber" use="optional"/>
      </complexType>
      <complexType name="IntervalData">
        <sequence>
          <element name="I" type="policynet:Interval" minOccurs="1" maxOccurs="unbounded" nillable="false"/>
        </sequence>
        <attribute name="s" type="policynet:deviceLocalTime" use="optional">
          <annotation>
            <documentation>Optional Start Time of the time series of readings</documentation>
          </annotation>
        </attribute>
        <attribute name="e" type="policynet:deviceLocalTime" use="optional">
          <annotation>
            <documentation>Optional End Time of the time series of readings</documentation>
          </annotation>
        </attribute>
        <attribute name="c" type="policynet:chronology" use="optional">
          <annotation>
            <documentation>Optional Chronology indicating the order of readings, if used with startTime and endTime</documentation>
          </annotation>
        </attribute>
        <attribute name="w" type="policynet:IntervalWidth" use="optional">
          <annotation>
            <documentation>Optional Interval Width (minutes) if used with startTime and endTime</documentation>
          </annotation>
        </attribute>
        <attribute name="readTimeLocal" type="policynet:deviceLocalTime" use="required"/>
      </complexType>
      <complexType name="Phase">
        <complexContent>
          <extension base="policynet:ScaledQty">
            <sequence/>
            <attribute name="n" type="policynet:PhaseNumber" use="required">
              <annotation>
                <documentation>Phase Number</documentation>
              </annotation>
            </attribute>
            <attribute name="pf" type="policynet:PowerFactor" use="optional">
              <annotation>
                <documentation>Optional Power Factor in percent</documentation>
              </annotation>
            </attribute>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="PowerQualityData">
        <sequence>
          <element name="P" type="policynet:Phase" minOccurs="1" maxOccurs="3" nillable="false"/>
        </sequence>
        <attribute name="t" type="policynet:deviceLocalTime" use="required">
          <annotation>
            <documentation>Timestamp of power quality reading</documentation>
          </annotation>
        </attribute>
      </complexType>
      <complexType name="PowerFactorEx">
        <sequence/>
        <attribute name="value" type="xsd:double" use="required">
          <annotation>
            <documentation>between 0.0 and 1.0 inclusive.</documentation>
          </annotation>
        </attribute>
        <attribute name="quadrant" type="policynet:PowerFactorQuadrant" use="required"/>
      </complexType>
      <complexType name="PowerQualityProfileReadingPhase">
        <sequence>
          <element name="powerFactor" type="policynet:PowerFactorEx" minOccurs="0" maxOccurs="1" nillable="true">
            <annotation>
              <documentation>Optional Power Factor</documentation>
            </annotation>
          </element>
        </sequence>
        <attribute name="phaseIdentifier" type="policynet:PhaseNumber" use="required"/>
        <attribute name="voltage" type="xsd:double" use="optional">
          <annotation>
            <documentation>Optional voltage in volts.</documentation>
          </annotation>
        </attribute>
        <attribute name="current" type="xsd:double" use="optional">
          <annotation>
            <documentation>Optional current in amps.</documentation>
          </annotation>
        </attribute>
        <attribute name="demand" type="xsd:double" use="optional">
          <annotation>
            <documentation>Optional current in kW.</documentation>
          </annotation>
        </attribute>
      </complexType>
      <complexType name="PowerQualityProfileReadingElement">
        <sequence>
          <element name="phase" type="policynet:PowerQualityProfileReadingPhase" minOccurs="1" maxOccurs="3" nillable="false"/>
        </sequence>
        <attribute name="elementNumber" type="policynet:MeterElementNumber" use="required"/>
      </complexType>
      <complexType name="PowerQualityProfileReading">
        <sequence>
          <element name="totalPowerFactor" type="policynet:PowerFactorEx" minOccurs="0" maxOccurs="1" nillable="true"/>
          <element name="element" type="policynet:PowerQualityProfileReadingElement" minOccurs="1" maxOccurs="3" nillable="false"/>
        </sequence>
        <attribute name="readTime" type="policynet:deviceLocalTime" use="required">
          <annotation>
            <documentation>Timestamp of power quality reading</documentation>
          </annotation>
        </attribute>
        <attribute name="powerFrequency" type="xsd:double" use="optional">
          <annotation>
            <documentation>Optional line-frequency in Hertz (cycles/second).</documentation>
          </annotation>
        </attribute>
        <attribute name="aggDemand" type="xsd:double" use="optional"/>
      </complexType>
      <complexType name="reportParams">
        <sequence/>
        <attribute name="beginDate" type="policynet:deviceLocalTime" use="optional"/>
        <attribute name="endDate" type="policynet:deviceLocalTime" use="optional"/>
        <attribute name="utilitySerialNumber" type="policynet:UtilitySerialNumber" use="optional"/>
        <attribute name="servicePointId" type="policynet:ServicePointId" use="optional"/>
        <attribute name="policyId" type="xsd:positiveInteger" use="optional"/>
        <attribute name="customerId" type="xsd:positiveInteger" use="optional"/>
        <attribute name="aggregateType" type="policynet:AggregateType" use="optional"/>
        <attribute name="groupId" type="xsd:positiveInteger" use="optional"/>
        <attribute name="lpInterval" type="xsd:positiveInteger" use="optional"/>
        <attribute name="firstRow" type="xsd:int" use="required"/>
        <attribute name="lastRow" type="xsd:int" use="required"/>
      </complexType>
      <complexType name="VoltageBand">
        <annotation>
          <documentation>NOTE:  At least one of voltageMin or voltageMax must be present at least.</documentation>
        </annotation>
        <sequence/>
        <attribute name="bandId" type="xsd:positiveInteger" use="required"/>
        <attribute name="bandName" type="policynet:Name" use="required"/>
        <attribute name="voltageMin" type="xsd:positiveInteger" use="optional"/>
        <attribute name="voltageMax" type="xsd:positiveInteger" use="optional"/>
        <attribute name="color" type="policynet:color" use="optional"/>
      </complexType>
      <complexType name="VoltageBandSetting">
        <sequence>
          <element name="band" type="policynet:VoltageBand" minOccurs="1" maxOccurs="1"/>
        </sequence>
      </complexType>
      <complexType name="VoltageBandSettings">
        <annotation>
          <documentation>NOTE:  Voltage bands MUST follow the following rules:  1.  Voltage bands must be contiguous.  2.  At least one of voltageMin or voltageMax must be present in each voltage band.  3.  Voltage band values must be within supported ranges of all meters in the system.</documentation>
        </annotation>
        <sequence>
          <element name="voltageBandSetting" type="policynet:VoltageBandSetting" minOccurs="1" maxOccurs="256" nillable="false"/>
        </sequence>
      </complexType>
      <complexType name="OutageStat">
        <sequence/>
        <attribute name="t" type="policynet:deviceLocalTime" use="required">
          <annotation>
            <documentation>Timestamp of outage statistics reading</documentation>
          </annotation>
        </attribute>
        <attribute name="co" type="xsd:int" use="required">
          <annotation>
            <documentation>Cumulative Outage time (in seconds) for the meter</documentation>
          </annotation>
        </attribute>
        <attribute name="no" type="xsd:int" use="required">
          <annotation>
            <documentation>Total Number of Outages detected by the meter</documentation>
          </annotation>
        </attribute>
        <attribute name="lo" type="policynet:deviceLocalTime" use="required">
          <annotation>
            <documentation>Timestamp of the Last Outage detected by the meter</documentation>
          </annotation>
        </attribute>
        <attribute name="sm" type="xsd:int" use="required">
          <annotation>
            <documentation>Total number (in minutes) of all Sustained Interruptions</documentation>
          </annotation>
        </attribute>
        <attribute name="si" type="xsd:int" use="required">
          <annotation>
            <documentation>Total number of IEEE Sustained Interruptions</documentation>
          </annotation>
        </attribute>
        <attribute name="mi" type="xsd:int" use="required">
          <annotation>
            <documentation>Total number of IEEE Momentary Interruptions</documentation>
          </annotation>
        </attribute>
        <attribute name="me" type="xsd:int" use="required">
          <annotation>
            <documentation>Total number of IEEE Momentary Events</documentation>
          </annotation>
        </attribute>
      </complexType>
      <complexType name="OutageStatsData">
        <sequence>
          <element name="O" type="policynet:OutageStat" minOccurs="1" maxOccurs="unbounded" nillable="false"/>
        </sequence>
      </complexType>
      <complexType name="Event">
        <sequence>
          <element name="M" type="xsd:string" minOccurs="0" maxOccurs="1" nillable="true">
            <annotation>
              <documentation>Optional event Message</documentation>
            </annotation>
          </element>
        </sequence>
        <attribute name="id" type="xsd:string" use="required">
          <annotation>
            <documentation>Mrid of event</documentation>
          </annotation>
        </attribute>
        <attribute name="t" type="xsd:dateTime" use="required">
          <annotation>
            <documentation>Timestamp of when the event occurred</documentation>
          </annotation>
        </attribute>
        <attribute name="c" type="xsd:string" use="required">
          <annotation>
            <documentation>Event Code</documentation>
          </annotation>
        </attribute>
        <attribute name="ec" type="policynet:EventCategory" use="optional">
          <annotation>
            <documentation>Optional Event Category</documentation>
          </annotation>
        </attribute>
        <attribute name="et" type="policynet:EventSeverity" use="optional">
          <annotation>
            <documentation>Optional Event Severity</documentation>
          </annotation>
        </attribute>
        <attribute name="u" type="xsd:string" use="optional">
          <annotation>
            <documentation>Optional UserId associated with the event</documentation>
          </annotation>
        </attribute>
        <attribute name="n" type="xsd:string" use="optional">
          <annotation>
            <documentation>Optional Sequence Number associated with the event</documentation>
          </annotation>
        </attribute>
        <attribute name="s" type="xsd:string" use="optional">
          <annotation>
            <documentation>Optional Status of the event</documentation>
          </annotation>
        </attribute>
        <attribute name="r" type="xsd:string" use="optional">
          <annotation>
            <documentation>Optional Reason for the event</documentation>
          </annotation>
        </attribute>
      </complexType>
      <complexType name="DeviceEventSource">
        <sequence/>
        <attribute name="macAddress" type="xsd:string" use="required"/>
        <attribute name="utilitySerialNumber" type="policynet:UtilitySerialNumber" use="required"/>
        <attribute name="servicePointId" type="policynet:ServicePointId" use="optional"/>
      </complexType>
      <complexType name="ServerEventSource">
        <sequence/>
        <attribute name="serviceName" type="policynet:ServiceName" use="required"/>
        <attribute name="hostName" type="policynet:Fqdn" use="required"/>
      </complexType>
      <complexType name="EventSource">
        <choice>
          <element name="deviceSource" type="policynet:DeviceEventSource" minOccurs="1" maxOccurs="1" nillable="false"/>
          <element name="serverSource" type="policynet:ServerEventSource" minOccurs="1" maxOccurs="1" nillable="false"/>
        </choice>
      </complexType>
      <complexType name="MeterReadData">
        <choice>
          <element name="TOU" type="policynet:RegisterData" minOccurs="1" maxOccurs="1" nillable="false"/>
          <element name="TOU1" type="policynet:RegisterDataMSP" minOccurs="1" maxOccurs="1" nillable="false"/>
          <element name="Is" type="policynet:IntervalData" minOccurs="1" maxOccurs="1" nillable="false"/>
          <element name="PQ" type="policynet:PowerQualityData" minOccurs="1" maxOccurs="1" nillable="false"/>
          <element name="PQP" type="policynet:PowerQualityProfileReading" minOccurs="1" maxOccurs="1" nillable="false"/>
          <element name="Os" type="policynet:OutageStatsData" minOccurs="1" maxOccurs="1" nillable="false"/>
          <element name="ValidatedIntervals" type="policynet:IntervalData" minOccurs="1" maxOccurs="1" nillable="false"/>
        </choice>
      </complexType>
      <complexType name="MeterReading">
        <sequence>
          <element name="R" type="policynet:MeterReadData" minOccurs="1" maxOccurs="unbounded" nillable="false"/>
        </sequence>
        <attribute name="wanMacAddress" type="policynet:macAddress" use="required">
          <annotation>
            <documentation>Meter WAN mac address</documentation>
          </annotation>
        </attribute>
        <attribute name="utilitySerialNumber" type="policynet:UtilitySerialNumber" use="required">
          <annotation>
            <documentation>Meter Utility Serial Number</documentation>
          </annotation>
        </attribute>
        <attribute name="servicePointId" type="policynet:ServicePointId" use="optional">
          <annotation>
            <documentation>Meter Service Point ID</documentation>
          </annotation>
        </attribute>
        <attribute name="meterProgramId" type="xsd:string" use="optional"/>
      </complexType>
      <complexType name="MeterReadings">
        <sequence>
          <element name="MR" type="policynet:MeterReading" minOccurs="1" maxOccurs="unbounded" nillable="false"/>
        </sequence>
      </complexType>
      <complexType name="EventAlert">
        <sequence/>
        <attribute name="eventCode" type="xsd:positiveInteger" use="optional"/>
        <attribute name="eventCategory" type="xsd:positiveInteger" use="optional"/>
        <attribute name="eventDesc" type="xsd:string" use="optional"/>
        <attribute name="eventTime" type="policynet:deviceLocalTime" use="optional"/>
        <attribute name="eventSeverity" type="policynet:EventSeverity" use="optional"/>
        <attribute name="eventArgs" type="xsd:string" use="optional"/>
      </complexType>
      <complexType name="PanServicePoint">
        <sequence/>
        <attribute name="utilitySerialNumber" type="policynet:UtilitySerialNumber" use="required"/>
        <attribute name="electricServicePointId" type="policynet:ServicePointId" use="required"/>
        <attribute name="installationLabelId" type="xsd:positiveInteger" use="optional"/>
        <attribute name="waterServiceType" type="policynet:WaterServiceType" use="optional"/>
      </complexType>
      <complexType name="WaterServicePoint">
        <sequence/>
        <attribute name="waterUtilitySerialNumber" type="policynet:UtilitySerialNumber" use="required"/>
        <attribute name="electricServicePointId" type="policynet:ServicePointId" use="required"/>
        <attribute name="installationLabelId" type="xsd:positiveInteger" use="optional"/>
        <attribute name="serviceType" type="policynet:WaterServiceType" use="required"/>
      </complexType>
      <complexType name="WaterRegisterData">
        <sequence>
          <element name="registerRead" type="policynet:ScaledQty" minOccurs="0" maxOccurs="1" nillable="true">
            <annotation>
              <documentation>Cumulative summation register read from water meter</documentation>
            </annotation>
          </element>
          <element name="events" type="policynet:EventAlert" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
        </sequence>
        <attribute name="readTime" type="policynet:deviceLocalTime" use="required">
          <annotation>
            <documentation>Timestamp of when reading was taken from water meter</documentation>
          </annotation>
        </attribute>
        <attribute name="dbInsertTime" type="xsd:dateTime" use="required">
          <annotation>
            <documentation>Timestamp of when water meter data was inserted into the PolicyNet database</documentation>
          </annotation>
        </attribute>
        <attribute name="readFailure" type="xsd:boolean" use="optional"/>
      </complexType>
      <complexType name="WaterIntervalData">
        <sequence>
          <element name="intervalRead" type="policynet:ScaledQty" minOccurs="0" maxOccurs="1" nillable="true">
            <annotation>
              <documentation>interval read value from water meter</documentation>
            </annotation>
          </element>
          <element name="events" type="policynet:EventAlert" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
        </sequence>
        <attribute name="intervalStartTime" type="policynet:deviceLocalTime" use="required">
          <annotation>
            <documentation>Timestamp of beginning of interval read taken from water meter</documentation>
          </annotation>
        </attribute>
        <attribute name="dbInsertTime" type="xsd:dateTime" use="required">
          <annotation>
            <documentation>Timestamp of when water meter data was inserted into the PolicyNet database</documentation>
          </annotation>
        </attribute>
        <attribute name="intervalType" type="policynet:IntervalType" use="required">
          <annotation>
            <documentation>Timestamp of when water meter data was inserted into the PolicyNet database</documentation>
          </annotation>
        </attribute>
        <attribute name="readFailure" type="xsd:boolean" use="optional"/>
      </complexType>
      <complexType name="WaterMeterReadData">
        <choice>
          <element name="RegisterData" type="policynet:WaterRegisterData" minOccurs="1" maxOccurs="1" nillable="false"/>
          <element name="IntervalData" type="policynet:WaterIntervalData" minOccurs="1" maxOccurs="1" nillable="false"/>
        </choice>
      </complexType>
      <complexType name="WaterMeterReading">
        <sequence>
          <element name="WaterMeterReading" type="policynet:WaterMeterReadData" minOccurs="1" maxOccurs="unbounded" nillable="false"/>
        </sequence>
        <attribute name="eui" type="policynet:PanEui" use="required">
          <annotation>
            <documentation>Water Meter EUI</documentation>
          </annotation>
        </attribute>
        <attribute name="utilitySerialNumber" type="policynet:UtilitySerialNumber" use="required">
          <annotation>
            <documentation>Water Meter Utility Serial Number</documentation>
          </annotation>
        </attribute>
        <attribute name="servicePointId" type="policynet:ServicePointId" use="required">
          <annotation>
            <documentation>Water Meter Service Point ID</documentation>
          </annotation>
        </attribute>
      </complexType>
      <complexType name="WaterMeterReadings">
        <sequence>
          <element name="WaterMeterReadings" type="policynet:WaterMeterReading" minOccurs="1" maxOccurs="unbounded" nillable="false"/>
        </sequence>
      </complexType>
      <complexType name="GasRegisterData">
        <sequence>
          <element name="registerRead" type="policynet:ScaledQty" minOccurs="0" maxOccurs="1" nillable="true">
            <annotation>
              <documentation>Cumulative summation register read from gas meter</documentation>
            </annotation>
          </element>
        </sequence>
        <attribute name="readTime" type="policynet:deviceLocalTime" use="required">
          <annotation>
            <documentation>Timestamp of when reading was taken from gas meter</documentation>
          </annotation>
        </attribute>
        <attribute name="dbInsertTime" type="xsd:dateTime" use="required">
          <annotation>
            <documentation>Timestamp of when gas meter data was inserted into the PolicyNet database</documentation>
          </annotation>
        </attribute>
      </complexType>
      <complexType name="GasIntervalData">
        <sequence>
          <element name="intervalRead" type="policynet:ScaledQty" minOccurs="0" maxOccurs="1" nillable="true">
            <annotation>
              <documentation>interval read value from gas meter</documentation>
            </annotation>
          </element>
        </sequence>
        <attribute name="intervalStartTime" type="policynet:deviceLocalTime" use="required">
          <annotation>
            <documentation>Timestamp of beginning of interval read taken from gas meter</documentation>
          </annotation>
        </attribute>
        <attribute name="dbInsertTime" type="xsd:dateTime" use="required">
          <annotation>
            <documentation>Timestamp of when gas meter data was inserted into the PolicyNet database</documentation>
          </annotation>
        </attribute>
        <attribute name="intervalType" type="policynet:IntervalType" use="required">
          <annotation>
            <documentation>Timestamp of when gas meter data was inserted into the PolicyNet database</documentation>
          </annotation>
        </attribute>
      </complexType>
      <complexType name="GasMeterReadData">
        <choice>
          <element name="RegisterData" type="policynet:GasRegisterData" minOccurs="1" maxOccurs="1" nillable="false"/>
          <element name="IntervalData" type="policynet:GasIntervalData" minOccurs="1" maxOccurs="1" nillable="false"/>
        </choice>
      </complexType>
      <complexType name="GasMeterReading">
        <sequence>
          <element name="GasMeterReading" type="policynet:GasMeterReadData" minOccurs="1" maxOccurs="unbounded" nillable="false"/>
        </sequence>
        <attribute name="eui" type="policynet:PanEui" use="required">
          <annotation>
            <documentation>Gas Meter EUI</documentation>
          </annotation>
        </attribute>
        <attribute name="utilitySerialNumber" type="policynet:UtilitySerialNumber" use="required">
          <annotation>
            <documentation>Gas Meter Utility Serial Number</documentation>
          </annotation>
        </attribute>
        <attribute name="servicePointId" type="policynet:ServicePointId" use="required">
          <annotation>
            <documentation>Gas Meter Service Point ID</documentation>
          </annotation>
        </attribute>
      </complexType>
      <complexType name="GasMeterReadings">
        <sequence>
          <element name="GasMeterReadings" type="policynet:GasMeterReading" minOccurs="1" maxOccurs="unbounded" nillable="false"/>
        </sequence>
      </complexType>
      <complexType name="WimaxStats">
        <sequence/>
        <attribute name="utilitySerialNumber" type="policynet:UtilitySerialNumber" use="required"/>
        <attribute name="wanMacAddress" type="policynet:macAddress" use="required"/>
        <attribute name="servicePointId" type="policynet:ServicePointId" use="required"/>
        <attribute name="linkType" type="policynet:LinkType" use="optional"/>
        <attribute name="sbsRssiMean" type="xsd:int" use="optional"/>
        <attribute name="sbsCinrMean" type="xsd:int" use="optional"/>
        <attribute name="scaledValue" type="xsd:int" use="optional"/>
        <attribute name="sbsUlFreqInMhz" type="xsd:decimal" use="optional"/>
        <attribute name="sbsDlFreqInMhz" type="xsd:decimal" use="optional"/>
        <attribute name="sbsBaseStationSectorId" type="xsd:string" use="optional"/>
        <attribute name="readTime" type="policynet:deviceLocalTime" use="required"/>
        <attribute name="created" type="xsd:dateTime" use="required"/>
        <attribute name="outage" type="xsd:boolean" use="optional"/>
        <attribute name="skip" type="xsd:boolean" use="optional"/>
      </complexType>
      <complexType name="EventData">
        <sequence>
          <element name="E" type="policynet:Event" minOccurs="1" maxOccurs="unbounded" nillable="false"/>
        </sequence>
      </complexType>
      <complexType name="WimaxStatsData">
        <sequence>
          <element name="WimaxStats" type="policynet:WimaxStats" minOccurs="1" maxOccurs="unbounded" nillable="false"/>
        </sequence>
      </complexType>
      <complexType name="DeviceReadData">
        <choice>
          <element name="Es" type="policynet:EventData" minOccurs="1" maxOccurs="1" nillable="false"/>
          <element name="Wrs" type="policynet:WimaxStatsData" minOccurs="1" maxOccurs="1" nillable="false"/>
        </choice>
      </complexType>
      <complexType name="DeviceReading">
        <sequence>
          <element name="R" type="policynet:DeviceReadData" minOccurs="1" maxOccurs="unbounded" nillable="false"/>
        </sequence>
        <attribute name="wanMacAddress" type="policynet:macAddress" use="required">
          <annotation>
            <documentation>Device WAN mac address</documentation>
          </annotation>
        </attribute>
        <attribute name="utilitySerialNumber" type="policynet:UtilitySerialNumber" use="required">
          <annotation>
            <documentation>Utility Serial Number</documentation>
          </annotation>
        </attribute>
        <attribute name="servicePointId" type="policynet:ServicePointId" use="optional">
          <annotation>
            <documentation>Device Service Point ID</documentation>
          </annotation>
        </attribute>
      </complexType>
      <complexType name="DeviceReadings">
        <sequence>
          <element name="DR" type="policynet:DeviceReading" minOccurs="1" maxOccurs="unbounded" nillable="false"/>
        </sequence>
      </complexType>
      <complexType name="PanTopologyType">
        <sequence>
          <element name="panDevice" type="policynet:PanDevice" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
        </sequence>
        <attribute name="espUtilitySerialNumber" type="policynet:UtilitySerialNumber" use="required"/>
        <attribute name="espEui" type="policynet:PanEui" use="required"/>
        <attribute name="servicePointId" type="policynet:ServicePointId" use="required"/>
        <attribute name="networkId" type="policynet:PanNetworkId" use="required"/>
        <attribute name="networkType" type="xsd:string" use="required"/>
        <attribute name="channelNumber" type="policynet:PanChannelNumber" use="optional"/>
        <attribute name="networkStatus" type="policynet:PanStatus" use="required"/>
        <attribute name="m2mPanTopo" type="xsd:string" use="optional"/>
      </complexType>
      <complexType name="CommBindingEvent">
        <complexContent>
          <extension base="policynet:Event">
            <sequence/>
            <attribute name="utilitySerialNumber" type="policynet:UtilitySerialNumber" use="required"/>
            <attribute name="sgcSerialNumber" type="policynet:sgcSerialNumber" use="required"/>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="CommBindingEvents">
        <sequence>
          <element name="CommBindingEvent" type="policynet:CommBindingEvent" minOccurs="1" maxOccurs="unbounded" nillable="false"/>
        </sequence>
      </complexType>
      <complexType name="Permission">
        <sequence/>
        <attribute name="objectType" type="policynet:ObjectType" use="required"/>
        <attribute name="create" type="policynet:PermissionLevel" use="optional"/>
        <attribute name="read" type="policynet:PermissionLevel" use="optional"/>
        <attribute name="update" type="policynet:PermissionLevel" use="optional"/>
        <attribute name="del" type="policynet:PermissionLevel" use="optional"/>
        <attribute name="deploy" type="policynet:PermissionLevel" use="optional"/>
        <attribute name="subscribe" type="policynet:PermissionLevel" use="optional"/>
        <attribute name="approve" type="policynet:PermissionLevel" use="optional"/>
        <attribute name="order" type="policynet:PermissionLevel" use="optional"/>
      </complexType>
      <complexType name="Role">
        <sequence>
          <element name="permissions" type="policynet:Permission" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
        </sequence>
        <attribute name="roleId" type="xsd:positiveInteger" use="optional"/>
        <attribute name="roleName" type="policynet:Name" use="required"/>
        <attribute name="roleDescription" type="policynet:Description" use="optional"/>
        <attribute name="userCount" type="xsd:int" use="optional"/>
        <attribute name="createDate" type="xsd:dateTime" use="optional"/>
        <attribute name="creatorId" type="xsd:positiveInteger" use="optional"/>
        <attribute name="creatorName" type="xsd:string" use="optional"/>
        <attribute name="customerId" type="xsd:positiveInteger" use="optional"/>
        <attribute name="customerName" type="xsd:string" use="optional"/>
      </complexType>
      <complexType name="UserSecurityQuestion">
        <sequence/>
        <attribute name="questionId" type="xsd:positiveInteger" use="required"/>
        <attribute name="answer" type="xsd:string" use="required"/>
      </complexType>
      <complexType name="User">
        <sequence>
          <element name="roleIds" type="xsd:positiveInteger" minOccurs="0" maxOccurs="unbounded"/>
          <element name="permissions" type="policynet:Permission" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
        </sequence>
        <attribute name="userId" type="xsd:positiveInteger" use="optional"/>
        <attribute name="userName" type="policynet:UserName" use="required">
          <annotation>
            <documentation>User name must be unique.  Use getNameList to interrogate existing user names.</documentation>
          </annotation>
        </attribute>
        <attribute name="firstName" type="policynet:NameField" use="required"/>
        <attribute name="lastName" type="policynet:NameField" use="required"/>
        <attribute name="status" type="policynet:userStatus" use="optional"/>
        <attribute name="description" type="xsd:string" use="optional"/>
        <attribute name="emailAddress" type="xsd:string" use="optional"/>
        <attribute name="emailToSmsAddress" type="xsd:string" use="optional"/>
        <attribute name="officePhone" type="xsd:string" use="optional"/>
        <attribute name="mobilePhone" type="xsd:string" use="optional"/>
        <attribute name="lastLoginDate" type="xsd:dateTime" use="optional"/>
        <attribute name="createDate" type="xsd:dateTime" use="optional"/>
        <attribute name="creatorId" type="xsd:string" use="optional"/>
        <attribute name="lastModifyDate" type="xsd:dateTime" use="optional"/>
        <attribute name="lastModifierId" type="xsd:string" use="optional"/>
        <attribute name="preferredTimeZone" type="policynet:TimeZone" use="optional"/>
        <attribute name="passwordAgingEnabled" type="xsd:boolean" use="optional"/>
        <attribute name="multiFactorAuthEnabled" type="xsd:boolean" use="optional"/>
        <attribute name="enableNotifications" type="xsd:boolean" use="optional"/>
        <attribute name="customerId" type="xsd:positiveInteger" use="optional"/>
        <attribute name="customerName" type="xsd:string" use="optional"/>
        <attribute name="domainName" type="xsd:string" use="optional"/>
      </complexType>
      <complexType name="CreateUser">
        <complexContent>
          <extension base="policynet:User">
            <sequence/>
            <attribute name="password" type="policynet:Password" use="required"/>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="LdapUser">
        <complexContent>
          <extension base="policynet:User">
            <sequence/>
            <attribute name="dn" type="policynet:DistinguishedName" use="required">
              <annotation>
                <documentation>Distinguished Name DN that was used to create the user entry in the LDAP database.  Format MUST conform to the RFC 4514 specification.  Example:  UID=jsmith,DC=example,DC=net    Example:   cn=testUser,ou=accounts,dc=grid-net,dc=com</documentation>
              </annotation>
            </attribute>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="UserAccount">
        <choice>
          <element name="locallyAuthenticatedUser" type="policynet:User" minOccurs="1" maxOccurs="1" nillable="false"/>
          <element name="ldapAuthenticatedUser" type="policynet:LdapUser" minOccurs="1" maxOccurs="1" nillable="false"/>
        </choice>
      </complexType>
      <complexType name="aggregateReportParams">
        <complexContent>
          <extension base="policynet:reportParams">
            <sequence/>
            <attribute name="aggregateType" type="policynet:AggregateType" use="optional"/>
            <attribute name="windowType" type="policynet:WindowType" use="optional"/>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="mapReportParams">
        <complexContent>
          <extension base="policynet:reportParams">
            <sequence>
              <element name="feederIds" type="xsd:string" minOccurs="0" maxOccurs="unbounded"/>
              <element name="transformerIds" type="xsd:string" minOccurs="0" maxOccurs="unbounded"/>
              <element name="substationIds" type="xsd:string" minOccurs="0" maxOccurs="unbounded"/>
              <element name="pepGroupIds" type="xsd:positiveInteger" minOccurs="0" maxOccurs="unbounded"/>
              <element name="eventIds" type="xsd:positiveInteger" minOccurs="0" maxOccurs="unbounded"/>
              <element name="outageTypes" type="policynet:OutageType" minOccurs="0" maxOccurs="unbounded"/>
              <element name="customerTypeIds" type="xsd:positiveInteger" minOccurs="0" maxOccurs="unbounded"/>
              <element name="customerSizeIds" type="xsd:positiveInteger" minOccurs="0" maxOccurs="unbounded"/>
              <element name="billingCycleIds" type="xsd:positiveInteger" minOccurs="0" maxOccurs="unbounded"/>
            </sequence>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="scmReportParams">
        <complexContent>
          <extension base="policynet:reportParams">
            <sequence/>
            <attribute name="origFulfillmentId" type="xsd:string" use="optional"/>
            <attribute name="batchFulfillmentId" type="xsd:string" use="optional"/>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="getPolicyStatusRequestFilter">
        <sequence>
          <element name="policyId" type="xsd:positiveInteger" minOccurs="1" maxOccurs="unbounded"/>
          <element name="deploymentStatuses" type="policynet:PolicyDeployState" minOccurs="0" maxOccurs="unbounded"/>
          <element name="reportStatuses" type="policynet:PolicyReportState" minOccurs="0" maxOccurs="unbounded"/>
        </sequence>
        <attribute name="customerId" type="xsd:positiveInteger" use="optional"/>
        <attribute name="deviceType" type="policynet:DeviceType" use="optional"/>
        <attribute name="firstRow" type="xsd:int" use="required"/>
        <attribute name="lastRow" type="xsd:int" use="required"/>
      </complexType>
      <complexType name="orderBy">
        <sequence/>
        <attribute name="fieldValue" type="xsd:int" use="optional"/>
        <attribute name="sortOrder" type="policynet:SortOrder" use="optional" default="Ascending"/>
      </complexType>
      <complexType name="PolicySearchOrderBy">
        <sequence/>
        <attribute name="fieldName" type="policynet:PolicyFields" use="required"/>
        <attribute name="fieldValue" type="xsd:string" use="optional"/>
        <attribute name="sortOrder" type="policynet:SortOrder" use="optional" default="Ascending"/>
      </complexType>
      <complexType name="PolicySearchFilter">
        <sequence>
          <element name="policyId" type="xsd:positiveInteger" minOccurs="0" maxOccurs="unbounded"/>
          <element name="policyType" type="policynet:PolicyTaskType" minOccurs="0" maxOccurs="unbounded"/>
          <element name="orderBy" type="policynet:PolicySearchOrderBy" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
        </sequence>
        <attribute name="deployState" type="policynet:PolicyDeployState" use="optional"/>
        <attribute name="frequency" type="policynet:PolicyFreqType" use="optional"/>
        <attribute name="rateProgramId" type="xsd:string" use="optional"/>
        <attribute name="utilitySerialNumber" type="policynet:UtilitySerialNumber" use="optional"/>
        <attribute name="firmwarePackageId" type="xsd:positiveInteger" use="optional"/>
        <attribute name="applicationPackageId" type="xsd:positiveInteger" use="optional"/>
        <attribute name="deviceGroupId" type="xsd:positiveInteger" use="optional"/>
        <attribute name="qosProfileId" type="xsd:positiveInteger" use="optional"/>
        <attribute name="isActive" type="policynet:PolicyActivityState" use="optional" default="Active"/>
        <attribute name="name" type="xsd:string" use="optional"/>
        <attribute name="creatorId" type="xsd:int" use="optional"/>
        <attribute name="createdBeginTime" type="xsd:dateTime" use="optional"/>
        <attribute name="createdEndTime" type="xsd:dateTime" use="optional"/>
        <attribute name="customerId" type="xsd:positiveInteger" use="optional"/>
        <attribute name="policyCreator" type="policynet:PolicyCreator" use="optional"/>
        <attribute name="firstRow" type="xsd:int" use="required"/>
        <attribute name="lastRow" type="xsd:int" use="required"/>
      </complexType>
      <complexType name="UserSearchOrderBy">
        <sequence/>
        <attribute name="fieldName" type="policynet:UserFields" use="required"/>
        <attribute name="fieldValue" type="xsd:int" use="optional"/>
        <attribute name="sortOrder" type="policynet:SortOrder" use="optional" default="Ascending"/>
      </complexType>
      <complexType name="UserSearchFilter">
        <sequence>
          <element name="userId" type="xsd:positiveInteger" minOccurs="0" maxOccurs="unbounded"/>
          <element name="status" type="policynet:userStatus" minOccurs="0" maxOccurs="unbounded"/>
          <element name="orderBy" type="policynet:UserSearchOrderBy" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
        </sequence>
        <attribute name="roleId" type="xsd:positiveInteger" use="optional"/>
        <attribute name="userName" type="policynet:UserName" use="optional"/>
        <attribute name="customerId" type="xsd:positiveInteger" use="optional"/>
        <attribute name="firstRow" type="xsd:int" use="required"/>
        <attribute name="lastRow" type="xsd:int" use="required"/>
      </complexType>
      <complexType name="RoleSearchOrderBy">
        <sequence/>
        <attribute name="fieldName" type="policynet:RoleFields" use="required"/>
        <attribute name="fieldValue" type="xsd:int" use="optional"/>
        <attribute name="sortOrder" type="policynet:SortOrder" use="optional" default="Ascending"/>
      </complexType>
      <complexType name="RoleSearchFilter">
        <sequence>
          <element name="roleId" type="xsd:positiveInteger" minOccurs="0" maxOccurs="unbounded"/>
          <element name="orderBy" type="policynet:RoleSearchOrderBy" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
        </sequence>
        <attribute name="userId" type="xsd:positiveInteger" use="optional"/>
        <attribute name="customerId" type="xsd:positiveInteger" use="optional"/>
        <attribute name="firstRow" type="xsd:int" use="required"/>
        <attribute name="lastRow" type="xsd:int" use="required"/>
      </complexType>
      <complexType name="DeviceSearchOrderBy">
        <sequence/>
        <attribute name="fieldName" type="policynet:DeviceFields" use="required"/>
        <attribute name="fieldValue" type="xsd:int" use="optional"/>
        <attribute name="sortOrder" type="policynet:SortOrder" use="optional" default="Ascending"/>
      </complexType>
      <complexType name="DeviceWildcardSearchFilter">
        <sequence>
          <element name="orderBy" type="policynet:DeviceSearchOrderBy" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
        </sequence>
        <attribute name="deviceQuery" type="xsd:string" use="required"/>
        <attribute name="firstRow" type="xsd:int" use="required"/>
        <attribute name="lastRow" type="xsd:int" use="required"/>
      </complexType>
      <complexType name="ClockDriftReportOrderBy">
        <complexContent>
          <extension base="policynet:orderBy">
            <sequence/>
            <attribute name="fieldName" type="policynet:ClockDriftReportFields" use="required"/>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="ClockAdjustmentReportOrderBy">
        <complexContent>
          <extension base="policynet:orderBy">
            <sequence/>
            <attribute name="fieldName" type="policynet:ClockAdjustmentReportFields" use="required"/>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="LengthValue">
        <sequence/>
        <attribute name="value" type="xsd:decimal" use="required"/>
        <attribute name="unit" type="policynet:LengthUnit" use="required"/>
      </complexType>
      <complexType name="SearchArea">
        <sequence>
          <element name="radius" type="policynet:LengthValue" minOccurs="1" maxOccurs="1"/>
        </sequence>
        <attribute name="XCoordinate" type="xsd:decimal" use="required"/>
        <attribute name="YCoordinate" type="xsd:decimal" use="required"/>
        <attribute name="ZCoordinate" type="xsd:decimal" use="optional"/>
      </complexType>
      <complexType name="DeviceSearchFilterBase">
        <sequence>
          <element name="utilitySerialNumber" type="policynet:UtilitySerialNumber" minOccurs="0" maxOccurs="unbounded"/>
          <element name="operationalStatus" type="policynet:OperationalStatus" minOccurs="0" maxOccurs="6"/>
          <element name="deviceType" type="policynet:DeviceType" minOccurs="0" maxOccurs="8"/>
          <element name="operatingMode" type="policynet:OperatingMode" minOccurs="0" maxOccurs="1" nillable="true"/>
          <element name="signalStrength" type="policynet:SignalStrength" minOccurs="0" maxOccurs="6"/>
          <element name="searchArea" type="policynet:SearchArea" minOccurs="0" maxOccurs="1" nillable="true"/>
        </sequence>
        <attribute name="utilitySerialNumberWildcard" type="policynet:UtilitySerialNumberWildcard" use="optional"/>
        <attribute name="wanMacAddress" type="policynet:macAddress" use="optional"/>
        <attribute name="wanMacAddressWildcard" type="policynet:macAddressWildcard" use="optional"/>
        <attribute name="cdmaNai" type="policynet:nai" use="optional"/>
        <attribute name="cdmaMdn" type="policynet:mdn" use="optional"/>
        <attribute name="cdmaMsid" type="policynet:msid" use="optional"/>
        <attribute name="cdmaSid" type="policynet:sid" use="optional"/>
        <attribute name="cdmaNid" type="policynet:nid" use="optional"/>
        <attribute name="cdmaBsid" type="policynet:bsid" use="optional"/>
        <attribute name="cdmaRat" type="policynet:rat" use="optional"/>
        <attribute name="servicePointId" type="xsd:string" use="optional"/>
        <attribute name="groupId" type="xsd:positiveInteger" use="optional"/>
        <attribute name="bindState" type="policynet:BindState" use="optional"/>
        <attribute name="linkType" type="policynet:LinkType" use="optional"/>
        <attribute name="mfgSerialNumber" type="xsd:string" use="optional"/>
        <attribute name="sgcSerialNumber" type="policynet:sgcSerialNumber" use="optional"/>
        <attribute name="sgcSerialNumberWildcard" type="policynet:sgcSerialNumberWildcard" use="optional"/>
        <attribute name="manufacturer" type="xsd:string" use="optional"/>
        <attribute name="energyStatus" type="policynet:EnergyState" use="optional"/>
        <attribute name="model" type="xsd:string" use="optional"/>
        <attribute name="serviceSwitch" type="xsd:boolean" use="optional"/>
        <attribute name="serviceSwitchStatus" type="xsd:boolean" use="optional"/>
        <attribute name="hardwareVersion" type="xsd:string" use="optional"/>
        <attribute name="loadSwitch" type="xsd:boolean" use="optional"/>
        <attribute name="meterCapability" type="policynet:MeterCapability" use="optional"/>
        <attribute name="loadProfileStatus" type="xsd:boolean" use="optional"/>
        <attribute name="firmwarePackageId" type="xsd:positiveInteger" use="optional"/>
        <attribute name="firmwareVersion" type="xsd:string" use="optional"/>
        <attribute name="meterSwVersion" type="xsd:string" use="optional"/>
        <attribute name="applicationPackageId" type="xsd:positiveInteger" use="optional"/>
        <attribute name="applicationFirmwareVersion" type="xsd:string" use="optional"/>
        <attribute name="streetNo" type="xsd:string" use="optional"/>
        <attribute name="streetAddress" type="xsd:string" use="optional"/>
        <attribute name="streetType" type="xsd:string" use="optional"/>
        <attribute name="streetDirection" type="policynet:StreetDirection" use="optional"/>
        <attribute name="aptNumber" type="xsd:string" use="optional"/>
        <attribute name="city" type="xsd:string" use="optional"/>
        <attribute name="stateProv" type="xsd:string" use="optional"/>
        <attribute name="postalCode" type="xsd:string" use="optional"/>
        <attribute name="customerAccountId" type="xsd:positiveInteger" use="optional"/>
        <attribute name="programId" type="xsd:string" use="optional"/>
        <attribute name="rippleProgramId" type="xsd:string" use="optional"/>
        <attribute name="billingCycleId" type="xsd:positiveInteger" use="optional"/>
        <attribute name="offCycleRouteId" type="xsd:string" use="optional"/>
        <attribute name="customerTypeId" type="xsd:positiveInteger" use="optional"/>
        <attribute name="customerSizeId" type="xsd:positiveInteger" use="optional"/>
        <attribute name="baseStationSectorId" type="xsd:string" use="optional"/>
        <attribute name="transformerId" type="xsd:string" use="optional"/>
        <attribute name="subTransformerId" type="xsd:string" use="optional"/>
        <attribute name="feederId" type="xsd:string" use="optional"/>
        <attribute name="mediumVoltageFeederId" type="xsd:string" use="optional"/>
        <attribute name="distributorId" type="xsd:positiveInteger" use="optional"/>
        <attribute name="retailerId" type="xsd:positiveInteger" use="optional"/>
        <attribute name="lifeSafety" type="xsd:boolean" use="optional"/>
        <attribute name="phaseType" type="policynet:MeterPhaseType" use="optional"/>
        <attribute name="panState" type="policynet:PanState" use="optional"/>
        <attribute name="customerId" type="xsd:positiveInteger" use="optional"/>
        <attribute name="form" type="xsd:string" use="optional"/>
        <attribute name="startingUSN" type="xsd:string" use="optional"/>
        <attribute name="nullCoordinates" type="xsd:boolean" use="optional"/>
        <attribute name="subMeter" type="xsd:boolean" use="optional"/>
        <attribute name="rateSchedule" type="xsd:string" use="optional"/>
        <attribute name="propertyNumber" type="xsd:string" use="optional"/>
        <attribute name="firstRow" type="xsd:int" use="required"/>
        <attribute name="lastRow" type="xsd:int" use="required"/>
      </complexType>
      <complexType name="CommAssetSearchOrderBy">
        <sequence/>
        <attribute name="fieldName" type="policynet:CommAssetFields" use="required"/>
        <attribute name="fieldValue" type="xsd:int" use="optional"/>
        <attribute name="sortOrder" type="policynet:SortOrder" use="optional" default="Ascending"/>
      </complexType>
      <complexType name="CommAssetsSearchFilter">
        <sequence>
          <element name="orderBy" type="policynet:CommAssetSearchOrderBy" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
        </sequence>
        <attribute name="bindState" type="policynet:BindState" use="optional"/>
        <attribute name="operationalStatus" type="policynet:OperationalStatus" use="optional"/>
        <attribute name="sgcSerialNumber" type="policynet:sgcSerialNumber" use="optional"/>
        <attribute name="sgcSerialNumberWildcard" type="policynet:sgcSerialNumberWildcard" use="optional"/>
        <attribute name="linkType" type="policynet:LinkType" use="optional"/>
        <attribute name="firstRow" type="xsd:int" use="required"/>
        <attribute name="lastRow" type="xsd:int" use="required"/>
      </complexType>
      <complexType name="FirmwarePackagesSearchOrderBy">
        <sequence/>
        <attribute name="fieldName" type="policynet:FirmwarePackageFields" use="required"/>
        <attribute name="fieldValue" type="xsd:int" use="optional"/>
        <attribute name="sortOrder" type="policynet:SortOrder" use="optional" default="Ascending"/>
      </complexType>
      <complexType name="FirmwarePackagesSearchFilter">
        <sequence>
          <element name="packageId" type="xsd:positiveInteger" minOccurs="0" maxOccurs="unbounded"/>
          <element name="orderBy" type="policynet:FirmwarePackagesSearchOrderBy" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
        </sequence>
        <attribute name="activeState" type="xsd:boolean" use="optional"/>
        <attribute name="ssid" type="xsd:string" use="optional"/>
        <attribute name="utilitySerialNumber" type="policynet:UtilitySerialNumber" use="optional"/>
        <attribute name="deviceType" type="policynet:DeviceType" use="optional"/>
        <attribute name="customerId" type="xsd:positiveInteger" use="optional"/>
        <attribute name="firstRow" type="xsd:int" use="required"/>
        <attribute name="lastRow" type="xsd:int" use="required"/>
      </complexType>
      <complexType name="GroupsSearchOrderBy">
        <sequence/>
        <attribute name="fieldName" type="policynet:GroupFields" use="required"/>
        <attribute name="fieldValue" type="xsd:int" use="optional"/>
        <attribute name="sortOrder" type="policynet:SortOrder" use="optional" default="Ascending"/>
      </complexType>
      <complexType name="GroupsSearchFilter">
        <sequence>
          <element name="groupId" type="xsd:positiveInteger" minOccurs="0" maxOccurs="unbounded"/>
          <element name="orderBy" type="policynet:GroupsSearchOrderBy" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          <element name="groupType" type="policynet:GroupType" minOccurs="0" maxOccurs="unbounded"/>
        </sequence>
        <attribute name="utilitySerialNumber" type="policynet:UtilitySerialNumber" use="optional"/>
        <attribute name="policyId" type="xsd:positiveInteger" use="optional"/>
        <attribute name="groupCategory" type="policynet:DeviceGroupCategory" use="optional"/>
        <attribute name="name" type="xsd:string" use="optional"/>
        <attribute name="creatorId" type="xsd:int" use="optional"/>
        <attribute name="createdBeginTime" type="xsd:dateTime" use="optional"/>
        <attribute name="createdEndTime" type="xsd:dateTime" use="optional"/>
        <attribute name="customerId" type="xsd:positiveInteger" use="optional"/>
        <attribute name="firstRow" type="xsd:int" use="required"/>
        <attribute name="lastRow" type="xsd:int" use="required"/>
      </complexType>
      <complexType name="PolicyGroupsSearchFilter">
        <sequence>
          <element name="groupId" type="xsd:positiveInteger" minOccurs="0" maxOccurs="unbounded"/>
        </sequence>
        <attribute name="policyId" type="xsd:positiveInteger" use="optional"/>
      </complexType>
      <complexType name="searchBillingCycleRequestFilter">
        <sequence>
          <element name="billingCycleId" type="xsd:positiveInteger" minOccurs="0" maxOccurs="unbounded"/>
        </sequence>
        <attribute name="firstRow" type="xsd:int" use="required"/>
        <attribute name="lastRow" type="xsd:int" use="required"/>
      </complexType>
      <complexType name="searchServicePointRequestFilter">
        <sequence>
          <element name="servicePointId" type="policynet:ServicePointId" minOccurs="0" maxOccurs="unbounded"/>
        </sequence>
        <attribute name="utilitySerialNumber" type="policynet:UtilitySerialNumber" use="optional"/>
        <attribute name="deviceType" type="policynet:DeviceType" use="optional"/>
        <attribute name="firstRow" type="xsd:int" use="required"/>
        <attribute name="lastRow" type="xsd:int" use="required"/>
      </complexType>
      <complexType name="AuditTrailSearchOrderBy">
        <sequence/>
        <attribute name="fieldName" type="policynet:AuditTrailFields" use="required"/>
        <attribute name="fieldValue" type="xsd:int" use="optional"/>
        <attribute name="sortOrder" type="policynet:SortOrder" use="optional" default="Ascending"/>
      </complexType>
      <complexType name="AuditTrailSearchFilter">
        <sequence>
          <element name="objectTypes" type="policynet:ObjectType" minOccurs="0" maxOccurs="unbounded"/>
          <element name="operationTypes" type="policynet:OperationType" minOccurs="0" maxOccurs="unbounded"/>
          <element name="orderBy" type="policynet:AuditTrailSearchOrderBy" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
        </sequence>
        <attribute name="userId" type="xsd:positiveInteger" use="optional"/>
        <attribute name="privilegeId" type="xsd:int" use="optional"/>
        <attribute name="objectId" type="xsd:string" use="optional"/>
        <attribute name="beginDate" type="xsd:dateTime" use="required"/>
        <attribute name="endDate" type="xsd:dateTime" use="required"/>
        <attribute name="customerId" type="xsd:positiveInteger" use="optional"/>
        <attribute name="firstRow" type="xsd:int" use="required"/>
        <attribute name="lastRow" type="xsd:int" use="required"/>
      </complexType>
      <complexType name="searchAuditTrailResponseRow">
        <sequence>
          <element name="auditTrailId" type="xsd:positiveInteger" minOccurs="1" maxOccurs="1"/>
          <element name="userId" type="xsd:positiveInteger" minOccurs="1" maxOccurs="1"/>
          <element name="userName" type="policynet:UserName" minOccurs="1" maxOccurs="1"/>
          <element name="operationType" type="policynet:OperationType" minOccurs="1" maxOccurs="1"/>
          <element name="operationTypeName" type="xsd:string" minOccurs="1" maxOccurs="1"/>
          <element name="objectTypeId" type="xsd:string" minOccurs="1" maxOccurs="1"/>
          <element name="objectTypeName" type="xsd:string" minOccurs="1" maxOccurs="1"/>
          <element name="objectId" type="xsd:string" minOccurs="1" maxOccurs="1"/>
          <element name="objectName" type="xsd:string" minOccurs="1" maxOccurs="1"/>
          <element name="status" type="xsd:int" minOccurs="1" maxOccurs="1"/>
          <element name="message" type="xsd:string" minOccurs="1" maxOccurs="1"/>
          <element name="created" type="xsd:dateTime" minOccurs="1" maxOccurs="1"/>
          <element name="customerId" type="xsd:positiveInteger" minOccurs="0" maxOccurs="1" nillable="true"/>
          <element name="customerName" type="xsd:string" minOccurs="0" maxOccurs="1" nillable="true"/>
        </sequence>
      </complexType>
      <complexType name="getNameListResponseRow">
        <sequence>
          <element name="name" type="xsd:string" minOccurs="1" maxOccurs="1"/>
          <element name="id" type="xsd:string" minOccurs="1" maxOccurs="1"/>
        </sequence>
      </complexType>
      <complexType name="DeviceList">
        <sequence>
          <element name="utilitySerialNumber" type="policynet:UtilitySerialNumber" minOccurs="0" maxOccurs="unbounded"/>
        </sequence>
      </complexType>
      <complexType name="policyResultDetailResponseRow">
        <sequence/>
        <attribute name="meter" type="xsd:string" use="required"/>
        <attribute name="deploymentStatus" type="xsd:string" use="required"/>
        <attribute name="beginEnforcementStatus" type="xsd:string" use="required"/>
        <attribute name="endEnforcementStatus" type="xsd:string" use="required"/>
        <attribute name="customerId" type="xsd:positiveInteger" use="optional"/>
        <attribute name="customerName" type="xsd:string" use="optional"/>
        <attribute name="networkConnectivity" type="policynet:NetworkConnectivity" use="optional"/>
        <attribute name="energyStatus" type="policynet:EnergyState" use="optional"/>
      </complexType>
      <complexType name="EventReportRecord">
        <sequence>
          <element name="eventSource" type="policynet:EventSource" minOccurs="1" maxOccurs="1"/>
        </sequence>
        <attribute name="eventTime" type="policynet:deviceLocalTime" use="required"/>
        <attribute name="eventTimeUTC" type="xsd:dateTime" use="optional"/>
        <attribute name="eventSeverity" type="policynet:EventSeverity" use="required"/>
        <attribute name="eventCategory" type="policynet:EventCategory" use="required"/>
        <attribute name="eventType" type="policynet:EventType" use="required"/>
        <attribute name="eventCode" type="xsd:positiveInteger" use="required"/>
        <attribute name="eventDesc" type="xsd:string" use="required"/>
        <attribute name="eventArguments" type="xsd:string" use="required"/>
        <attribute name="mediumVoltageFeederId" type="xsd:string" use="optional"/>
      </complexType>
      <complexType name="EventRecords">
        <sequence>
          <element name="event" type="policynet:EventReportRecord" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
        </sequence>
        <attribute name="consumerUrl" type="xsd:string" use="optional"/>
      </complexType>
      <complexType name="GraphCoordinates">
        <sequence/>
        <attribute name="x" type="xsd:int" use="required"/>
        <attribute name="y" type="xsd:int" use="required"/>
      </complexType>
      <complexType name="ChronicReadFailureReportItem">
        <sequence>
          <element name="energy" type="policynet:GraphCoordinates" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          <element name="signal" type="xsd:int" minOccurs="0" maxOccurs="unbounded"/>
          <element name="errorCode" type="xsd:int" minOccurs="0" maxOccurs="unbounded"/>
        </sequence>
        <attribute name="utilitySerialNumber" type="policynet:UtilitySerialNumber" use="required"/>
        <attribute name="lastCommTime" type="xsd:dateTime" use="required"/>
      </complexType>
      <complexType name="FailedEnforcementOrderBy">
        <sequence/>
        <attribute name="fieldName" type="policynet:FailedEnforcementReportField" use="required"/>
        <attribute name="fieldValue" type="xsd:int" use="optional"/>
        <attribute name="sortOrder" type="policynet:SortOrder" use="required"/>
      </complexType>
      <complexType name="FailedEnforcementReportParams">
        <sequence>
          <element name="orderBy" type="policynet:FailedEnforcementOrderBy" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
        </sequence>
        <attribute name="policyId" type="xsd:positiveInteger" use="required"/>
        <attribute name="enforcementTime" type="xsd:dateTime" use="optional"/>
        <attribute name="failureType" type="policynet:FailedEnforcementReportType" use="required"/>
        <attribute name="XCoordinate" type="xsd:decimal" use="optional"/>
        <attribute name="YCoordinate" type="xsd:decimal" use="optional"/>
        <attribute name="networkConnectivity" type="policynet:NetworkConnectivity" use="optional"/>
        <attribute name="energyStatus" type="policynet:EnergyState" use="optional"/>
        <attribute name="firstRow" type="xsd:int" use="required"/>
        <attribute name="lastRow" type="xsd:int" use="required"/>
      </complexType>
      <complexType name="FailedEnforcementEnergyStatus">
        <sequence/>
        <attribute name="readingTime" type="xsd:dateTime" use="required"/>
        <attribute name="energyStatus" type="policynet:EnergyState" use="required"/>
      </complexType>
      <complexType name="FailedEnforcementSignalStrength">
        <sequence/>
        <attribute name="readingTime" type="xsd:dateTime" use="required"/>
        <attribute name="signalStrength" type="policynet:SignalStrength" use="required"/>
      </complexType>
      <complexType name="FailedEnforcementEvent">
        <sequence/>
        <attribute name="readingTime" type="xsd:dateTime" use="required"/>
        <attribute name="eventCategory" type="policynet:EventCategory" use="required"/>
        <attribute name="eventCode" type="xsd:positiveInteger" use="required"/>
      </complexType>
      <complexType name="FailedEnforcementReportRow">
        <sequence>
          <element name="energyStatus" type="policynet:FailedEnforcementEnergyStatus" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          <element name="signalStrength" type="policynet:FailedEnforcementSignalStrength" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          <element name="eventCode" type="policynet:FailedEnforcementEvent" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
        </sequence>
        <attribute name="utilitySerialNumber" type="policynet:UtilitySerialNumber" use="required"/>
        <attribute name="espUtilitySerialNumber" type="policynet:UtilitySerialNumber" use="optional"/>
        <attribute name="lastCommTime" type="xsd:dateTime" use="required"/>
        <attribute name="XCoordinate" type="xsd:decimal" use="required"/>
        <attribute name="YCoordinate" type="xsd:decimal" use="required"/>
        <attribute name="rsrp" type="xsd:decimal" use="optional"/>
        <attribute name="rsrq" type="xsd:decimal" use="optional"/>
        <attribute name="networkConnectivity" type="policynet:NetworkConnectivity" use="optional"/>
        <attribute name="currentEnergyStatus" type="policynet:EnergyState" use="optional"/>
        <attribute name="firmwareVersion" type="xsd:string" use="optional"/>
      </complexType>
      <complexType name="IntervalReadDataSummaryReportItem">
        <sequence/>
        <attribute name="beginTime" type="policynet:deviceLocalTime" use="required"/>
        <attribute name="endTime" type="policynet:deviceLocalTime" use="optional"/>
        <attribute name="actualReportCount" type="xsd:int" use="required"/>
        <attribute name="expectedReportCount" type="xsd:int" use="required"/>
        <attribute name="successRate" type="xsd:decimal" use="required"/>
        <attribute name="deviceMissingReportCount" type="xsd:int" use="required"/>
        <attribute name="deviceWithGapsCount" type="xsd:int" use="required"/>
        <attribute name="policyId" type="xsd:int" use="optional"/>
        <attribute name="lpInterval" type="xsd:int" use="optional"/>
      </complexType>
      <complexType name="IntervalReadGapData">
        <sequence/>
        <attribute name="startTime" type="policynet:deviceLocalTime" use="required"/>
        <attribute name="endTime" type="policynet:deviceLocalTime" use="required"/>
        <attribute name="gapLength" type="xsd:positiveInteger" use="required"/>
      </complexType>
      <complexType name="IntervalReadGapReportItem">
        <sequence>
          <element name="gapData" type="policynet:IntervalReadGapData" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
        </sequence>
        <attribute name="utilitySerialNumber" type="policynet:UtilitySerialNumber" use="required"/>
        <attribute name="energyStatus" type="policynet:EnergyState" use="optional"/>
        <attribute name="networkConnectivity" type="policynet:NetworkConnectivity" use="optional"/>
      </complexType>
      <complexType name="policyResultDetailRequest">
        <sequence/>
        <attribute name="policyId" type="xsd:positiveInteger" use="required"/>
        <attribute name="customerId" type="xsd:positiveInteger" use="optional"/>
        <attribute name="deploymentStatus" type="policynet:PolicyDeployState" use="required"/>
        <attribute name="beginEnforcementStatus" type="policynet:policyResultEnforcementStatus" use="required"/>
        <attribute name="endEnforcementStatus" type="policynet:policyResultEnforcementStatus" use="required"/>
        <attribute name="beginRow" type="xsd:int" use="required"/>
        <attribute name="endRow" type="xsd:int" use="required"/>
      </complexType>
      <complexType name="DeviceAsset">
        <choice>
          <element name="Meter" type="policynet:Meter" minOccurs="1" maxOccurs="1" nillable="false"/>
          <element name="SgModem" type="policynet:SgModem" minOccurs="1" maxOccurs="1" nillable="false"/>
          <element name="WaterMeter" type="policynet:WaterMeter" minOccurs="1" maxOccurs="1" nillable="false"/>
        </choice>
      </complexType>
      <complexType name="DeviceAssets">
        <sequence>
          <element name="DeviceAsset" type="policynet:DeviceAsset" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          <element name="CommAsset" type="policynet:SmartGridCard" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
        </sequence>
      </complexType>
      <complexType name="MeterAssets">
        <sequence>
          <element name="MeterAsset" type="policynet:Meter" minOccurs="1" maxOccurs="unbounded" nillable="false"/>
        </sequence>
      </complexType>
      <complexType name="WaterMeterAssets">
        <sequence>
          <element name="WaterMeterAsset" type="policynet:WaterMeter" minOccurs="1" maxOccurs="unbounded" nillable="false"/>
        </sequence>
      </complexType>
      <complexType name="SgRouterAssets">
        <sequence>
          <element name="SgRouterAsset" type="policynet:SgModem" minOccurs="1" maxOccurs="unbounded" nillable="false"/>
        </sequence>
      </complexType>
      <complexType name="CommAssets">
        <sequence>
          <element name="CommAsset" type="policynet:SmartGridCard" minOccurs="1" maxOccurs="unbounded" nillable="false"/>
        </sequence>
      </complexType>
      <complexType name="getPolicyStatusResponseRow">
        <sequence/>
        <attribute name="policyId" type="xsd:positiveInteger" use="required"/>
        <attribute name="wanMacAddress" type="policynet:macAddress" use="required"/>
        <attribute name="utilitySerialNumber" type="policynet:UtilitySerialNumber" use="required"/>
        <attribute name="signalStrength" type="xsd:int" use="required"/>
        <attribute name="linkType" type="policynet:LinkType" use="required"/>
        <attribute name="saved" type="policynet:deviceLocalTime" use="optional"/>
        <attribute name="deploying" type="policynet:deviceLocalTime" use="optional"/>
        <attribute name="deployed" type="policynet:deviceLocalTime" use="optional"/>
        <attribute name="deployFailed" type="policynet:deviceLocalTime" use="optional"/>
        <attribute name="undeploying" type="policynet:deviceLocalTime" use="optional"/>
        <attribute name="undeployed" type="policynet:deviceLocalTime" use="optional"/>
        <attribute name="reported" type="policynet:deviceLocalTime" use="optional"/>
        <attribute name="reportFailed" type="policynet:deviceLocalTime" use="optional"/>
        <attribute name="timeToDeploy" type="xsd:positiveInteger" use="required"/>
      </complexType>
      <complexType name="getDeviceGroupChangeResponseRow">
        <sequence/>
        <attribute name="policyId" type="xsd:positiveInteger" use="required"/>
        <attribute name="policyName" type="xsd:string" use="required"/>
        <attribute name="numEntering" type="xsd:int" use="required"/>
        <attribute name="numLeaving" type="xsd:int" use="required"/>
      </complexType>
      <complexType name="ServicePoint">
        <sequence/>
        <attribute name="servicePointId" type="policynet:ServicePointId" use="optional"/>
        <attribute name="utilitySerialNumber" type="policynet:UtilitySerialNumber" use="optional"/>
        <attribute name="meterPosition" type="xsd:string" use="optional"/>
        <attribute name="feederId" type="xsd:string" use="optional"/>
        <attribute name="mediumVoltageFeederId" type="xsd:string" use="optional"/>
        <attribute name="transformerId" type="xsd:string" use="optional"/>
        <attribute name="subTransformerId" type="xsd:string" use="optional"/>
        <attribute name="streetNo" type="xsd:string" use="optional"/>
        <attribute name="streetDirection" type="policynet:StreetDirection" use="optional"/>
        <attribute name="streetAddress" type="xsd:string" use="optional"/>
        <attribute name="streetType" type="xsd:string" use="optional"/>
        <attribute name="aptNumber" type="xsd:string" use="optional"/>
        <attribute name="city" type="xsd:string" use="optional"/>
        <attribute name="stateProv" type="xsd:string" use="optional"/>
        <attribute name="postalCode" type="xsd:string" use="optional"/>
        <attribute name="sector" type="xsd:string" use="optional"/>
        <attribute name="XCoordinate" type="xsd:decimal" use="optional"/>
        <attribute name="YCoordinate" type="xsd:decimal" use="optional"/>
        <attribute name="ZCoordinate" type="xsd:decimal" use="optional"/>
        <attribute name="timeZone" type="policynet:TimeZone" use="optional"/>
        <attribute name="billingCycleId" type="xsd:int" use="optional"/>
        <attribute name="billingCycleName" type="xsd:string" use="optional"/>
        <attribute name="customerTypeId" type="xsd:positiveInteger" use="optional"/>
        <attribute name="customerType" type="xsd:string" use="optional"/>
        <attribute name="customerSizeId" type="xsd:positiveInteger" use="optional"/>
        <attribute name="customerSize" type="xsd:string" use="optional"/>
        <attribute name="distributorId" type="xsd:positiveInteger" use="optional"/>
        <attribute name="distributor" type="xsd:string" use="optional"/>
        <attribute name="retailerId" type="xsd:positiveInteger" use="optional"/>
        <attribute name="retailer" type="xsd:string" use="optional"/>
        <attribute name="offCycleRouteId" type="xsd:string" use="optional"/>
        <attribute name="lifeSafety" type="xsd:boolean" use="optional"/>
        <attribute name="creatorId" type="xsd:int" use="optional"/>
        <attribute name="creatorName" type="xsd:string" use="optional"/>
        <attribute name="districtMeter" type="xsd:boolean" use="optional"/>
        <attribute name="waterMainId" type="xsd:string" use="optional"/>
        <attribute name="waterDistrictId" type="xsd:string" use="optional"/>
        <attribute name="gasMainId" type="xsd:string" use="optional"/>
        <attribute name="gasDistrictId" type="xsd:string" use="optional"/>
        <attribute name="compressorId" type="xsd:string" use="optional"/>
        <attribute name="gateId" type="xsd:string" use="optional"/>
        <attribute name="reservoirId" type="xsd:string" use="optional"/>
        <attribute name="distributionPipeId" type="xsd:string" use="optional"/>
        <attribute name="pumpId" type="xsd:string" use="optional"/>
        <attribute name="tankId" type="xsd:string" use="optional"/>
        <attribute name="pipeSize" type="xsd:string" use="optional"/>
        <attribute name="mspObjectId" type="xsd:string" use="optional"/>
        <attribute name="serviceVoltageA" type="policynet:ServiceVoltage" use="optional"/>
        <attribute name="serviceVoltageB" type="policynet:ServiceVoltage" use="optional"/>
        <attribute name="serviceVoltageC" type="policynet:ServiceVoltage" use="optional"/>
        <attribute name="rateSchedule" type="xsd:string" use="optional"/>
        <attribute name="ratePayerId" type="xsd:string" use="optional"/>
        <attribute name="breakerNumber" type="xsd:string" use="optional"/>
        <attribute name="mvFeederPhaseCode" type="policynet:MvPhaseNumber" use="optional"/>
        <attribute name="linemenServiceArea" type="xsd:string" use="optional"/>
        <attribute name="poleNo" type="xsd:string" use="optional"/>
        <attribute name="transformerName" type="xsd:string" use="optional"/>
        <attribute name="subMeter" type="xsd:boolean" use="optional"/>
        <attribute name="createDate" type="xsd:dateTime" use="optional"/>
      </complexType>
      <complexType name="ServicePoints">
        <sequence>
          <element name="servicePoint" type="policynet:ServicePoint" minOccurs="1" maxOccurs="unbounded" nillable="false"/>
        </sequence>
      </complexType>
      <complexType name="createServicePointsError">
        <sequence>
          <element name="servicePointId" type="policynet:ServicePointId" minOccurs="1" maxOccurs="1"/>
        </sequence>
      </complexType>
      <complexType name="BaseStationSectorNetworkAddress">
        <sequence>
          <element name="ipAddress" type="policynet:IpAddress" minOccurs="0" maxOccurs="1" nillable="true"/>
        </sequence>
      </complexType>
      <complexType name="BaseStationSector">
        <sequence>
          <element name="networkAddress" type="policynet:BaseStationSectorNetworkAddress" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
        </sequence>
        <attribute name="sectorId" type="xsd:string" use="required"/>
      </complexType>
      <complexType name="BaseStation">
        <sequence>
          <element name="sector" type="policynet:BaseStationSector" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
        </sequence>
        <attribute name="name" type="policynet:BaseStationName" use="required"/>
      </complexType>
      <complexType name="omsDeviceStatus">
        <sequence>
          <choice>
            <element name="UnplannedOutage" type="xsd:boolean" minOccurs="1" maxOccurs="1" default="true"/>
            <element name="PlannedOutageId" type="xsd:positiveInteger" minOccurs="1" maxOccurs="1"/>
          </choice>
        </sequence>
        <attribute name="utilitySerialNumber" type="policynet:UtilitySerialNumber" use="required"/>
        <attribute name="wanMacAddress" type="policynet:macAddress" use="optional"/>
        <attribute name="servicePointId" type="policynet:ServicePointId" use="optional"/>
        <attribute name="energyStatus" type="policynet:EnergyState" use="required"/>
        <attribute name="callTime" type="xsd:dateTime" use="required"/>
        <attribute name="comments" type="xsd:string" use="optional"/>
      </complexType>
      <complexType name="Outages">
        <sequence>
          <element name="o" type="policynet:omsDeviceStatus" minOccurs="1" maxOccurs="unbounded" nillable="false"/>
        </sequence>
        <attribute name="consumerUrl" type="xsd:string" use="optional"/>
      </complexType>
      <complexType name="omsDeviceList">
        <sequence>
          <element name="omsDeviceStatus" type="policynet:omsDeviceStatus" minOccurs="0" maxOccurs="unbounded"/>
        </sequence>
      </complexType>
      <complexType name="DeviceStateChange">
        <sequence/>
        <attribute name="utilitySerialNumber" type="policynet:UtilitySerialNumber" use="required"/>
        <attribute name="operationalState" type="policynet:OperationalStatus" use="required"/>
        <attribute name="stateChangeTime" type="xsd:dateTime" use="required"/>
      </complexType>
      <complexType name="DeviceStateChanges">
        <sequence>
          <element name="deviceStateChange" type="policynet:DeviceStateChange" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
        </sequence>
      </complexType>
      <complexType name="DeviceConfigChange">
        <sequence/>
        <attribute name="utilitySerialNumber" type="policynet:UtilitySerialNumber" use="required"/>
        <attribute name="firmwareVersion" type="xsd:string" use="optional"/>
        <attribute name="previousFirmwareVersion" type="xsd:string" use="optional"/>
        <attribute name="meterFirmwareVersion" type="xsd:string" use="optional"/>
        <attribute name="previousMeterFirmwareVersion" type="xsd:string" use="optional"/>
        <attribute name="meterProgramId" type="xsd:string" use="optional"/>
        <attribute name="previousMeterProgramId" type="xsd:string" use="optional"/>
        <attribute name="wanMacAddress" type="xsd:string" use="optional"/>
        <attribute name="previousWanMacAddress" type="xsd:string" use="optional"/>
        <attribute name="timestamp" type="xsd:dateTime" use="required"/>
      </complexType>
      <complexType name="DeviceConfigChanges">
        <sequence>
          <element name="deviceConfigChange" type="policynet:DeviceConfigChange" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
        </sequence>
      </complexType>
      <complexType name="DeviceStateMonitor">
        <sequence/>
        <attribute name="utilitySerialNumber" type="policynet:UtilitySerialNumber" use="required"/>
        <attribute name="event" type="policynet:DeviceStateMonitorEvent" use="required"/>
        <attribute name="timestamp" type="xsd:dateTime" use="required">
          <annotation>
            <documentation>Timestamp of when the event occurred</documentation>
          </annotation>
        </attribute>
      </complexType>
      <complexType name="DeviceStateMonitors">
        <sequence>
          <element name="deviceStateMonitor" type="policynet:DeviceStateMonitor" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
        </sequence>
      </complexType>
      <complexType name="Topic">
        <choice>
          <element name="registerRead" type="policynet:RegisterReadPolicy" minOccurs="1" maxOccurs="1" nillable="false"/>
          <element name="intervalRead" type="policynet:IntervalReadPolicy" minOccurs="1" maxOccurs="1" nillable="false"/>
          <element name="powerQualityRead" type="policynet:PowerQualityReadPolicy" minOccurs="1" maxOccurs="1" nillable="false"/>
          <element name="outageStatsRead" type="policynet:OutageStatisticsReadPolicy" minOccurs="1" maxOccurs="1" nillable="false"/>
        </choice>
      </complexType>
      <complexType name="searchConsumersFilter">
        <sequence>
          <choice>
            <element name="mrid" type="policynet:Mrid" minOccurs="0" maxOccurs="1" nillable="true"/>
            <element name="policyId" type="xsd:positiveInteger" minOccurs="0" maxOccurs="1" nillable="true"/>
            <element name="policyType" type="policynet:PolicyTaskType" minOccurs="0" maxOccurs="1" nillable="true"/>
            <element name="topicType" type="policynet:TopicType" minOccurs="0" maxOccurs="1" nillable="true"/>
          </choice>
        </sequence>
        <attribute name="customerId" type="xsd:positiveInteger" use="optional"/>
        <attribute name="isActive" type="xsd:boolean" use="optional"/>
        <attribute name="firstRow" type="xsd:int" use="required"/>
        <attribute name="lastRow" type="xsd:int" use="required"/>
      </complexType>
      <complexType name="Subscription">
        <sequence>
          <element name="consumer" type="policynet:Consumer" minOccurs="1" maxOccurs="1"/>
          <element name="reportBeginTime" type="policynet:deviceLocalTime" minOccurs="0" maxOccurs="1" nillable="true"/>
          <element name="reportEndTime" type="policynet:deviceLocalTime" minOccurs="0" maxOccurs="1" nillable="true"/>
        </sequence>
        <attribute name="subscriptionId" type="xsd:positiveInteger" use="optional"/>
        <attribute name="publishInterval" type="xsd:positiveInteger" use="optional"/>
        <attribute name="timeOfDay" type="policynet:HourMinuteTime" use="optional"/>
        <attribute name="dayOfMonth" type="policynet:DayOfMonth" use="optional"/>
        <attribute name="batchSize" type="xsd:positiveInteger" use="optional">
          <annotation>
            <documentation>Batch size is only applicable to outage notification topic and must be >= 100</documentation>
          </annotation>
        </attribute>
        <attribute name="excludeSubMeters" type="xsd:boolean" use="optional"/>
        <attribute name="excludePlannedOutages" type="xsd:boolean" use="optional"/>
        <attribute name="excludeDiscoveredMeterOutages" type="xsd:boolean" use="optional"/>
        <attribute name="customReportTopicId" type="xsd:positiveInteger" use="optional"/>
        <attribute name="customReportTopicName" type="xsd:string" use="optional"/>
        <attribute name="includeHeaderRow" type="xsd:boolean" use="optional"/>
        <attribute name="ccbFormat" type="xsd:boolean" use="optional"/>
      </complexType>
      <complexType name="Subscriptions">
        <sequence>
          <element name="subscription" type="policynet:Subscription" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
        </sequence>
      </complexType>
      <complexType name="searchTopicsResponseRow">
        <sequence>
          <element name="topicType" type="policynet:TopicType" minOccurs="1" maxOccurs="1"/>
          <element name="policy" type="policynet:PolicyType" minOccurs="0" maxOccurs="1" nillable="true"/>
          <element name="subscriptions" type="policynet:Subscriptions" minOccurs="1" maxOccurs="1"/>
        </sequence>
      </complexType>
      <complexType name="TopicSearchFilter">
        <sequence>
          <element name="topicType" type="policynet:TopicType" minOccurs="0" maxOccurs="unbounded"/>
        </sequence>
        <attribute name="returnOnly" type="policynet:TopicSearchRequestData" use="optional" default="allData"/>
        <attribute name="customerId" type="xsd:positiveInteger" use="optional"/>
        <attribute name="firstRow" type="xsd:int" use="required"/>
        <attribute name="lastRow" type="xsd:int" use="required"/>
      </complexType>
      <complexType name="commEvent">
        <sequence>
          <element name="deviceMacAddress" type="xsd:string" minOccurs="1" maxOccurs="1"/>
          <element name="deviceType" type="policynet:commDeviceType" minOccurs="1" maxOccurs="1"/>
          <element name="deviceStatus" type="policynet:commDeviceStatus" minOccurs="1" maxOccurs="1"/>
        </sequence>
        <attribute name="eventId" type="xsd:string" use="required"/>
        <attribute name="eventTime" type="xsd:dateTime" use="required"/>
      </complexType>
      <complexType name="MfgStatus">
        <sequence/>
        <attribute name="wanMacAddress" type="policynet:macAddress" use="required"/>
        <attribute name="utilitySerialNumber" type="policynet:UtilitySerialNumber" use="required"/>
        <attribute name="bank0Version" type="xsd:string" use="required"/>
        <attribute name="bank1Version" type="xsd:string" use="required"/>
        <attribute name="upgradeStatus" type="xsd:string" use="required"/>
        <attribute name="securityProvisioned" type="xsd:int" use="required"/>
        <attribute name="wimaxProvisioned" type="xsd:int" use="required"/>
        <attribute name="lastDeviceEvent" type="xsd:dateTime" use="required"/>
      </complexType>
      <complexType name="searchManufacturingStatusFilter">
        <sequence/>
        <attribute name="upgradeSsid" type="xsd:string" use="optional"/>
        <attribute name="firstRow" type="xsd:int" use="required"/>
        <attribute name="lastRow" type="xsd:int" use="required"/>
      </complexType>
      <complexType name="PolicyEnforcementStatus">
        <sequence/>
        <attribute name="enforcementTime" type="policynet:deviceLocalTime" use="required"/>
        <attribute name="deviceCount" type="xsd:positiveInteger" use="required"/>
        <attribute name="frequencyMinutes" type="xsd:positiveInteger" use="required"/>
        <attribute name="successReported" type="xsd:positiveInteger" use="required"/>
        <attribute name="failureReported" type="xsd:positiveInteger" use="required"/>
        <attribute name="successRate" type="xsd:decimal" use="required"/>
        <attribute name="chronicFailures" type="xsd:positiveInteger" use="required"/>
        <attribute name="avgReportTime" type="xsd:decimal" use="required"/>
        <attribute name="medReportTime" type="xsd:decimal" use="required"/>
        <attribute name="maxReportTime" type="xsd:positiveInteger" use="required"/>
        <attribute name="reportedOntime" type="xsd:decimal" use="optional"/>
        <attribute name="onlineCount" type="xsd:positiveInteger" use="optional"/>
        <attribute name="offlineCount" type="xsd:positiveInteger" use="optional"/>
        <attribute name="onlineReportedOntime" type="xsd:decimal" use="optional"/>
        <attribute name="onlineSuccessRate" type="xsd:decimal" use="optional"/>
      </complexType>
      <complexType name="PolicyEnforcementResults">
        <sequence>
          <element name="enforcementResult" type="policynet:PolicyEnforcementStatus" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
        </sequence>
      </complexType>
      <complexType name="NetworkEntryReportSearchFilter">
        <sequence/>
        <attribute name="beginDate" type="policynet:deviceLocalTime" use="optional"/>
        <attribute name="endDate" type="policynet:deviceLocalTime" use="optional"/>
        <attribute name="utilitySerialNumber" type="policynet:UtilitySerialNumber" use="optional"/>
        <attribute name="minEntryCount" type="xsd:positiveInteger" use="optional"/>
        <attribute name="firstRow" type="xsd:int" use="required"/>
        <attribute name="lastRow" type="xsd:int" use="required"/>
        <attribute name="orderBy" type="xsd:string" use="optional"/>
      </complexType>
      <complexType name="NetworkEntryReportRow">
        <sequence/>
        <attribute name="utilitySerialNumber" type="policynet:UtilitySerialNumber" use="required"/>
        <attribute name="wanMacAddress" type="policynet:macAddress" use="required"/>
        <attribute name="servicePointId" type="policynet:ServicePointId" use="required"/>
        <attribute name="lastNetworkEntry" type="xsd:dateTime" use="required"/>
        <attribute name="networkEntryCount" type="xsd:positiveInteger" use="required"/>
      </complexType>
      <complexType name="DredStatusReportOrderBy">
        <complexContent>
          <extension base="policynet:orderBy">
            <sequence/>
            <attribute name="fieldName" type="policynet:DredStatusReportFields" use="required"/>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="DredSearchFilter">
        <sequence>
          <element name="orderBy" type="policynet:DredStatusReportOrderBy" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
        </sequence>
        <attribute name="espUtilitySerialNumber" type="policynet:UtilitySerialNumber" use="optional"/>
        <attribute name="servicePointId" type="policynet:ServicePointId" use="optional"/>
        <attribute name="panStatus" type="policynet:PanStatus" use="optional"/>
        <attribute name="loadControlParticipation" type="policynet:LoadControlParticipation" use="optional"/>
        <attribute name="operationalStatus" type="policynet:OperationalStatus" use="optional"/>
        <attribute name="firstRow" type="xsd:int" use="required"/>
        <attribute name="lastRow" type="xsd:int" use="required"/>
      </complexType>
      <complexType name="DredStatusReportRow">
        <sequence/>
        <attribute name="utilitySerialNumber" type="policynet:UtilitySerialNumber" use="required"/>
        <attribute name="servicePointId" type="policynet:ServicePointId" use="required"/>
        <attribute name="espUtilitySerialNumber" type="policynet:UtilitySerialNumber" use="required"/>
        <attribute name="loadSizeKva" type="xsd:decimal" use="required"/>
        <attribute name="panStatus" type="policynet:PanStatus" use="required"/>
        <attribute name="loadControlParticipation" type="policynet:LoadControlParticipation" use="required"/>
        <attribute name="firmwareVersion" type="xsd:string" use="required"/>
        <attribute name="nextEventTime" type="policynet:deviceLocalTime" use="required"/>
        <attribute name="customerId" type="xsd:positiveInteger" use="optional"/>
        <attribute name="customerName" type="xsd:string" use="optional"/>
      </complexType>
      <complexType name="TimeDataPoint">
        <sequence/>
        <attribute name="time" type="xsd:time" use="required"/>
        <attribute name="value" type="xsd:decimal" use="required"/>
      </complexType>
      <complexType name="DemandPoints">
        <sequence>
          <element name="demand" type="policynet:TimeDataPoint" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
        </sequence>
      </complexType>
      <complexType name="LoadShedPoints">
        <sequence>
          <element name="shed" type="policynet:TimeDataPoint" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
        </sequence>
      </complexType>
      <complexType name="DeviceOperationalState">
        <sequence/>
        <attribute name="utilitySerialNumber" type="policynet:UtilitySerialNumber" use="required"/>
        <attribute name="operationalState" type="policynet:OperationalStatus" use="required"/>
        <attribute name="customerId" type="xsd:positiveInteger" use="optional"/>
      </complexType>
      <complexType name="WaterMeterOperationalState">
        <sequence/>
        <attribute name="utilitySerialNumber" type="policynet:UtilitySerialNumber" use="required"/>
        <attribute name="operationalState" type="policynet:WaterMeterOperationalStatus" use="required"/>
      </complexType>
      <complexType name="DataRetentionSetting">
        <sequence/>
        <attribute name="type" type="policynet:DataRetentionType" use="required"/>
        <attribute name="purgeFrequency" type="policynet:DataRetentionPeriod" use="required"/>
      </complexType>
      <complexType name="OpstateRestrictionSetting">
        <sequence/>
        <attribute name="allowObsoleteReanimation" type="xsd:boolean" use="optional" default="false"/>
        <attribute name="allowObsoletePurge" type="xsd:boolean" use="optional" default="false"/>
      </complexType>
      <complexType name="OffPeakDownloadWindow">
        <sequence/>
        <attribute name="downloadWindowStart" type="policynet:HourMinuteTime" use="required"/>
        <attribute name="downloadWindowEnd" type="policynet:HourMinuteTime" use="required"/>
      </complexType>
      <complexType name="ClockDriftReportRow">
        <sequence/>
        <attribute name="usn" type="policynet:UtilitySerialNumber" use="required"/>
        <attribute name="servicePointId" type="policynet:ServicePointId" use="required"/>
        <attribute name="drift" type="xsd:positiveInteger" use="required"/>
        <attribute name="localTime" type="policynet:deviceLocalTime" use="required"/>
        <attribute name="systemTime" type="policynet:deviceLocalTime" use="required"/>
      </complexType>
      <complexType name="ClockAdjustmentReportRow">
        <sequence/>
        <attribute name="usn" type="policynet:UtilitySerialNumber" use="required"/>
        <attribute name="servicePointId" type="policynet:ServicePointId" use="required"/>
        <attribute name="eventTime" type="policynet:deviceLocalTime" use="required"/>
        <attribute name="preCorrectionTime" type="policynet:deviceLocalTime" use="required"/>
        <attribute name="postCorrectionTime" type="policynet:deviceLocalTime" use="required"/>
        <attribute name="timeDelta" type="xsd:positiveInteger" use="required"/>
        <attribute name="clockSetSource" type="policynet:ClockSetSource" use="required"/>
      </complexType>
      <complexType name="RadiusAccountingReportOrderBy">
        <complexContent>
          <extension base="policynet:orderBy">
            <sequence/>
            <attribute name="fieldName" type="policynet:RadiusAccountingReportFields" use="required"/>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="RadiusAccountingReportRow">
        <sequence/>
        <attribute name="usn" type="policynet:UtilitySerialNumber" use="required"/>
        <attribute name="servicePointId" type="policynet:ServicePointId" use="optional"/>
        <attribute name="callingStationId" type="xsd:string" use="optional"/>
        <attribute name="wanMacAddress" type="policynet:macAddress" use="optional"/>
        <attribute name="baseStationSector" type="xsd:string" use="optional"/>
        <attribute name="ipAddress" type="policynet:IpAddress" use="optional"/>
        <attribute name="inputKb" type="xsd:float" use="required"/>
        <attribute name="outputKb" type="xsd:float" use="required"/>
        <attribute name="totalKb" type="xsd:float" use="required"/>
        <attribute name="totalSessionTime" type="xsd:nonNegativeInteger" use="required"/>
        <attribute name="totalSessions" type="xsd:nonNegativeInteger" use="required"/>
      </complexType>
      <complexType name="PolicyTargetSearchFilter">
        <sequence/>
        <attribute name="hideIneligibleTargets" type="xsd:boolean" use="required"/>
        <attribute name="policyType" type="policynet:PolicyTaskType" use="required"/>
        <attribute name="targetType" type="policynet:PolicyTargetType" use="required"/>
        <attribute name="filterQuery" type="policynet:String" use="optional"/>
        <attribute name="pricingMode" type="policynet:MeterPricingMode" use="optional">
          <annotation>
            <documentation>Only applicable for policyType=panPricingInformation.</documentation>
          </annotation>
        </attribute>
        <attribute name="retailerId" type="xsd:positiveInteger" use="optional"/>
        <attribute name="meterProgramId" type="xsd:string" use="optional"/>
        <attribute name="deploymentMethod" type="policynet:PolicyDeploymentMethod" use="optional">
          <annotation>
            <documentation>Deployment method for the policy.  If not specified, the policy will assume UnicastCops by DEFAULT</documentation>
          </annotation>
        </attribute>
        <attribute name="firstRow" type="xsd:positiveInteger" use="required"/>
        <attribute name="lastRow" type="xsd:positiveInteger" use="required"/>
        <attribute name="sortBy" type="policynet:PolicyTargetSort" use="optional"/>
        <attribute name="sortDirection" type="policynet:SortOrder" use="optional"/>
        <attribute name="meterType" type="xsd:string" use="optional"/>
      </complexType>
      <complexType name="EligibleTargetDevice">
        <sequence>
          <element name="ineligibilityReason" type="policynet:IneligibilityReason" minOccurs="0" maxOccurs="unbounded"/>
        </sequence>
        <attribute name="utilitySerialNumber" type="policynet:UtilitySerialNumber" use="required"/>
        <attribute name="signalStrength" type="policynet:SignalStrength" use="optional"/>
        <attribute name="linkType" type="policynet:LinkType" use="required"/>
        <attribute name="networkConnectivity" type="policynet:NetworkConnectivity" use="optional"/>
        <attribute name="eligibleType" type="policynet:EligibleType" use="required"/>
      </complexType>
      <complexType name="EligibleTargetServicePoint">
        <sequence>
          <element name="ineligibilityReason" type="policynet:IneligibilityReason" minOccurs="0" maxOccurs="unbounded"/>
        </sequence>
        <attribute name="servicePointId" type="policynet:ServicePointId" use="required"/>
        <attribute name="eligibleType" type="policynet:EligibleType" use="required"/>
      </complexType>
      <complexType name="EligibleTargetGroup">
        <sequence>
          <element name="ineligibilityReason" type="policynet:IneligibilityReason" minOccurs="0" maxOccurs="unbounded"/>
        </sequence>
        <attribute name="groupId" type="xsd:positiveInteger" use="required"/>
        <attribute name="groupName" type="xsd:string" use="required"/>
        <attribute name="memberCount" type="xsd:positiveInteger" use="required"/>
        <attribute name="eligibleType" type="policynet:EligibleType" use="required"/>
      </complexType>
      <complexType name="RetailerInfo">
        <sequence/>
        <attribute name="retailerId" type="xsd:positiveInteger" use="required"/>
        <attribute name="retailerUserId" type="policynet:RetailerUserId" use="required"/>
        <attribute name="retailerName" type="policynet:RetailerName" use="required"/>
      </complexType>
      <complexType name="DistributorInfo">
        <sequence/>
        <attribute name="distributorId" type="xsd:positiveInteger" use="required"/>
        <attribute name="distributorUserId" type="policynet:DistributorUserId" use="required"/>
        <attribute name="distributorName" type="policynet:DistributorName" use="required"/>
      </complexType>
      <complexType name="SearchDevicesBaseOrderBy">
        <sequence/>
        <attribute name="fieldName" type="policynet:SearchDevicesBaseFields" use="required"/>
        <attribute name="fieldValue" type="xsd:string" use="optional"/>
        <attribute name="sortOrder" type="policynet:SortOrder" use="optional" default="Ascending"/>
      </complexType>
      <complexType name="SearchDevicesBaseFilter">
        <sequence>
          <element name="utilitySerialNumber" type="policynet:UtilitySerialNumber" minOccurs="0" maxOccurs="1" nillable="true"/>
          <element name="deviceType" type="policynet:DeviceType" minOccurs="0" maxOccurs="8"/>
          <element name="operationalStatus" type="policynet:OperationalStatus" minOccurs="0" maxOccurs="6"/>
          <element name="orderBy" type="policynet:SearchDevicesBaseOrderBy" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
        </sequence>
        <attribute name="bindState" type="policynet:BindState" use="optional"/>
        <attribute name="groupId" type="xsd:positiveInteger" use="optional"/>
        <attribute name="customerId" type="xsd:positiveInteger" use="optional"/>
        <attribute name="manufacturer" type="xsd:string" use="optional"/>
        <attribute name="model" type="xsd:string" use="optional"/>
        <attribute name="form" type="xsd:string" use="optional"/>
        <attribute name="operatingMode" type="policynet:MeterMode" use="optional"/>
        <attribute name="phaseType" type="xsd:positiveInteger" use="optional"/>
        <attribute name="billingCycleId" type="xsd:positiveInteger" use="optional"/>
        <attribute name="firstRow" type="xsd:int" use="required"/>
        <attribute name="lastRow" type="xsd:int" use="required"/>
      </complexType>
      <complexType name="SearchDevicesBaseDevice">
        <sequence/>
        <attribute name="utilitySerialNumber" type="policynet:UtilitySerialNumber" use="required"/>
        <attribute name="parentUSN" type="policynet:UtilitySerialNumber" use="optional"/>
        <attribute name="deviceType" type="policynet:DeviceType" use="required"/>
        <attribute name="wanMacAddress" type="policynet:macAddress" use="optional"/>
        <attribute name="servicePointId" type="policynet:ServicePointId" use="optional"/>
        <attribute name="firmwareVersion" type="xsd:string" use="optional"/>
        <attribute name="baseStationSectorId" type="xsd:string" use="optional"/>
        <attribute name="signalStrength" type="xsd:decimal" use="optional"/>
        <attribute name="eui" type="policynet:PanEui" use="optional"/>
        <attribute name="programId" type="xsd:string" use="optional"/>
        <attribute name="networkConnectivity" type="policynet:NetworkConnectivity" use="required"/>
        <attribute name="customerId" type="xsd:positiveInteger" use="optional"/>
        <attribute name="customerName" type="xsd:string" use="optional"/>
        <attribute name="ipAddress" type="xsd:string" use="optional"/>
        <attribute name="manufacturer" type="xsd:string" use="optional"/>
        <attribute name="model" type="xsd:string" use="optional"/>
        <attribute name="form" type="xsd:string" use="optional"/>
        <attribute name="baseType" type="xsd:int" use="optional"/>
        <attribute name="phaseType" type="xsd:positiveInteger" use="optional"/>
        <attribute name="operatingMode" type="policynet:MeterMode" use="optional"/>
        <attribute name="billingCycleId" type="xsd:positiveInteger" use="optional"/>
        <attribute name="billingCycleName" type="xsd:string" use="optional"/>
        <attribute name="propertyNumber" type="xsd:string" use="optional"/>
        <attribute name="numberOfElements" type="xsd:positiveInteger" use="optional"/>
        <attribute name="energyStatus" type="policynet:EnergyState" use="required"/>
        <attribute name="totalRows" type="xsd:int" use="required"/>
      </complexType>
      <complexType name="EventRecord">
        <sequence/>
        <attribute name="eventCode" type="xsd:positiveInteger" use="required"/>
        <attribute name="eventCategory" type="policynet:EventCategory" use="required"/>
        <attribute name="eventName" type="xsd:string" use="optional"/>
        <attribute name="eventSeverity" type="policynet:EventSeverity" use="optional"/>
      </complexType>
      <complexType name="CustomEventTopicRecord">
        <sequence>
          <element name="eventCodes" type="xsd:int" minOccurs="0" maxOccurs="unbounded"/>
          <element name="eventCategories" type="xsd:int" minOccurs="0" maxOccurs="unbounded"/>
        </sequence>
        <attribute name="topicName" type="xsd:string" use="required"/>
      </complexType>
      <complexType name="CustomEventSearchFilter">
        <sequence/>
        <attribute name="topicId" type="xsd:positiveInteger" use="optional"/>
      </complexType>
      <complexType name="CustomEventTopicSearchRecord">
        <sequence>
          <element name="events" type="policynet:EventRecord" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          <element name="subscriptions" type="policynet:Subscriptions" minOccurs="1" maxOccurs="1"/>
        </sequence>
        <attribute name="topicId" type="xsd:positiveInteger" use="required"/>
        <attribute name="topicName" type="xsd:string" use="required"/>
        <attribute name="created" type="xsd:dateTime" use="required"/>
      </complexType>
      <complexType name="SlaRecord">
        <sequence/>
        <attribute name="slaDuration" type="xsd:positiveInteger" use="required"/>
        <attribute name="slaPercentage" type="xsd:decimal" use="required"/>
        <attribute name="reportedPercentage" type="xsd:decimal" use="optional"/>
        <attribute name="reportDate" type="policynet:deviceLocalTime" use="optional"/>
        <attribute name="timeInProgress" type="xsd:positiveInteger" use="optional"/>
        <attribute name="slaStatus" type="policynet:slaStatus" use="optional"/>
      </complexType>
      <complexType name="SlaConfigRecord">
        <sequence>
          <element name="slaRecs" type="policynet:SlaRecord" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
        </sequence>
        <attribute name="slaId" type="xsd:positiveInteger" use="optional"/>
        <attribute name="slaName" type="xsd:string" use="required"/>
        <attribute name="policyId" type="xsd:positiveInteger" use="required"/>
        <attribute name="policyName" type="xsd:string" use="optional"/>
        <attribute name="slaStartTime" type="policynet:HourMinuteString" use="optional"/>
        <attribute name="slaStatus" type="policynet:slaStatus" use="optional"/>
        <attribute name="lastUpdated" type="policynet:deviceLocalTime" use="optional"/>
      </complexType>
      <complexType name="SlaSearchFilter">
        <sequence/>
        <attribute name="slaId" type="xsd:positiveInteger" use="optional"/>
      </complexType>
      <complexType name="SlaReportParams">
        <sequence/>
        <attribute name="slaId" type="xsd:positiveInteger" use="required"/>
        <attribute name="beginDate" type="policynet:deviceLocalTime" use="required"/>
        <attribute name="endDate" type="policynet:deviceLocalTime" use="required"/>
      </complexType>
      <complexType name="OutageProbeSettings">
        <sequence/>
        <attribute name="enableProbing" type="xsd:boolean" use="required"/>
        <attribute name="outageProbeThreshold" type="xsd:unsignedInt" use="required"/>
      </complexType>
      <complexType name="Address">
        <sequence/>
        <attribute name="name" type="xsd:string" use="required"/>
        <attribute name="streetAddress" type="xsd:string" use="required"/>
        <attribute name="city" type="xsd:string" use="required"/>
        <attribute name="state" type="xsd:string" use="required"/>
        <attribute name="postalCode" type="xsd:string" use="required"/>
        <attribute name="phoneNumber" type="xsd:string" use="optional"/>
        <attribute name="country" type="xsd:string" use="optional"/>
      </complexType>
      <complexType name="Customer">
        <sequence>
          <element name="billingAddress" type="policynet:Address" minOccurs="0" maxOccurs="1" nillable="true"/>
          <element name="shippingAddress" type="policynet:Address" minOccurs="0" maxOccurs="1" nillable="true"/>
          <element name="subscriptionTypes" type="policynet:subscriptionType" minOccurs="0" maxOccurs="unbounded"/>
        </sequence>
        <attribute name="customerId" type="xsd:positiveInteger" use="optional"/>
        <attribute name="customerName" type="xsd:string" use="required"/>
        <attribute name="preferredTimeZone" type="policynet:TimeZone" use="optional"/>
        <attribute name="domainName" type="xsd:string" use="required"/>
        <attribute name="accountId" type="xsd:string" use="required"/>
        <attribute name="leadId" type="xsd:string" use="optional"/>
        <attribute name="fulfillmentId" type="xsd:string" use="optional"/>
        <attribute name="totalElectricSubscriptions" type="xsd:positiveInteger" use="optional"/>
        <attribute name="usedElectricSubscriptions" type="xsd:positiveInteger" use="optional"/>
        <attribute name="totalWaterSubscriptions" type="xsd:positiveInteger" use="optional"/>
        <attribute name="usedWaterSubscriptions" type="xsd:positiveInteger" use="optional"/>
        <attribute name="totalGasSubscriptions" type="xsd:positiveInteger" use="optional"/>
        <attribute name="usedGasSubscriptions" type="xsd:positiveInteger" use="optional"/>
        <attribute name="totalGatewaySubscriptions" type="xsd:positiveInteger" use="optional"/>
        <attribute name="usedGatewaySubscriptions" type="xsd:positiveInteger" use="optional"/>
        <attribute name="vendorId" type="xsd:positiveInteger" use="optional"/>
        <attribute name="contactName" type="xsd:string" use="optional"/>
        <attribute name="contactEmail" type="xsd:string" use="optional"/>
        <attribute name="timezoneOffset" type="xsd:int" use="optional"/>
        <attribute name="customerAction" type="policynet:customerAction" use="optional"/>
        <attribute name="accountStatus" type="policynet:accountStatus" use="optional"/>
      </complexType>
      <complexType name="CustomerSearchFilter">
        <sequence/>
        <attribute name="customerId" type="xsd:positiveInteger" use="optional"/>
      </complexType>
      <complexType name="MeterAttribute">
        <sequence/>
        <attribute name="attributeName" type="xsd:string" use="required"/>
        <attribute name="attributeValue" type="xsd:string" use="required"/>
      </complexType>
      <complexType name="MeterAttributeDefinition">
        <sequence>
          <element name="attributeValues" type="xsd:string" minOccurs="0" maxOccurs="unbounded"/>
        </sequence>
        <attribute name="attributeName" type="xsd:string" use="required"/>
      </complexType>
      <complexType name="MeterFunction">
        <sequence/>
        <attribute name="functionName" type="xsd:string" use="required"/>
        <attribute name="functionDescription" type="xsd:string" use="optional"/>
      </complexType>
      <complexType name="FormClassDefinition">
        <sequence>
          <element name="voltages" type="xsd:string" minOccurs="0" maxOccurs="unbounded"/>
          <element name="frequencies" type="xsd:string" minOccurs="0" maxOccurs="unbounded"/>
        </sequence>
        <attribute name="formClass" type="xsd:string" use="required"/>
      </complexType>
      <complexType name="MeterOptions">
        <sequence>
          <element name="formClassDefinitions" type="policynet:FormClassDefinition" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          <element name="meterFunctions" type="policynet:MeterFunction" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          <element name="attributeDefinitions" type="policynet:MeterAttributeDefinition" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
        </sequence>
        <attribute name="meterCategory" type="xsd:string" use="required"/>
        <attribute name="cardType" type="xsd:string" use="required"/>
      </complexType>
      <complexType name="MeterOrderTemplate">
        <sequence>
          <element name="meterFunctions" type="policynet:MeterFunction" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          <element name="meterAttributes" type="policynet:MeterAttribute" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
        </sequence>
        <attribute name="templateId" type="xsd:positiveInteger" use="optional"/>
        <attribute name="templateName" type="xsd:string" use="optional"/>
        <attribute name="meterProgramId" type="xsd:string" use="optional"/>
        <attribute name="meterCategory" type="xsd:string" use="required"/>
        <attribute name="formClass" type="xsd:string" use="required"/>
        <attribute name="voltage" type="xsd:string" use="required"/>
        <attribute name="frequency" type="xsd:string" use="required"/>
        <attribute name="cardType" type="xsd:string" use="required"/>
      </complexType>
      <complexType name="MeterOrderItem">
        <sequence>
          <element name="orderTemplate" type="policynet:MeterOrderTemplate" minOccurs="1" maxOccurs="1"/>
        </sequence>
        <attribute name="startingMeterId" type="xsd:positiveInteger" use="optional"/>
        <attribute name="quantity" type="xsd:positiveInteger" use="required"/>
      </complexType>
      <complexType name="MeterOrder">
        <sequence>
          <element name="shippingAddress" type="policynet:Address" minOccurs="1" maxOccurs="1"/>
          <element name="billingAddress" type="policynet:Address" minOccurs="1" maxOccurs="1"/>
          <element name="orderItems" type="policynet:MeterOrderItem" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
        </sequence>
        <attribute name="orderId" type="xsd:positiveInteger" use="optional"/>
        <attribute name="customerId" type="xsd:positiveInteger" use="optional"/>
        <attribute name="customerName" type="xsd:string" use="optional"/>
        <attribute name="createDate" type="policynet:deviceLocalTime" use="optional"/>
        <attribute name="orderStatus" type="policynet:OrderStatus" use="optional"/>
      </complexType>
      <complexType name="MeterOrderSearchFilter">
        <sequence/>
        <attribute name="orderId" type="xsd:positiveInteger" use="optional"/>
        <attribute name="customerId" type="xsd:positiveInteger" use="optional"/>
      </complexType>
      <complexType name="ConsumerTypeSearchFilter">
        <sequence/>
        <attribute name="topicType" type="policynet:TopicType" use="optional"/>
        <attribute name="policyId" type="xsd:positiveInteger" use="optional"/>
      </complexType>
      <complexType name="ConsumerType">
        <sequence/>
        <attribute name="consumerTypeId" type="xsd:positiveInteger" use="required"/>
        <attribute name="consumerTypeName" type="xsd:string" use="required"/>
      </complexType>
      <complexType name="MeterOrderTemplateSearchFilter">
        <sequence/>
        <attribute name="templateId" type="xsd:positiveInteger" use="optional"/>
      </complexType>
      <complexType name="CustomerDetailsSearchFilter">
        <sequence/>
        <attribute name="customerId" type="xsd:positiveInteger" use="optional"/>
      </complexType>
      <complexType name="SecurityQuestion">
        <sequence/>
        <attribute name="questionId" type="xsd:positiveInteger" use="required"/>
        <attribute name="question" type="xsd:string" use="required"/>
      </complexType>
      <complexType name="verifyUserSearchFilter">
        <sequence>
          <element name="securityQuestions" type="policynet:UserSecurityQuestion" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
        </sequence>
        <attribute name="username" type="xsd:string" use="required"/>
      </complexType>
      <complexType name="DeviceHistorySearchFilter">
        <sequence>
          <element name="utilitySerialNumber" type="policynet:UtilitySerialNumber" minOccurs="1" maxOccurs="1"/>
        </sequence>
        <attribute name="customerId" type="xsd:positiveInteger" use="optional"/>
      </complexType>
      <complexType name="VoltageBandSettingsSearchFilter">
        <sequence/>
        <attribute name="customerId" type="xsd:positiveInteger" use="optional"/>
      </complexType>
      <complexType name="PasswordReportSearchFilter">
        <sequence>
          <element name="usn" type="policynet:UtilitySerialNumber" minOccurs="0" maxOccurs="unbounded"/>
        </sequence>
        <attribute name="customerId" type="xsd:positiveInteger" use="optional"/>
      </complexType>
      <complexType name="EmailAddressSearchFilter">
        <sequence/>
        <attribute name="userId" type="xsd:positiveInteger" use="optional"/>
      </complexType>
      <complexType name="EmailToSmsAddressSearchFilter">
        <sequence/>
        <attribute name="userId" type="xsd:positiveInteger" use="optional"/>
      </complexType>
      <complexType name="createWaterMeterStatsReportSearchFilter">
        <sequence/>
        <attribute name="beginDate" type="policynet:deviceLocalTime" use="required"/>
        <attribute name="endDate" type="policynet:deviceLocalTime" use="required"/>
        <attribute name="utilitySerialNumber" type="policynet:UtilitySerialNumber" use="optional"/>
        <attribute name="aggregateType" type="policynet:AggregateType" use="required"/>
        <attribute name="customerId" type="xsd:positiveInteger" use="optional"/>
        <attribute name="firstRow" type="xsd:int" use="optional"/>
        <attribute name="lastRow" type="xsd:int" use="optional"/>
      </complexType>
      <complexType name="WaterMeterStatsRow">
        <sequence>
          <element name="value" type="policynet:ScaledQty" minOccurs="1" maxOccurs="1"/>
          <element name="events" type="policynet:EventAlert" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
        </sequence>
        <attribute name="time" type="policynet:deviceLocalTime" use="required"/>
      </complexType>
      <complexType name="WaterMeterAlertsRow">
        <sequence>
          <element name="events" type="policynet:EventAlert" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
        </sequence>
        <attribute name="meterId" type="policynet:UtilitySerialNumber" use="required"/>
        <attribute name="servicePointId" type="policynet:ServicePointId" use="required"/>
        <attribute name="XCoordinate" type="xsd:decimal" use="required"/>
        <attribute name="YCoordinate" type="xsd:decimal" use="required"/>
        <attribute name="address" type="xsd:string" use="required"/>
      </complexType>
      <complexType name="WaterMeterAlertsSearchFilter">
        <sequence/>
        <attribute name="customerId" type="xsd:positiveInteger" use="optional"/>
      </complexType>
      <complexType name="Coordinates">
        <sequence/>
        <attribute name="XCoordinate" type="xsd:decimal" use="required"/>
        <attribute name="YCoordinate" type="xsd:decimal" use="required"/>
      </complexType>
      <complexType name="AverageCoordinatesSearchFilter">
        <sequence/>
        <attribute name="customerId" type="xsd:positiveInteger" use="optional"/>
      </complexType>
      <complexType name="createMeterPasswordReportSearchFilter">
        <sequence>
          <element name="usns" type="policynet:UtilitySerialNumber" minOccurs="0" maxOccurs="unbounded"/>
        </sequence>
        <attribute name="customerId" type="xsd:positiveInteger" use="optional"/>
      </complexType>
      <complexType name="SmccRecord">
        <sequence/>
        <attribute name="imei" type="xsd:string" use="required"/>
        <attribute name="customerId" type="xsd:string" use="required"/>
      </complexType>
      <complexType name="SmccRecords">
        <sequence>
          <element name="smccRecords" type="policynet:SmccRecord" minOccurs="1" maxOccurs="unbounded" nillable="false"/>
        </sequence>
      </complexType>
      <complexType name="IdNamePair">
        <sequence/>
        <attribute name="id" type="xsd:positiveInteger" use="required"/>
        <attribute name="name" type="xsd:string" use="required"/>
      </complexType>
      <complexType name="MapDeviceRecord">
        <sequence>
          <element name="energyStatus" type="policynet:EnergyState" minOccurs="0" maxOccurs="1" nillable="true"/>
          <element name="events" type="policynet:EventAlert" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
        </sequence>
        <attribute name="utilitySerialNumber" type="policynet:UtilitySerialNumber" use="optional"/>
        <attribute name="imei" type="xsd:string" use="optional"/>
        <attribute name="deviceType" type="policynet:DeviceType" use="optional"/>
        <attribute name="servicePointId" type="xsd:string" use="optional"/>
        <attribute name="address" type="xsd:string" use="optional"/>
        <attribute name="XCoordinate" type="xsd:decimal" use="optional"/>
        <attribute name="YCoordinate" type="xsd:decimal" use="optional"/>
        <attribute name="feederId" type="xsd:string" use="optional"/>
        <attribute name="transformerId" type="xsd:string" use="optional"/>
        <attribute name="substationId" type="xsd:string" use="optional"/>
        <attribute name="waterMainId" type="xsd:string" use="optional"/>
        <attribute name="waterDistrictId" type="xsd:string" use="optional"/>
        <attribute name="maxDemand" type="xsd:decimal" use="optional"/>
        <attribute name="voltage" type="xsd:decimal" use="optional"/>
        <attribute name="powerFactor" type="xsd:decimal" use="optional"/>
        <attribute name="loadProfile" type="xsd:decimal" use="optional"/>
        <attribute name="readValue" type="xsd:decimal" use="optional"/>
        <attribute name="unitOfMeasure" type="xsd:string" use="optional"/>
      </complexType>
      <complexType name="MapTimeSlice">
        <sequence>
          <element name="devices" type="policynet:MapDeviceRecord" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
        </sequence>
        <attribute name="time" type="policynet:deviceLocalTime" use="required"/>
        <attribute name="aggregateValue" type="xsd:decimal" use="optional"/>
        <attribute name="districtMeterValue" type="xsd:decimal" use="optional"/>
        <attribute name="unitOfMeasure" type="xsd:string" use="optional"/>
      </complexType>
      <complexType name="point">
        <sequence/>
        <attribute name="XCoordinate" type="xsd:decimal" use="required"/>
        <attribute name="YCoordinate" type="xsd:decimal" use="required"/>
        <attribute name="displaySequence" type="xsd:positiveInteger" use="optional"/>
      </complexType>
      <complexType name="MapViewerFilter">
        <sequence>
          <element name="outageTypes" type="policynet:OutageType" minOccurs="0" maxOccurs="unbounded"/>
          <element name="events" type="policynet:EventRecord" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
        </sequence>
        <attribute name="utilitySerialNumber" type="xsd:string" use="optional"/>
        <attribute name="feederId" type="xsd:string" use="optional"/>
        <attribute name="substationId" type="xsd:string" use="optional"/>
        <attribute name="groupId" type="xsd:positiveInteger" use="optional"/>
        <attribute name="beginDate" type="policynet:deviceLocalTime" use="optional"/>
        <attribute name="customerId" type="xsd:positiveInteger" use="optional"/>
        <attribute name="endDate" type="policynet:deviceLocalTime" use="optional"/>
        <attribute name="aggregateType" type="policynet:AggregateType" use="optional"/>
        <attribute name="deviceType" type="policynet:DeviceType" use="optional"/>
        <attribute name="customerTypeId" type="xsd:positiveInteger" use="optional"/>
        <attribute name="customerSizeId" type="xsd:positiveInteger" use="optional"/>
        <attribute name="billingCycleId" type="xsd:positiveInteger" use="optional"/>
        <attribute name="firstRow" type="xsd:positiveInteger" use="optional"/>
        <attribute name="lastRow" type="xsd:positiveInteger" use="optional"/>
        <attribute name="waterMainId" type="xsd:string" use="optional"/>
        <attribute name="reservoirId" type="xsd:string" use="optional"/>
        <attribute name="waterDistrictId" type="xsd:string" use="optional"/>
      </complexType>
      <complexType name="feeder">
        <sequence/>
        <attribute name="feederId" type="xsd:string" use="optional"/>
        <attribute name="meterCount" type="xsd:positiveInteger" use="optional"/>
        <attribute name="XCoordinate" type="xsd:decimal" use="optional"/>
        <attribute name="YCoordinate" type="xsd:decimal" use="optional"/>
      </complexType>
      <complexType name="Transformer">
        <sequence>
          <element name="feeders" type="policynet:feeder" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
        </sequence>
        <attribute name="transformerId" type="xsd:string" use="required"/>
        <attribute name="meterCount" type="xsd:positiveInteger" use="required"/>
      </complexType>
      <complexType name="Substation">
        <sequence>
          <element name="polygonVertices" type="policynet:point" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          <element name="feeders" type="policynet:feeder" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          <element name="devices" type="policynet:MapDeviceRecord" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
        </sequence>
        <attribute name="substationId" type="xsd:string" use="required"/>
        <attribute name="XCoordinate" type="xsd:decimal" use="optional"/>
        <attribute name="YCoordinate" type="xsd:decimal" use="optional"/>
        <attribute name="meterCount" type="xsd:positiveInteger" use="required"/>
        <attribute name="feederCount" type="xsd:positiveInteger" use="required"/>
      </complexType>
      <complexType name="MeterTypeSearchFilter">
        <sequence/>
        <attribute name="customerId" type="xsd:positiveInteger" use="optional"/>
        <attribute name="rippleEligible" type="xsd:boolean" use="optional"/>
      </complexType>
      <complexType name="MeterTypeModel">
        <sequence/>
        <attribute name="meterType" type="xsd:string" use="required"/>
        <attribute name="rippleEligible" type="xsd:boolean" use="optional"/>
        <attribute name="meterCount" type="xsd:positiveInteger" use="required"/>
      </complexType>
      <complexType name="searchMapSubstationsFilter">
        <sequence/>
        <attribute name="substationId" type="xsd:string" use="optional"/>
      </complexType>
      <complexType name="searchMapDevicesFilter">
        <sequence/>
        <attribute name="feederId" type="xsd:string" use="optional"/>
      </complexType>
      <complexType name="BandDefinition">
        <sequence/>
        <attribute name="bandType" type="policynet:BandType" use="required"/>
        <attribute name="bandTypeName" type="xsd:string" use="required"/>
        <attribute name="bandTypeDescription" type="xsd:string" use="required"/>
        <attribute name="minValue" type="xsd:decimal" use="required"/>
        <attribute name="maxValue" type="xsd:decimal" use="required"/>
      </complexType>
      <complexType name="Band">
        <sequence/>
        <attribute name="bandId" type="xsd:positiveInteger" use="required"/>
        <attribute name="bandName" type="xsd:string" use="required"/>
        <attribute name="maxValue" type="xsd:decimal" use="optional"/>
        <attribute name="minValue" type="xsd:decimal" use="optional"/>
        <attribute name="color" type="policynet:color" use="required"/>
      </complexType>
      <complexType name="BandSettings">
        <sequence>
          <element name="bands" type="policynet:Band" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
        </sequence>
      </complexType>
      <complexType name="BandSettingsFilter">
        <sequence/>
        <attribute name="bandType" type="policynet:BandType" use="required"/>
      </complexType>
      <complexType name="BandDefinitionsFilter">
        <sequence/>
        <attribute name="bandType" type="policynet:BandType" use="optional"/>
      </complexType>
      <complexType name="searchBandDefinitionsResponse">
        <sequence>
          <element name="bandDefinitions" type="policynet:BandDefinition" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
        </sequence>
      </complexType>
      <complexType name="WaterMain">
        <sequence/>
        <attribute name="waterMainId" type="xsd:string" use="optional"/>
        <attribute name="meterCount" type="xsd:positiveInteger" use="optional"/>
        <attribute name="XCoordinate" type="xsd:decimal" use="optional"/>
        <attribute name="YCoordinate" type="xsd:decimal" use="optional"/>
      </complexType>
      <complexType name="WaterDistrict">
        <sequence>
          <element name="polygonVertices" type="policynet:point" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          <element name="waterMains" type="policynet:WaterMain" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          <element name="devices" type="policynet:MapDeviceRecord" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
        </sequence>
        <attribute name="waterDistrictId" type="xsd:string" use="required"/>
        <attribute name="XCoordinate" type="xsd:decimal" use="optional"/>
        <attribute name="YCoordinate" type="xsd:decimal" use="optional"/>
        <attribute name="meterCount" type="xsd:positiveInteger" use="required"/>
        <attribute name="waterMainCount" type="xsd:positiveInteger" use="required"/>
      </complexType>
      <complexType name="HanDevice">
        <sequence>
          <element name="deviceType" type="policynet:PanDeviceType" minOccurs="1" maxOccurs="1"/>
        </sequence>
        <attribute name="utilitySerialNumber" type="policynet:UtilitySerialNumber" use="required"/>
        <attribute name="manufacturer" type="xsd:string" use="required"/>
        <attribute name="model" type="xsd:string" use="required"/>
      </complexType>
      <complexType name="UserInfo">
        <sequence/>
        <attribute name="userName" type="policynet:UserName" use="required"/>
        <attribute name="firstName" type="xsd:string" use="required"/>
        <attribute name="lastName" type="xsd:string" use="required"/>
        <attribute name="emailAddress" type="xsd:string" use="required"/>
      </complexType>
      <complexType name="UserInfoSearchFilter">
        <sequence/>
        <attribute name="userId" type="xsd:positiveInteger" use="optional"/>
      </complexType>
      <complexType name="DeviceUpdate">
        <sequence/>
        <attribute name="utilitySerialNumber" type="policynet:UtilitySerialNumber" use="required"/>
        <attribute name="comments" type="xsd:string" use="optional"/>
      </complexType>
      <complexType name="MeterCommsType">
        <sequence>
          <element name="commsTypes" type="xsd:string" minOccurs="0" maxOccurs="unbounded"/>
        </sequence>
        <attribute name="meterType" type="xsd:string" use="required"/>
        <attribute name="deviceType" type="policynet:DeviceType" use="required"/>
      </complexType>
      <complexType name="MeterCommsTypeSearchFilter">
        <sequence/>
        <attribute name="customerId" type="xsd:positiveInteger" use="optional"/>
      </complexType>
      <complexType name="MeterSubscriptionItem">
        <sequence/>
        <attribute name="meterType" type="xsd:string" use="required"/>
        <attribute name="commsType" type="xsd:string" use="required"/>
        <attribute name="meterPassword" type="xsd:string" use="optional"/>
        <attribute name="quantity" type="xsd:positiveInteger" use="required"/>
      </complexType>
      <complexType name="MeterSubscription">
        <sequence>
          <element name="subscriptionItems" type="policynet:MeterSubscriptionItem" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
        </sequence>
        <attribute name="meterSubscriptionId" type="xsd:positiveInteger" use="optional"/>
        <attribute name="customerId" type="xsd:positiveInteger" use="optional"/>
        <attribute name="vendorId" type="xsd:positiveInteger" use="optional"/>
        <attribute name="customerName" type="xsd:string" use="optional"/>
        <attribute name="createDate" type="policynet:deviceLocalTime" use="optional"/>
      </complexType>
      <complexType name="MeterSubscriptionsSearchFilter">
        <sequence/>
        <attribute name="customerId" type="xsd:positiveInteger" use="optional"/>
        <attribute name="meterSubscriptionId" type="xsd:positiveInteger" use="optional"/>
      </complexType>
      <complexType name="Vendor">
        <sequence>
          <element name="address" type="policynet:Address" minOccurs="1" maxOccurs="1"/>
        </sequence>
        <attribute name="vendorId" type="xsd:positiveInteger" use="required"/>
        <attribute name="vendorName" type="xsd:string" use="required"/>
        <attribute name="selected" type="xsd:boolean" use="optional"/>
      </complexType>
      <complexType name="VendorSearchFilter">
        <sequence/>
        <attribute name="vendorId" type="xsd:positiveInteger" use="optional"/>
      </complexType>
      <complexType name="meterProgramConfig">
        <sequence>
          <element name="availableMeterPrograms" type="xsd:string" minOccurs="0" maxOccurs="unbounded"/>
        </sequence>
        <attribute name="meterMode" type="policynet:MeterMode" use="required"/>
        <attribute name="defaultMeterProgram" type="xsd:string" use="optional"/>
      </complexType>
      <complexType name="provisioningDefaults">
        <sequence>
          <element name="meterPrograms" type="policynet:meterProgramConfig" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
        </sequence>
        <attribute name="meterTypeId" type="xsd:positiveInteger" use="required"/>
        <attribute name="meterTypeName" type="xsd:string" use="optional"/>
        <attribute name="defaultPassword" type="xsd:string" use="optional"/>
      </complexType>
      <complexType name="ProvisioningDefaultsSearchFilter">
        <sequence/>
        <attribute name="meterTypeId" type="xsd:positiveInteger" use="optional"/>
      </complexType>
      <complexType name="AECredential">
        <sequence/>
        <attribute name="applicationId" type="xsd:string" use="required"/>
        <attribute name="credentialId" type="xsd:string" use="optional"/>
      </complexType>
      <complexType name="AECredentialsSearchFilter">
        <sequence/>
        <attribute name="applicationId" type="xsd:string" use="optional"/>
      </complexType>
      <complexType name="ExportColumn">
        <sequence/>
        <attribute name="columnId" type="xsd:positiveInteger" use="optional"/>
        <attribute name="columnName" type="xsd:string" use="optional"/>
        <attribute name="columnPosition" type="xsd:positiveInteger" use="optional"/>
        <attribute name="userDefined" type="xsd:boolean" use="optional"/>
        <attribute name="userDefinedString" type="xsd:string" use="optional"/>
      </complexType>
      <complexType name="ReportTemplate">
        <sequence>
          <element name="exportColumns" type="policynet:ExportColumn" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
        </sequence>
        <attribute name="reportType" type="policynet:ReportType" use="required"/>
        <attribute name="templateId" type="xsd:positiveInteger" use="optional"/>
        <attribute name="templateName" type="xsd:string" use="optional"/>
      </complexType>
      <complexType name="ExportColumnsSearchFilter">
        <sequence>
          <element name="targets" type="policynet:Targets" minOccurs="1" maxOccurs="1"/>
        </sequence>
        <attribute name="reportType" type="policynet:ReportType" use="required"/>
      </complexType>
      <complexType name="ReportTemplateSearchFilter">
        <sequence/>
        <attribute name="templateId" type="xsd:positiveInteger" use="optional"/>
        <attribute name="reportType" type="policynet:ReportType" use="optional"/>
      </complexType>
      <complexType name="searchReportTemplatesResponse">
        <sequence>
          <element name="reportTemplates" type="policynet:ReportTemplate" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
        </sequence>
      </complexType>
      <complexType name="DataExportTargetSearchFilter">
        <sequence/>
        <attribute name="targetType" type="policynet:PolicyTargetType" use="required"/>
        <attribute name="nameFilter" type="xsd:string" use="optional"/>
        <attribute name="firstRow" type="xsd:positiveInteger" use="optional"/>
        <attribute name="lastRow" type="xsd:positiveInteger" use="optional"/>
      </complexType>
      <complexType name="DataExportDevice">
        <sequence/>
        <attribute name="utilitySerialNumber" type="xsd:string" use="required"/>
      </complexType>
      <complexType name="DataExportGroup">
        <sequence/>
        <attribute name="groupId" type="xsd:positiveInteger" use="required"/>
        <attribute name="groupName" type="xsd:string" use="required"/>
        <attribute name="memberCount" type="xsd:positiveInteger" use="required"/>
      </complexType>
      <complexType name="DataExportTopic">
        <sequence>
          <element name="targetDevices" type="policynet:UtilitySerialNumber" minOccurs="0" maxOccurs="unbounded"/>
          <element name="targetGroupIds" type="xsd:int" minOccurs="0" maxOccurs="unbounded"/>
          <element name="targetGroups" type="policynet:DataExportGroup" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          <element name="exportColumns" type="policynet:ExportColumn" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          <element name="events" type="policynet:EventRecord" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          <element name="subscriptions" type="policynet:Subscriptions" minOccurs="1" maxOccurs="1"/>
        </sequence>
        <attribute name="topicId" type="xsd:positiveInteger" use="optional"/>
        <attribute name="topicName" type="xsd:string" use="required"/>
        <attribute name="reportType" type="policynet:ReportType" use="required"/>
        <attribute name="delimiter" type="policynet:Delimiter" use="required"/>
        <attribute name="customerId" type="xsd:positiveInteger" use="optional"/>
        <attribute name="customerName" type="xsd:string" use="optional"/>
      </complexType>
      <complexType name="DataExportTopicSearchFilter">
        <sequence/>
        <attribute name="topicId" type="xsd:positiveInteger" use="optional"/>
        <attribute name="policyId" type="xsd:positiveInteger" use="optional"/>
        <attribute name="topicType" type="policynet:TopicType" use="optional"/>
        <attribute name="customerId" type="xsd:positiveInteger" use="optional"/>
      </complexType>
      <complexType name="ExportParams">
        <sequence/>
        <attribute name="topicId" type="xsd:positiveInteger" use="required"/>
        <attribute name="beginTime" type="policynet:deviceLocalTime" use="required"/>
        <attribute name="endTime" type="policynet:deviceLocalTime" use="required"/>
        <attribute name="includeHeaderRow" type="xsd:boolean" use="optional"/>
      </complexType>
      <complexType name="AuthConfig">
        <sequence/>
        <attribute name="enableMultiFactorAuth" type="xsd:boolean" use="required"/>
        <attribute name="tokenDuration" type="xsd:positiveInteger" use="optional"/>
      </complexType>
      <complexType name="DemandReading">
        <sequence/>
        <attribute name="utilitySerialNumber" type="policynet:UtilitySerialNumber" use="optional"/>
        <attribute name="groupId" type="xsd:positiveInteger" use="optional"/>
        <attribute name="readTime" type="policynet:deviceLocalTime" use="required"/>
        <attribute name="valuePhaseA" type="xsd:double" use="optional"/>
        <attribute name="valuePhaseB" type="xsd:double" use="optional"/>
        <attribute name="valuePhaseC" type="xsd:double" use="optional"/>
        <attribute name="uom" type="xsd:string" use="optional"/>
      </complexType>
      <complexType name="SgDevices">
        <sequence>
          <element name="meter" type="policynet:Meter" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
        </sequence>
      </complexType>
      <complexType name="TransportTypeSearchFilter">
        <sequence/>
        <attribute name="topicType" type="policynet:TopicType" use="optional"/>
        <attribute name="policyId" type="xsd:positiveInteger" use="optional"/>
      </complexType>
      <complexType name="TransportType">
        <sequence>
          <element name="consumerTypes" type="policynet:ConsumerType" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          <element name="consumerKeys" type="policnet:ConsumerKey" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
        </sequence>
        <attribute name="transportTypeId" type="xsd:positiveInteger" use="required"/>
        <attribute name="transportType" type="xsd:string" use="required"/>
      </complexType>
      <complexType name="UserEventsFilter">
        <sequence/>
        <attribute name="customerId" type="xsd:positiveInteger" use="optional"/>
      </complexType>
      <complexType name="ScmDailyReportRow">
        <sequence/>
        <attribute name="customerId" type="xsd:positiveInteger" use="required"/>
        <attribute name="customerName" type="xsd:string" use="required"/>
        <attribute name="accountRef" type="xsd:string" use="required"/>
        <attribute name="subscriptionStartDate" type="policynet:deviceLocalTime" use="required"/>
        <attribute name="transactionDate" type="policynet:deviceLocalTime" use="required"/>
        <attribute name="totalAdds" type="xsd:positiveInteger" use="required"/>
        <attribute name="totalDeletes" type="xsd:positiveInteger" use="required"/>
        <attribute name="net" type="xsd:int" use="required"/>
        <attribute name="balance" type="xsd:int" use="required"/>
      </complexType>
      <complexType name="ScmCycleReportRow">
        <sequence/>
        <attribute name="customerId" type="xsd:positiveInteger" use="required"/>
        <attribute name="customerName" type="xsd:string" use="required"/>
        <attribute name="accountRef" type="xsd:string" use="required"/>
        <attribute name="subscriptionStartDate" type="policynet:deviceLocalTime" use="required"/>
        <attribute name="cycleBeginDate" type="policynet:deviceLocalTime" use="required"/>
        <attribute name="cycleEndDate" type="policynet:deviceLocalTime" use="required"/>
        <attribute name="totalAdds" type="xsd:positiveInteger" use="required"/>
        <attribute name="totalDeletes" type="xsd:positiveInteger" use="required"/>
        <attribute name="net" type="xsd:int" use="required"/>
        <attribute name="balance" type="xsd:int" use="required"/>
      </complexType>
      <complexType name="ScmLineItem">
        <sequence/>
        <attribute name="fulfillmentId" type="xsd:string" use="required"/>
        <attribute name="transactionType" type="xsd:string" use="required"/>
        <attribute name="item" type="xsd:string" use="required"/>
        <attribute name="pricePlanPackage" type="xsd:string" use="required"/>
        <attribute name="sda" type="xsd:string" use="required"/>
        <attribute name="contacts" type="xsd:string" use="required"/>
        <attribute name="unitData" type="xsd:string" use="required"/>
        <attribute name="info" type="xsd:string" use="required"/>
      </complexType>
      <complexType name="ScmUnit">
        <sequence/>
        <attribute name="deviceId" type="xsd:string" use="required"/>
        <attribute name="meterId" type="xsd:string" use="required"/>
        <attribute name="mdn" type="xsd:string" use="required"/>
      </complexType>
      <complexType name="ScmTransactionReportRow">
        <sequence>
          <element name="lineItem" type="policynet:ScmLineItem" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          <element name="unit" type="policynet:ScmUnit" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
        </sequence>
        <attribute name="customerId" type="xsd:positiveInteger" use="required"/>
        <attribute name="customerName" type="xsd:string" use="required"/>
        <attribute name="accountRef" type="xsd:string" use="required"/>
        <attribute name="subscriptionStartDate" type="policynet:deviceLocalTime" use="required"/>
        <attribute name="transactionDate" type="policynet:deviceLocalTime" use="required"/>
        <attribute name="transactionType" type="xsd:string" use="required"/>
        <attribute name="numLineItems" type="xsd:positiveInteger" use="optional"/>
        <attribute name="scmAction" type="xsd:string" use="required"/>
        <attribute name="numUnits" type="xsd:positiveInteger" use="optional"/>
      </complexType>
      <complexType name="ScmReportSearchFilter">
        <sequence/>
        <attribute name="customerId" type="xsd:positiveInteger" use="optional"/>
        <attribute name="beginDate" type="policynet:deviceLocalTime" use="optional"/>
        <attribute name="endDate" type="policynet:deviceLocalTime" use="optional"/>
        <attribute name="cycle" type="policynet:ScmSubscriptionCycle" use="optional"/>
      </complexType>
      <complexType name="AosShipfileRecord">
        <sequence/>
        <attribute name="customerId" type="xsd:string" use="required"/>
        <attribute name="imei" type="xsd:string" use="required"/>
        <attribute name="iccid" type="xsd:string" use="required"/>
        <attribute name="aosPsk" type="xsd:string" use="optional"/>
        <attribute name="cpn" type="xsd:string" use="optional"/>
      </complexType>
      <complexType name="BlinkReportRow">
        <sequence/>
        <attribute name="utilitySerialNumber" type="policynet:UtilitySerialNumber" use="optional"/>
        <attribute name="servicePointId" type="policynet:ServicePointId" use="optional"/>
        <attribute name="eventTime" type="policynet:deviceLocalTime" use="required"/>
        <attribute name="blinkDuration" type="xsd:double" use="optional"/>
      </complexType>
      <complexType name="ScmLicenseReportRow">
        <sequence/>
        <attribute name="customerId" type="xsd:positiveInteger" use="required"/>
        <attribute name="customerName" type="xsd:string" use="required"/>
        <attribute name="accountRef" type="xsd:string" use="required"/>
        <attribute name="deviceId" type="xsd:string" use="required"/>
        <attribute name="meterId" type="xsd:string" use="required"/>
        <attribute name="origFulfillmentId" type="xsd:string" use="optional"/>
        <attribute name="batchFulfillmentId" type="xsd:string" use="optional"/>
        <attribute name="contentId" type="xsd:string" use="optional"/>
        <attribute name="pppId" type="xsd:string" use="optional"/>
        <attribute name="pppName" type="xsd:string" use="optional"/>
        <attribute name="purchasePrice" type="xsd:string" use="optional"/>
        <attribute name="pppStartDate" type="xsd:string" use="optional"/>
        <attribute name="pppTerm" type="xsd:string" use="optional"/>
        <attribute name="pppEndDate" type="xsd:string" use="optional"/>
        <attribute name="yearsLeftOnPPP" type="xsd:decimal" use="optional"/>
        <attribute name="monthsLeftOnPPP" type="xsd:decimal" use="optional"/>
        <attribute name="daysLeftOnPPP" type="xsd:decimal" use="optional"/>
        <attribute name="secondaryPppId" type="xsd:string" use="optional"/>
        <attribute name="secondaryPppName" type="xsd:string" use="optional"/>
        <attribute name="secondaryPppStartDate" type="xsd:string" use="optional"/>
        <attribute name="secondaryPppTerm" type="xsd:string" use="optional"/>
        <attribute name="secondaryPppRenewalDate" type="xsd:string" use="optional"/>
        <attribute name="transactionDate" type="xsd:string" use="optional"/>
        <attribute name="transactionTime" type="xsd:string" use="optional"/>
      </complexType>
      <complexType name="ScmTransactionHistoryReportRow">
        <sequence/>
        <attribute name="customerId" type="xsd:positiveInteger" use="required"/>
        <attribute name="customerName" type="xsd:string" use="required"/>
        <attribute name="accountRef" type="xsd:string" use="required"/>
        <attribute name="transactionDate" type="xsd:string" use="optional"/>
        <attribute name="transactionTime" type="xsd:string" use="optional"/>
        <attribute name="deviceId" type="xsd:string" use="required"/>
        <attribute name="meterId" type="xsd:string" use="required"/>
        <attribute name="scmAction" type="xsd:string" use="optional"/>
        <attribute name="origFulfillmentId" type="xsd:string" use="optional"/>
        <attribute name="batchFulfillmentId" type="xsd:string" use="optional"/>
        <attribute name="contentId" type="xsd:string" use="optional"/>
        <attribute name="quantity" type="xsd:positiveInteger" use="optional"/>
        <attribute name="pppId" type="xsd:string" use="optional"/>
        <attribute name="pppName" type="xsd:string" use="optional"/>
        <attribute name="purchasePrice" type="xsd:string" use="optional"/>
        <attribute name="totalCheckoutPrice" type="xsd:string" use="optional"/>
        <attribute name="pppStartDate" type="xsd:string" use="optional"/>
        <attribute name="pppTerm" type="xsd:string" use="optional"/>
        <attribute name="pppEndDate" type="xsd:string" use="optional"/>
        <attribute name="yearsLeftOnPPP" type="xsd:decimal" use="optional"/>
        <attribute name="monthsLeftOnPPP" type="xsd:decimal" use="optional"/>
        <attribute name="daysLeftOnPPP" type="xsd:decimal" use="optional"/>
        <attribute name="secondaryPppId" type="xsd:string" use="optional"/>
        <attribute name="secondaryPppName" type="xsd:string" use="optional"/>
        <attribute name="secondaryPppStartDate" type="xsd:string" use="optional"/>
        <attribute name="secondaryPppTerm" type="xsd:string" use="optional"/>
        <attribute name="secondaryPppRenewalDate" type="xsd:string" use="optional"/>
      </complexType>
      <complexType name="ScmYearlyReportRow">
        <sequence/>
        <attribute name="customerId" type="xsd:positiveInteger" use="required"/>
        <attribute name="customerName" type="xsd:string" use="required"/>
        <attribute name="year" type="xsd:string" use="required"/>
        <attribute name="totalLicenses" type="xsd:positiveInteger" use="required"/>
        <attribute name="cumulativeLicenses" type="xsd:positiveInteger" use="required"/>
      </complexType>
      <complexType name="ScmMonthlyReportRow">
        <sequence/>
        <attribute name="customerId" type="xsd:positiveInteger" use="required"/>
        <attribute name="customerName" type="xsd:string" use="required"/>
        <attribute name="year" type="xsd:string" use="required"/>
        <attribute name="month" type="xsd:string" use="required"/>
        <attribute name="totalLicenses" type="xsd:positiveInteger" use="required"/>
        <attribute name="cumulativeLicenses" type="xsd:positiveInteger" use="required"/>
      </complexType>
      <complexType name="AclaraMarriageFileRecord">
        <sequence/>
        <attribute name="lineData" type="xsd:string" use="required"/>
      </complexType>
      <complexType name="ApplicationPackagesSearchOrderBy">
        <sequence/>
        <attribute name="fieldName" type="policynet:ApplicationPackageFields" use="required"/>
        <attribute name="fieldValue" type="xsd:int" use="optional"/>
        <attribute name="sortOrder" type="policynet:SortOrder" use="optional" default="Ascending"/>
      </complexType>
      <complexType name="ApplicationPackagesSearchFilter">
        <sequence>
          <element name="packageId" type="xsd:positiveInteger" minOccurs="0" maxOccurs="unbounded"/>
          <element name="orderBy" type="policynet:FirmwarePackagesSearchOrderBy" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
        </sequence>
        <attribute name="activeState" type="xsd:boolean" use="optional"/>
        <attribute name="utilitySerialNumber" type="policynet:UtilitySerialNumber" use="optional"/>
        <attribute name="ssid" type="xsd:string" use="optional"/>
        <attribute name="deviceType" type="policynet:DeviceType" use="optional"/>
        <attribute name="customerId" type="xsd:positiveInteger" use="optional"/>
        <attribute name="firstRow" type="xsd:int" use="required"/>
        <attribute name="lastRow" type="xsd:int" use="required"/>
      </complexType>
      <complexType name="ApplicationPackage">
        <sequence>
          <element name="eligiblePlatform" type="xsd:string" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
        </sequence>
        <attribute name="packageId" type="xsd:positiveInteger" use="required"/>
        <attribute name="packageName" type="xsd:string" use="required"/>
        <attribute name="packagePublisher" type="xsd:string" use="required"/>
        <attribute name="packageDesc" type="xsd:string" use="required"/>
        <attribute name="creatorUserId" type="xsd:string" use="required"/>
        <attribute name="creatorName" type="xsd:string" use="required"/>
        <attribute name="createDate" type="xsd:dateTime" use="required"/>
        <attribute name="firmwareVersion" type="xsd:string" use="required"/>
        <attribute name="releaseDate" type="xsd:dateTime" use="required"/>
        <attribute name="isActive" type="xsd:boolean" use="required"/>
        <attribute name="deviceCount" type="xsd:positiveInteger" use="required"/>
        <attribute name="customerId" type="xsd:positiveInteger" use="optional"/>
        <attribute name="customerName" type="xsd:string" use="optional"/>
      </complexType>
      <complexType name="CreateUserAccount">
        <choice>
          <element name="locallyAuthenticatedUser" type="policynet:CreateUser" minOccurs="1" maxOccurs="1" nillable="false"/>
          <element name="ldapAuthenticatedUser" type="policynet:LdapUser" minOccurs="1" maxOccurs="1" nillable="false"/>
        </choice>
      </complexType>
      <complexType name="RadiusSettings">
        <sequence/>
        <attribute name="schemaName" type="xsd:string" use="required"/>
        <attribute name="serviceId" type="xsd:string" use="required"/>
        <attribute name="bufferSize" type="xsd:positiveInteger" use="required"/>
        <attribute name="bufferFlushInterval" type="xsd:positiveInteger" use="required"/>
        <attribute name="caCertificateFile" type="xsd:string" use="required"/>
        <attribute name="aaaServerFile" type="xsd:string" use="required"/>
        <attribute name="aaaPrivateKeyFile" type="xsd:string" use="required"/>
      </complexType>
      <complexType name="NasClient">
        <sequence/>
        <attribute name="nasClientId" type="xsd:positiveInteger" use="optional"/>
        <attribute name="ipAddress" type="xsd:string" use="required"/>
        <attribute name="shortName" type="xsd:string" use="required"/>
        <attribute name="type" type="policynet:NasClientType" use="required"/>
      </complexType>
      <complexType name="NasClientSearchFilter">
        <sequence/>
        <attribute name="nasClientId" type="xsd:positiveInteger" use="optional"/>
        <attribute name="ipAddress" type="xsd:string" use="optional"/>
        <attribute name="shortName" type="xsd:string" use="optional"/>
        <attribute name="firstRow" type="xsd:int" use="required"/>
        <attribute name="lastRow" type="xsd:int" use="required"/>
      </complexType>
      <complexType name="RadiusProxy">
        <sequence/>
        <attribute name="proxyId" type="xsd:positiveInteger" use="optional"/>
        <attribute name="realmName" type="xsd:string" use="required"/>
        <attribute name="authHost" type="xsd:string" use="required"/>
        <attribute name="authPort" type="xsd:positiveInteger" use="required"/>
        <attribute name="acctHost" type="xsd:string" use="required"/>
        <attribute name="acctPort" type="xsd:positiveInteger" use="required"/>
      </complexType>
      <complexType name="RadiusProxySearchFilter">
        <sequence/>
        <attribute name="proxyId" type="xsd:positiveInteger" use="optional"/>
        <attribute name="realmName" type="xsd:string" use="optional"/>
        <attribute name="firstRow" type="xsd:int" use="required"/>
        <attribute name="lastRow" type="xsd:int" use="required"/>
      </complexType>
      <complexType name="createPanDevicesRequestPanDevice">
        <sequence/>
        <attribute name="eui" type="policynet:PanEui" use="required"/>
        <attribute name="utilitySerialNumber" type="policynet:UtilitySerialNumber" use="optional"/>
        <attribute name="installCode" type="policynet:PanInstallCode" use="optional"/>
        <attribute name="mfgSerialNo" type="policynet:mfgSerialNumber" use="optional"/>
        <attribute name="installationLabelId" type="xsd:positiveInteger" use="optional"/>
      </complexType>
      <complexType name="createPanDevicesRequestDred">
        <complexContent>
          <extension base="policynet:createPanDevicesRequestPanDevice">
            <sequence/>
            <attribute name="dutyCycleOffPercent" type="policynet:percentValue" use="required"/>
            <attribute name="loadSizeKva" type="xsd:decimal" use="required"/>
            <attribute name="optOut" type="xsd:boolean" use="optional" default="false"/>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="createPanDevicesRequestAppliance">
        <annotation>
          <documentation>createPanDevicesRequestAppliance is DEPRECATED in 2.6 and is no longer functional.  Please use  createPanDevicesRequestSmartPlug instead (they are equivalent).</documentation>
        </annotation>
        <complexContent>
          <extension base="policynet:createPanDevicesRequestPanDevice">
            <sequence/>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="createPanDevicesRequestSmartPlug">
        <complexContent>
          <extension base="policynet:createPanDevicesRequestPanDevice">
            <sequence/>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="createPanDevicesRequestPanelMeter">
        <complexContent>
          <extension base="policynet:createPanDevicesRequestPanDevice">
            <sequence/>
            <attribute name="circuitId" type="policynet:PanCircuitId" use="optional"/>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="createPanDevicesRequestDisplay">
        <complexContent>
          <extension base="policynet:createPanDevicesRequestPanDevice">
            <sequence/>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="createPanDevicesRequestGasMeter">
        <complexContent>
          <extension base="policynet:createPanDevicesRequestPanDevice">
            <sequence/>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="createPanDevicesRequestWaterMeter">
        <complexContent>
          <extension base="policynet:createPanDevicesRequestPanDevice">
            <sequence/>
            <attribute name="waterServiceType" type="policynet:WaterServiceType" use="required"/>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="createPanDevicesRequestDevice">
        <choice>
          <element name="panDred" type="policynet:createPanDevicesRequestDred" minOccurs="1" maxOccurs="1" nillable="false"/>
          <element name="panAppliance" type="policynet:createPanDevicesRequestAppliance" minOccurs="1" maxOccurs="1" nillable="false"/>
          <element name="panSmartPlug" type="policynet:createPanDevicesRequestSmartPlug" minOccurs="1" maxOccurs="1" nillable="false"/>
          <element name="panPanelMeter" type="policynet:createPanDevicesRequestPanelMeter" minOccurs="1" maxOccurs="1" nillable="false"/>
          <element name="panDisplay" type="policynet:createPanDevicesRequestDisplay" minOccurs="1" maxOccurs="1" nillable="false"/>
          <element name="gasMeter" type="policynet:createPanDevicesRequestGasMeter" minOccurs="1" maxOccurs="1" nillable="false"/>
          <element name="waterMeter" type="policynet:createPanDevicesRequestWaterMeter" minOccurs="1" maxOccurs="1" nillable="false"/>
        </choice>
      </complexType>
      <complexType name="assignWaterServicePointError">
        <sequence/>
        <attribute name="description" type="xsd:string" use="required"/>
      </complexType>
      <complexType name="DeviceStateSummary">
        <sequence/>
        <attribute name="inventory" type="xsd:positiveInteger" use="optional"/>
        <attribute name="discovered" type="xsd:positiveInteger" use="optional"/>
        <attribute name="installed" type="xsd:positiveInteger" use="optional"/>
        <attribute name="localOperation" type="xsd:positiveInteger" use="optional"/>
        <attribute name="remoteOperation" type="xsd:positiveInteger" use="optional"/>
        <attribute name="obsolete" type="xsd:positiveInteger" use="optional"/>
        <attribute name="tcuFactoryInventoryTest" type="xsd:positiveInteger" use="optional"/>
        <attribute name="tcuFactoryInventoryStandby" type="xsd:positiveInteger" use="optional"/>
        <attribute name="tcuShippingLoading" type="xsd:positiveInteger" use="optional"/>
        <attribute name="tcuShippingOffLoading" type="xsd:positiveInteger" use="optional"/>
        <attribute name="tcuDealerInventory" type="xsd:positiveInteger" use="optional"/>
        <attribute name="tcuNewCarInService" type="xsd:positiveInteger" use="optional"/>
        <attribute name="tcuNewCarOutOfService" type="xsd:positiveInteger" use="optional"/>
        <attribute name="tcuUsedCarInService" type="xsd:positiveInteger" use="optional"/>
        <attribute name="tcuUsedCarOutOfService" type="xsd:positiveInteger" use="optional"/>
        <attribute name="tcuRMA" type="xsd:positiveInteger" use="optional"/>
      </complexType>
      <complexType name="DeviceSearchFilter">
        <complexContent>
          <extension base="policynet:DeviceSearchFilterBase">
            <sequence>
              <element name="orderBy" type="policynet:DeviceSearchOrderBy" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
            </sequence>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="DeviceSiblingSearchFilter">
        <sequence/>
        <attribute name="feederId" type="xsd:string" use="optional"/>
        <attribute name="mediumVoltageFeederId" type="xsd:string" use="optional"/>
        <attribute name="transformerId" type="xsd:string" use="optional"/>
        <attribute name="subTransformerId" type="xsd:string" use="optional"/>
        <attribute name="customerId" type="xsd:positiveInteger" use="optional"/>
        <attribute name="firstRow" type="xsd:int" use="optional"/>
        <attribute name="lastRow" type="xsd:int" use="optional"/>
      </complexType>
      <complexType name="DeviceSibling">
        <sequence/>
        <attribute name="transformerId" type="xsd:string" use="required"/>
        <attribute name="subTransformerId" type="xsd:string" use="required"/>
        <attribute name="feederId" type="xsd:string" use="required"/>
        <attribute name="mediumVoltageFeederId" type="xsd:string" use="optional"/>
        <attribute name="utilitySerialNumber" type="policynet:UtilitySerialNumber" use="required"/>
        <attribute name="deviceType" type="policynet:DeviceType" use="required"/>
        <attribute name="phaseType" type="policynet:MeterPhaseType" use="optional"/>
        <attribute name="networkConnectivity" type="policynet:NetworkConnectivity" use="optional"/>
        <attribute name="panState" type="policynet:PanState" use="optional"/>
        <attribute name="manufacturer" type="xsd:string" use="optional"/>
        <attribute name="model" type="xsd:string" use="optional"/>
      </complexType>
      <complexType name="DeviceListSearchOrderBy">
        <sequence/>
        <attribute name="fieldName" type="policynet:DeviceListFields" use="required"/>
        <attribute name="fieldValue" type="xsd:int" use="optional"/>
        <attribute name="sortOrder" type="policynet:SortOrder" use="optional" default="Ascending"/>
      </complexType>
      <complexType name="DeviceListSearchFilter">
        <complexContent>
          <extension base="policynet:DeviceSearchFilterBase">
            <sequence>
              <element name="orderBy" type="policynet:DeviceListSearchOrderBy" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
            </sequence>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="DeviceListItem">
        <sequence/>
        <attribute name="deviceType" type="policynet:DeviceType" use="required"/>
        <attribute name="utilitySerialNumber" type="policynet:UtilitySerialNumber" use="required"/>
        <attribute name="linkType" type="policynet:LinkType" use="optional"/>
        <attribute name="wanMacAddress" type="policynet:macAddress" use="optional"/>
        <attribute name="hanMacAddress" type="policynet:macAddress" use="optional">
          <annotation>
            <documentation>hanMacAddress DEPRECATED in 2.6.  Please use DeviceListItem.eui instead (they are equivalent).</documentation>
          </annotation>
        </attribute>
        <attribute name="eui" type="policynet:PanEui" use="optional"/>
        <attribute name="operationalStatus" type="policynet:OperationalStatus" use="optional"/>
        <attribute name="programId" type="xsd:string" use="optional"/>
        <attribute name="networkConnectivity" type="policynet:NetworkConnectivity" use="optional"/>
        <attribute name="energyStatus" type="policynet:EnergyState" use="optional"/>
        <attribute name="servicePointId" type="policynet:ServicePointId" use="optional"/>
        <attribute name="streetNo" type="xsd:string" use="optional"/>
        <attribute name="streetAddress" type="xsd:string" use="optional"/>
        <attribute name="streetType" type="xsd:string" use="optional"/>
        <attribute name="streetDirection" type="policynet:StreetDirection" use="optional"/>
        <attribute name="aptNumber" type="xsd:string" use="optional"/>
        <attribute name="city" type="xsd:string" use="optional"/>
        <attribute name="stateProv" type="xsd:string" use="optional"/>
        <attribute name="postalCode" type="xsd:string" use="optional"/>
        <attribute name="baseStationSectorId" type="xsd:string" use="optional"/>
        <attribute name="XCoordinate" type="xsd:decimal" use="optional"/>
        <attribute name="YCoordinate" type="xsd:decimal" use="optional"/>
        <attribute name="ZCoordinate" type="xsd:decimal" use="optional"/>
        <attribute name="lifeSafety" type="xsd:boolean" use="optional"/>
        <attribute name="transformerId" type="xsd:string" use="optional"/>
        <attribute name="subTransformerId" type="xsd:string" use="optional"/>
        <attribute name="feederId" type="xsd:string" use="optional"/>
        <attribute name="mediumVoltageFeederId" type="xsd:string" use="optional"/>
        <attribute name="districtMeter" type="xsd:boolean" use="optional"/>
        <attribute name="waterMainId" type="xsd:string" use="optional"/>
        <attribute name="waterDistrictId" type="xsd:string" use="optional"/>
        <attribute name="reservoirId" type="xsd:string" use="optional"/>
        <attribute name="distributionPipeId" type="xsd:string" use="optional"/>
        <attribute name="pumpId" type="xsd:string" use="optional"/>
        <attribute name="tankId" type="xsd:string" use="optional"/>
        <attribute name="feederPipeId" type="xsd:string" use="optional"/>
        <attribute name="customerId" type="xsd:positiveInteger" use="optional"/>
        <attribute name="customerName" type="xsd:string" use="optional"/>
        <attribute name="propertyNumber" type="xsd:string" use="optional"/>
      </complexType>
      <complexType name="DeviceBinding">
        <sequence>
          <choice>
            <element name="boardSerialNumber" type="policynet:boardSerialNumber" minOccurs="1" maxOccurs="1" nillable="false"/>
            <element name="sgcSerialNumber" type="policynet:sgcSerialNumber" minOccurs="1" maxOccurs="1" nillable="false">
              <annotation>
                <documentation>Utility or vendor-specified SGC chassis number. Unique inside a given utility.</documentation>
              </annotation>
            </element>
          </choice>
        </sequence>
        <attribute name="bindOperation" type="policynet:BindOperation" use="required"/>
        <attribute name="utilitySerialNumber" type="policynet:UtilitySerialNumber" use="required"/>
      </complexType>
      <complexType name="CustomDeviceAttributesSearchFilter">
        <sequence/>
        <attribute name="utilitySerialNumber" type="policynet:UtilitySerialNumber" use="optional"/>
        <attribute name="wanMacAddress" type="policynet:macAddress" use="optional"/>
        <attribute name="attributeName" type="xsd:string" use="optional"/>
        <attribute name="firstRow" type="xsd:int" use="required"/>
        <attribute name="lastRow" type="xsd:int" use="required"/>
      </complexType>
      <complexType name="PanTopologySearchFilter">
        <sequence>
          <choice>
            <element name="servicePointId" type="policynet:ServicePointId" minOccurs="1" maxOccurs="1" nillable="false"/>
            <element name="utilitySerialNumber" type="policynet:UtilitySerialNumber" minOccurs="1" maxOccurs="1" nillable="false"/>
          </choice>
        </sequence>
        <attribute name="customerId" type="xsd:positiveInteger" use="optional"/>
      </complexType>
      <complexType name="EventTrend">
        <sequence/>
        <attribute name="errorCount" type="xsd:positiveInteger" use="optional"/>
        <attribute name="warningCount" type="xsd:positiveInteger" use="optional"/>
        <attribute name="infoCount" type="xsd:positiveInteger" use="optional"/>
        <attribute name="debugCount" type="xsd:positiveInteger" use="optional"/>
        <attribute name="beginDate" type="policynet:deviceLocalTime" use="required"/>
      </complexType>
      <complexType name="EventCodeCategory">
        <sequence/>
        <attribute name="category" type="policynet:EventCategory" use="required"/>
        <attribute name="code" type="xsd:positiveInteger" use="required"/>
      </complexType>
      <complexType name="EventTrendParams">
        <sequence>
          <element name="eventSeverity" type="policynet:EventSeverity" minOccurs="1" maxOccurs="unbounded"/>
          <element name="eventType" type="policynet:EventType" minOccurs="1" maxOccurs="unbounded"/>
          <element name="event" type="policynet:EventCodeCategory" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
        </sequence>
        <attribute name="beginDate" type="policynet:deviceLocalTime" use="required"/>
        <attribute name="endDate" type="policynet:deviceLocalTime" use="required"/>
      </complexType>
      <complexType name="EventSummary">
        <sequence/>
        <attribute name="eventCategory" type="policynet:EventCategory" use="required"/>
        <attribute name="eventCode" type="xsd:positiveInteger" use="required"/>
        <attribute name="eventDesc" type="xsd:string" use="required"/>
        <attribute name="eventSeverity" type="policynet:EventSeverity" use="required"/>
        <attribute name="eventCount" type="xsd:positiveInteger" use="required"/>
      </complexType>
      <complexType name="EventSummaryOrderBy">
        <sequence/>
        <attribute name="fieldName" type="policynet:EventSummaryField" use="required"/>
        <attribute name="fieldValue" type="xsd:int" use="optional"/>
        <attribute name="sortOrder" type="policynet:SortOrder" use="required"/>
      </complexType>
      <complexType name="EventSummaryParams">
        <sequence>
          <element name="eventSeverity" type="policynet:EventSeverity" minOccurs="0" maxOccurs="unbounded"/>
          <element name="eventType" type="policynet:EventType" minOccurs="0" maxOccurs="unbounded"/>
          <element name="event" type="policynet:EventCodeCategory" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          <element name="firmwareVersion" type="xsd:string" minOccurs="0" maxOccurs="unbounded"/>
          <element name="meterSwVersion" type="xsd:string" minOccurs="0" maxOccurs="unbounded"/>
          <element name="orderBy" type="policynet:EventSummaryOrderBy" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
        </sequence>
        <attribute name="beginDate" type="policynet:deviceLocalTime" use="required"/>
        <attribute name="endDate" type="policynet:deviceLocalTime" use="required"/>
      </complexType>
      <complexType name="eventsReportParams">
        <complexContent>
          <extension base="policynet:reportParams">
            <sequence>
              <element name="eventSeverity" type="policynet:EventSeverity" minOccurs="0" maxOccurs="unbounded"/>
              <element name="eventType" type="policynet:EventType" minOccurs="0" maxOccurs="unbounded"/>
              <element name="event" type="policynet:EventCodeCategory" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
            </sequence>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="EnergyStatusTime">
        <sequence/>
        <attribute name="readingTime" type="xsd:dateTime" use="required"/>
        <attribute name="energyStatus" type="policynet:EnergyState" use="required"/>
      </complexType>
      <complexType name="OutageDevice">
        <sequence>
          <element name="energyStatus" type="policynet:EnergyStatusTime" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
        </sequence>
        <attribute name="utilitySerialNumber" type="policynet:UtilitySerialNumber" use="required"/>
        <attribute name="servicePointId" type="policynet:ServicePointId" use="required"/>
        <attribute name="deviceType" type="policynet:DeviceType" use="required"/>
        <attribute name="lastOutageTime" type="policynet:deviceLocalTime" use="required"/>
        <attribute name="currentEnergyStatus" type="policynet:EnergyState" use="optional"/>
        <attribute name="feederId" type="xsd:string" use="required"/>
        <attribute name="transformerId" type="xsd:string" use="required"/>
        <attribute name="subTransformerId" type="xsd:string" use="required"/>
        <attribute name="XCoordinate" type="xsd:decimal" use="required"/>
        <attribute name="YCoordinate" type="xsd:decimal" use="required"/>
        <attribute name="outageAddress" type="xsd:string" use="required"/>
        <attribute name="feederFailedPct" type="xsd:decimal" use="required"/>
        <attribute name="feederUnknownPct" type="xsd:decimal" use="optional"/>
      </complexType>
      <complexType name="PowerOutages">
        <sequence>
          <element name="powerOutage" type="policynet:OutageDevice" minOccurs="1" maxOccurs="unbounded" nillable="false"/>
        </sequence>
      </complexType>
      <complexType name="OutageReportOrderBy">
        <sequence/>
        <attribute name="fieldName" type="policynet:OutageReportFields" use="required"/>
        <attribute name="fieldValue" type="xsd:int" use="optional"/>
        <attribute name="sortOrder" type="policynet:SortOrder" use="required"/>
      </complexType>
      <complexType name="outageReportParams">
        <sequence>
          <element name="orderBy" type="policynet:OutageReportOrderBy" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          <element name="feederIds" type="xsd:string" minOccurs="0" maxOccurs="unbounded"/>
          <element name="transformerIds" type="xsd:string" minOccurs="0" maxOccurs="unbounded"/>
          <element name="subTransformerIds" type="xsd:string" minOccurs="0" maxOccurs="unbounded"/>
          <element name="groupIds" type="xsd:int" minOccurs="0" maxOccurs="unbounded"/>
          <element name="pepGroupIds" type="xsd:positiveInteger" minOccurs="0" maxOccurs="unbounded"/>
          <element name="alertIds" type="xsd:positiveInteger" minOccurs="0" maxOccurs="unbounded"/>
          <element name="energyStatus" type="policynet:EnergyState" minOccurs="0" maxOccurs="unbounded"/>
        </sequence>
        <attribute name="outageType" type="policynet:OutageType" use="optional"/>
        <attribute name="firstRow" type="xsd:int" use="required"/>
        <attribute name="lastRow" type="xsd:int" use="required"/>
        <attribute name="beginDate" type="policynet:deviceLocalTime" use="optional"/>
        <attribute name="endDate" type="policynet:deviceLocalTime" use="optional"/>
        <attribute name="XCoordinate" type="xsd:decimal" use="optional"/>
        <attribute name="YCoordinate" type="xsd:decimal" use="optional"/>
      </complexType>
      <complexType name="systemOutageGroup">
        <sequence>
          <element name="points" type="policynet:point" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          <element name="feederIds" type="xsd:string" minOccurs="0" maxOccurs="unbounded"/>
          <element name="transformerIds" type="xsd:string" minOccurs="0" maxOccurs="unbounded"/>
          <element name="subTransformerIds" type="xsd:string" minOccurs="0" maxOccurs="unbounded"/>
        </sequence>
        <attribute name="outageGroupId" type="xsd:positiveInteger" use="required"/>
        <attribute name="outageGroupCount" type="xsd:positiveInteger" use="required"/>
        <attribute name="unknownGroupCount" type="xsd:positiveInteger" use="optional"/>
        <attribute name="plannedOutagesCount" type="xsd:positiveInteger" use="required"/>
        <attribute name="unplannedOutagesCount" type="xsd:positiveInteger" use="required"/>
        <attribute name="groupOutageType" type="xsd:decimal" use="required">
          <annotation>
            <documentation>Summarizes the balance between planned and unplanned outages for the group.  Denotes a value on the continuous spectrum where 0 is when all outages are planned, 1 if all are unplanned, and values in between if there are both planned/unplanned outages.</documentation>
          </annotation>
        </attribute>
      </complexType>
      <complexType name="systemOutagesSummaryNodeInfo">
        <annotation>
          <documentation>Contains info about a node in the outage map i.e. feeders, transformers, subtransformers.</documentation>
        </annotation>
        <sequence/>
        <attribute name="id" type="xsd:string" use="required">
          <annotation>
            <documentation>ID of the node (i.e. feeders, transformers, subtransformers).</documentation>
          </annotation>
        </attribute>
        <attribute name="outageCount" type="xsd:positiveInteger" use="optional"/>
        <attribute name="unknownCount" type="xsd:positiveInteger" use="optional"/>
        <attribute name="meterCount" type="xsd:positiveInteger" use="required"/>
      </complexType>
      <complexType name="systemOutagesSummaryParams">
        <sequence>
          <element name="feederIds" type="xsd:string" minOccurs="0" maxOccurs="unbounded"/>
          <element name="transformerIds" type="xsd:string" minOccurs="0" maxOccurs="unbounded"/>
          <element name="subTransformerIds" type="xsd:string" minOccurs="0" maxOccurs="unbounded"/>
          <element name="pepGroupIds" type="xsd:positiveInteger" minOccurs="0" maxOccurs="unbounded"/>
          <element name="alertIds" type="xsd:positiveInteger" minOccurs="0" maxOccurs="unbounded"/>
          <element name="energyStatus" type="policynet:EnergyState" minOccurs="0" maxOccurs="unbounded"/>
        </sequence>
        <attribute name="proximityDistanceMiles" type="xsd:decimal" use="optional"/>
        <attribute name="deviceType" type="policynet:DeviceType" use="optional"/>
        <attribute name="outageType" type="policynet:OutageType" use="optional"/>
        <attribute name="reportId" type="xsd:positiveInteger" use="optional"/>
        <attribute name="groupId" type="xsd:positiveInteger" use="optional"/>
        <attribute name="minGroupCount" type="xsd:positiveInteger" use="optional"/>
        <attribute name="beginDate" type="policynet:deviceLocalTime" use="optional"/>
        <attribute name="endDate" type="policynet:deviceLocalTime" use="optional"/>
      </complexType>
      <complexType name="getSystemOutagesSummaryReport">
        <sequence>
          <element name="outageGroups" type="policynet:systemOutageGroup" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          <element name="feeders" type="policynet:systemOutagesSummaryNodeInfo" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          <element name="transformers" type="policynet:systemOutagesSummaryNodeInfo" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          <element name="subTransformers" type="policynet:systemOutagesSummaryNodeInfo" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
        </sequence>
        <attribute name="reportId" type="xsd:positiveInteger" use="optional"/>
        <attribute name="energyStatusFilter" type="policynet:EnergyStateFilter" use="optional"/>
      </complexType>
      <complexType name="Feeder">
        <sequence>
          <element name="subTransformerId" type="xsd:string" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
        </sequence>
        <attribute name="feederId" type="xsd:string" use="required"/>
        <attribute name="transformerId" type="xsd:string" use="required"/>
        <attribute name="deviceCount" type="xsd:positiveInteger" use="required"/>
      </complexType>
      <complexType name="FeedersSearchFilter">
        <sequence/>
        <attribute name="feederId" type="xsd:string" use="optional"/>
        <attribute name="transformerId" type="xsd:string" use="optional"/>
        <attribute name="firstRow" type="xsd:int" use="required"/>
        <attribute name="lastRow" type="xsd:int" use="required"/>
      </complexType>
      <complexType name="ClockDriftReportParams">
        <complexContent>
          <extension base="policynet:reportParams">
            <sequence>
              <element name="orderBy" type="policynet:ClockDriftReportOrderBy" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
            </sequence>
            <attribute name="servicePointId" type="policynet:ServicePointId" use="optional"/>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="ClockAdjustmentReportParams">
        <complexContent>
          <extension base="policynet:reportParams">
            <sequence>
              <element name="orderBy" type="policynet:ClockAdjustmentReportOrderBy" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
            </sequence>
            <attribute name="servicePointId" type="policynet:ServicePointId" use="optional"/>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="RadiusAccountingReportParams">
        <complexContent>
          <extension base="policynet:reportParams">
            <sequence>
              <element name="orderBy" type="policynet:RadiusAccountingReportOrderBy" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
            </sequence>
            <attribute name="usn" type="policynet:UtilitySerialNumberWildcard" use="optional"/>
            <attribute name="baseStationSector" type="xsd:string" use="optional"/>
            <attribute name="wanMacAddress" type="policynet:macAddressWildcard" use="optional"/>
            <attribute name="totalKb" type="xsd:float" use="optional"/>
            <attribute name="sessionCount" type="xsd:nonNegativeInteger" use="optional"/>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="TimeToDeploy">
        <sequence/>
        <attribute name="percent" type="policynet:percentValue" use="required"/>
        <attribute name="time" type="xsd:positiveInteger" use="required"/>
      </complexType>
      <complexType name="TimesToDeploy">
        <sequence>
          <element name="timeToDeploy" type="policynet:TimeToDeploy" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
        </sequence>
      </complexType>
      <complexType name="PolicyDeploymentStatus">
        <sequence/>
        <attribute name="policyId" type="xsd:positiveInteger" use="required"/>
        <attribute name="wanMacAddress" type="policynet:macAddress" use="required"/>
        <attribute name="utilitySerialNumber" type="policynet:UtilitySerialNumber" use="required"/>
        <attribute name="servicePointId" type="policynet:ServicePointId" use="required"/>
        <attribute name="signalStrength" type="policynet:SignalStrength" use="required"/>
        <attribute name="networkConnectivity" type="policynet:NetworkConnectivity" use="required"/>
        <attribute name="energyStatus" type="policynet:EnergyState" use="required"/>
        <attribute name="linkType" type="policynet:LinkType" use="required"/>
        <attribute name="deployed" type="policynet:deviceLocalTime" use="optional"/>
        <attribute name="deployFailed" type="policynet:deviceLocalTime" use="optional"/>
        <attribute name="undeployed" type="policynet:deviceLocalTime" use="optional"/>
        <attribute name="timeToDeploy" type="xsd:positiveInteger" use="required"/>
        <attribute name="customerId" type="xsd:positiveInteger" use="optional"/>
        <attribute name="customerName" type="xsd:string" use="optional"/>
      </complexType>
      <complexType name="PolicyDeploymentResults">
        <sequence>
          <element name="deploymentResult" type="policynet:PolicyDeploymentStatus" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
        </sequence>
      </complexType>
      <complexType name="policyDeploymentReportParams">
        <sequence>
          <element name="deployState" type="policynet:PolicyDeployState" minOccurs="0" maxOccurs="unbounded"/>
          <element name="reportState" type="policynet:PolicyReportState" minOccurs="0" maxOccurs="unbounded"/>
        </sequence>
        <attribute name="policyId" type="xsd:positiveInteger" use="required"/>
        <attribute name="customerId" type="xsd:positiveInteger" use="optional"/>
        <attribute name="beginDate" type="policynet:deviceLocalTime" use="optional"/>
        <attribute name="endDate" type="policynet:deviceLocalTime" use="optional"/>
        <attribute name="firstRow" type="xsd:int" use="required"/>
        <attribute name="lastRow" type="xsd:int" use="required"/>
      </complexType>
      <complexType name="BoundDevice">
        <sequence>
          <element name="deviceStatus" type="policynet:DeviceStatus" minOccurs="1" maxOccurs="1"/>
        </sequence>
        <attribute name="utilitySerialNumber" type="policynet:UtilitySerialNumber" use="required"/>
      </complexType>
      <complexType name="DeviceServicePoint">
        <sequence/>
        <attribute name="utilitySerialNumber" type="policynet:UtilitySerialNumber" use="required"/>
        <attribute name="servicePointId" type="policynet:ServicePointId" use="required"/>
      </complexType>
      <complexType name="SubscriptionConsumer">
        <choice>
          <element name="consumerId" type="xsd:positiveInteger" minOccurs="1" maxOccurs="1"/>
          <element name="consumer" type="policynet:Consumer" minOccurs="1" maxOccurs="1" nillable="false"/>
        </choice>
      </complexType>
      <complexType name="SubscriptionTopic">
        <sequence>
          <choice>
            <element name="policyId" type="xsd:positiveInteger" minOccurs="1" maxOccurs="1"/>
            <element name="topicType" type="policynet:TopicType" minOccurs="1" maxOccurs="1"/>
          </choice>
        </sequence>
        <attribute name="topicId" type="xsd:positiveInteger" use="optional"/>
      </complexType>
      <complexType name="MfgProduct">
        <sequence/>
        <attribute name="productId" type="xsd:positiveInteger" use="optional"/>
        <attribute name="name" type="policynet:Name" use="required"/>
        <attribute name="active" type="xsd:boolean" use="optional"/>
        <attribute name="customerId" type="xsd:int" use="required"/>
        <attribute name="deviceFirmwareId" type="xsd:int" use="optional"/>
        <attribute name="supplicant" type="xsd:string" use="optional"/>
        <attribute name="wimaxRadioConfig" type="xsd:string" use="optional"/>
        <attribute name="numPartitions" type="xsd:int" use="optional"/>
        <attribute name="productType" type="policynet:DeviceType" use="required"/>
        <attribute name="productModel" type="xsd:string" use="optional"/>
      </complexType>
      <complexType name="MfgProducts">
        <sequence>
          <element name="product" type="policynet:MfgProduct" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
        </sequence>
      </complexType>
      <complexType name="MfgCustomer">
        <sequence>
          <element name="products" type="policynet:MfgProduct" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
        </sequence>
        <attribute name="customerId" type="xsd:positiveInteger" use="optional"/>
        <attribute name="name" type="policynet:Name" use="required"/>
        <attribute name="cryptoKey" type="xsd:string" use="required"/>
        <attribute name="timezone" type="xsd:string" use="required"/>
      </complexType>
      <complexType name="MfgCustomers">
        <sequence>
          <element name="customer" type="policynet:MfgCustomer" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
        </sequence>
      </complexType>
      <complexType name="MfgCustomerSearchFilter">
        <sequence/>
        <attribute name="customerId" type="xsd:positiveInteger" use="optional"/>
        <attribute name="productId" type="xsd:positiveInteger" use="optional"/>
      </complexType>
      <complexType name="MfgProductSearchFilter">
        <sequence/>
        <attribute name="customerId" type="xsd:positiveInteger" use="optional"/>
        <attribute name="productId" type="xsd:positiveInteger" use="optional"/>
        <attribute name="active" type="xsd:boolean" use="optional"/>
      </complexType>
      <complexType name="MfgShipFile">
        <sequence/>
        <attribute name="fileName" type="policynet:Name" use="required"/>
        <attribute name="customerId" type="xsd:positiveInteger" use="required"/>
        <attribute name="productId" type="xsd:positiveInteger" use="required"/>
        <attribute name="productionRunId" type="xsd:positiveInteger" use="optional"/>
        <attribute name="deviceCount" type="xsd:positiveInteger" use="optional"/>
        <attribute name="createDate" type="xsd:dateTime" use="optional"/>
      </complexType>
      <complexType name="MfgShipFiles">
        <sequence>
          <element name="file" type="policynet:MfgShipFile" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
        </sequence>
      </complexType>
      <complexType name="MfgShipFileSearchFilter">
        <sequence>
          <element name="fileName" type="xsd:string" minOccurs="0" maxOccurs="1" nillable="true"/>
        </sequence>
        <attribute name="customerId" type="xsd:positiveInteger" use="optional"/>
        <attribute name="productId" type="xsd:positiveInteger" use="optional"/>
      </complexType>
      <complexType name="MfgProductionRun">
        <sequence/>
        <attribute name="productionRunId" type="xsd:positiveInteger" use="required"/>
        <attribute name="customerId" type="xsd:positiveInteger" use="required"/>
        <attribute name="customerName" type="policynet:Name" use="required"/>
        <attribute name="productId" type="xsd:positiveInteger" use="required"/>
        <attribute name="productName" type="policynet:Name" use="required"/>
        <attribute name="beginTime" type="xsd:dateTime" use="required"/>
        <attribute name="endTime" type="xsd:dateTime" use="optional"/>
        <attribute name="active" type="xsd:boolean" use="required"/>
      </complexType>
      <complexType name="MfgProductionRuns">
        <sequence>
          <element name="productionRun" type="policynet:MfgProductionRun" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
        </sequence>
      </complexType>
      <complexType name="MfgProductionRunSearchFilter">
        <sequence/>
        <attribute name="productionRunId" type="xsd:positiveInteger" use="optional"/>
        <attribute name="customerId" type="xsd:positiveInteger" use="optional"/>
        <attribute name="productId" type="xsd:positiveInteger" use="optional"/>
        <attribute name="active" type="xsd:boolean" use="optional"/>
      </complexType>
      <complexType name="FailedNetworkEntryReportItem">
        <sequence>
          <element name="event" type="policynet:EventCodeCategory" minOccurs="1" maxOccurs="1"/>
        </sequence>
        <attribute name="utilitySerialNumber" type="policynet:UtilitySerialNumber" use="optional"/>
        <attribute name="wanMacAddress" type="policynet:macAddress" use="required"/>
        <attribute name="servicePointId" type="policynet:ServicePointId" use="optional"/>
        <attribute name="failureTime" type="xsd:dateTime" use="required"/>
        <attribute name="eventDesc" type="xsd:string" use="required"/>
        <attribute name="eventArguments" type="xsd:string" use="required"/>
      </complexType>
      <complexType name="failedNetworkReportParams">
        <complexContent>
          <extension base="policynet:reportParams">
            <sequence/>
            <attribute name="eventCode" type="xsd:positiveInteger" use="optional"/>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="TrendFilter">
        <choice>
          <element name="utilitySerialNumber" type="policynet:UtilitySerialNumber" minOccurs="0" maxOccurs="1" nillable="true"/>
          <element name="deviceType" type="policynet:DeviceType" minOccurs="0" maxOccurs="1" nillable="true"/>
          <element name="groupdId" type="xsd:positiveInteger" minOccurs="0" maxOccurs="1" nillable="true"/>
        </choice>
      </complexType>
      <complexType name="TrendReportParams">
        <sequence>
          <element name="filter" type="policynet:TrendFilter" minOccurs="0" maxOccurs="1" nillable="true"/>
        </sequence>
        <attribute name="beginDate" type="xsd:dateTime" use="required"/>
        <attribute name="endDate" type="xsd:dateTime" use="required"/>
        <attribute name="aggregateType" type="policynet:AggregateType" use="required">
          <annotation>
            <documentation>Resolution of data aggregation.</documentation>
          </annotation>
        </attribute>
        <attribute name="operationalState" type="policynet:OperationalStatus" use="optional"/>
      </complexType>
      <complexType name="EnergyStatusTrend">
        <sequence/>
        <attribute name="stateEnergized" type="xsd:positiveInteger" use="required"/>
        <attribute name="stateDeenergizedPlanned" type="xsd:positiveInteger" use="required"/>
        <attribute name="stateDeenergizedUnplanned" type="xsd:positiveInteger" use="required"/>
        <attribute name="energyStatusUnknown" type="xsd:boolean" use="optional"/>
        <attribute name="beginStateTime" type="policynet:deviceLocalTime" use="required"/>
        <attribute name="endStateTime" type="policynet:deviceLocalTime" use="required"/>
      </complexType>
      <complexType name="ConnectivityStatusTrend">
        <sequence/>
        <attribute name="pctOn" type="xsd:positiveInteger" use="required"/>
        <attribute name="pctOff" type="xsd:positiveInteger" use="required"/>
        <attribute name="beginStateTime" type="policynet:deviceLocalTime" use="required"/>
        <attribute name="endStateTime" type="policynet:deviceLocalTime" use="required"/>
      </complexType>
      <complexType name="CommStatusTrend">
        <sequence/>
        <attribute name="signalStrength" type="policynet:SignalStrength" use="required"/>
        <attribute name="beginStateTime" type="policynet:deviceLocalTime" use="required"/>
        <attribute name="endStateTime" type="policynet:deviceLocalTime" use="required"/>
      </complexType>
      <complexType name="DeviceErrorTrend">
        <sequence/>
        <attribute name="errorCount" type="xsd:positiveInteger" use="required"/>
        <attribute name="cautionCount" type="xsd:positiveInteger" use="required"/>
        <attribute name="beginStateTime" type="policynet:deviceLocalTime" use="required"/>
        <attribute name="endStateTime" type="policynet:deviceLocalTime" use="required"/>
      </complexType>
      <complexType name="PolicySuccessTrend">
        <sequence/>
        <attribute name="policySuccessRate" type="policynet:percentValue" use="required"/>
        <attribute name="enforcementCount" type="xsd:positiveInteger" use="required"/>
        <attribute name="beginStateTime" type="policynet:deviceLocalTime" use="required"/>
        <attribute name="endStateTime" type="policynet:deviceLocalTime" use="required"/>
      </complexType>
      <complexType name="DeviceTrends">
        <sequence>
          <element name="DeviceErrorTrend" type="policynet:DeviceErrorTrend" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          <element name="EnergyStatusTrend" type="policynet:EnergyStatusTrend" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          <element name="CommStatusTrend" type="policynet:CommStatusTrend" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          <element name="PolicySuccessTrend" type="policynet:PolicySuccessTrend" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          <element name="ConnectivityStatusTrend" type="policynet:ConnectivityStatusTrend" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
        </sequence>
      </complexType>
      <complexType name="Approver">
        <sequence/>
        <attribute name="userName" type="policynet:UserName" use="required"/>
        <attribute name="userId" type="xsd:positiveInteger" use="required"/>
      </complexType>
      <complexType name="Approvers">
        <sequence>
          <element name="approver" type="policynet:Approver" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
        </sequence>
      </complexType>
      <complexType name="PolicyRateLimit">
        <annotation>
          <documentation>Describe rate limit for a policy. This is the number of targets allowed per duration in hours accross multiple policies from the same type.</documentation>
        </annotation>
        <sequence/>
        <attribute name="policyCount" type="xsd:positiveInteger" use="required"/>
        <attribute name="duration" type="xsd:positiveInteger" use="required"/>
      </complexType>
      <complexType name="DualAuthPolicy">
        <annotation>
          <documentation>Describe if a policy type requires dual authorization with a required threshold and rate limiting.</documentation>
        </annotation>
        <sequence>
          <element name="rateLimit" type="policynet:PolicyRateLimit" minOccurs="0" maxOccurs="1" nillable="true"/>
        </sequence>
        <attribute name="type" type="policynet:DualAuthPolicyType" use="required"/>
        <attribute name="dualAuthRequired" type="xsd:boolean" use="required"/>
        <attribute name="targetCountThreshold" type="xsd:positiveInteger" use="optional"/>
      </complexType>
      <complexType name="DualAuthPolicies">
        <sequence>
          <element name="policy" type="policynet:DualAuthPolicy" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
        </sequence>
      </complexType>
      <complexType name="removeDeviceFromPanParams">
        <sequence/>
        <attribute name="eui" type="policynet:PanEui" use="required"/>
        <attribute name="usn" type="policynet:UtilitySerialNumber" use="required"/>
        <attribute name="circuitId" type="policynet:PanCircuitId" use="optional"/>
      </complexType>
      <complexType name="LdapServer">
        <sequence/>
        <attribute name="host" type="policynet:LdapHost" use="required"/>
        <attribute name="port" type="policynet:PortNumber" use="required"/>
      </complexType>
      <complexType name="LdapAuthenticationSettings">
        <sequence>
          <element name="ldapServer" type="policynet:LdapServer" minOccurs="1" maxOccurs="1"/>
        </sequence>
        <attribute name="securityType" type="policynet:LdapServerSecurityType" use="required">
          <annotation>
            <documentation>If sslOneWayAuthentication is selected, DB administrator must have set up certificate store to contain a ROOT certificate for a CA that can verify a chain of trust starting from the LDAP server's certificate.  Please refer to manual for more info.</documentation>
          </annotation>
        </attribute>
      </complexType>
      <complexType name="DrlcParticipant">
        <sequence/>
        <attribute name="utilitySerialNumber" type="policynet:UtilitySerialNumber" use="required"/>
        <attribute name="loadControlParticipation" type="policynet:LoadControlParticipation" use="optional" default="optOut"/>
      </complexType>
      <complexType name="getDredLoadShedDataParams">
        <sequence/>
        <attribute name="policyId" type="xsd:positiveInteger" use="required"/>
        <attribute name="intervalMinutes" type="xsd:positiveInteger" use="required">
          <annotation>
            <documentation>Number of minutes between two data points.</documentation>
          </annotation>
        </attribute>
      </complexType>
      <complexType name="MeterOptionsSearchFilter">
        <sequence/>
      </complexType>
      <complexType name="MeterExchange">
        <sequence/>
        <attribute name="mspObjectId" type="xsd:string" use="required"/>
        <attribute name="oldMeter" type="policynet:UtilitySerialNumber" use="required"/>
        <attribute name="newMeter" type="policynet:UtilitySerialNumber" use="required"/>
      </complexType>
      <element name="LoginUsername" type="xsd:string"/>
      <element name="LoginPassword" type="xsd:string"/>
      <element name="SessionId" type="xsd:string"/>
      <element name="DbProfilerTime" type="xsd:unsignedLong"/>
      <!--operation request element-->
      <element name="loginRequest">
        <complexType>
          <sequence/>
          <attribute name="username" type="policynet:UserName" use="required"/>
          <attribute name="password" type="policynet:Password" use="optional"/>
          <attribute name="sequenceId" type="xsd:string" use="optional"/>
          <attribute name="tokenId" type="xsd:string" use="optional"/>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="loginResponse">
        <complexType>
          <sequence>
            <element name="Permissions" type="policynet:Permission" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          </sequence>
          <attribute name="timeToPwdExpiry" type="xsd:positiveInteger" use="optional"/>
          <attribute name="userId" type="xsd:positiveInteger" use="optional"/>
          <attribute name="sessionId" type="xsd:string" use="optional"/>
          <attribute name="tokenRequired" type="xsd:string" use="optional"/>
          <attribute name="lastLoginDate" type="xsd:dateTime" use="optional"/>
          <attribute name="preferredTimeZone" type="policynet:TimeZone" use="optional"/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="logoutRequest">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="logoutResponse">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="createUserAccountRequest">
        <complexType>
          <sequence>
            <element name="user" type="policynet:CreateUserAccount" minOccurs="1" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="createUserAccountResponse">
        <complexType>
          <sequence/>
          <attribute name="userId" type="xsd:positiveInteger" use="required"/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="updateUserAccountRequest">
        <complexType>
          <sequence>
            <element name="user" type="policynet:UserAccount" minOccurs="1" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="updateUserAccountResponse">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="searchUserAccountsRequest">
        <complexType>
          <sequence>
            <element name="searchFilter" type="policynet:UserSearchFilter" minOccurs="0" maxOccurs="1"/>
          </sequence>
          <attribute name="getPermissions" type="xsd:boolean" use="optional"/>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="searchUserAccountsResponse">
        <complexType>
          <sequence>
            <element name="users" type="policynet:UserAccount" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          </sequence>
          <attribute name="totalRows" type="xsd:int" use="required"/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="createUserRequest">
        <complexType>
          <sequence>
            <element name="user" type="policynet:CreateUser" minOccurs="1" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="createUserResponse">
        <complexType>
          <sequence/>
          <attribute name="userId" type="xsd:positiveInteger" use="required"/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="updateUserRequest">
        <complexType>
          <sequence>
            <element name="user" type="policynet:User" minOccurs="1" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="updateUserResponse">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="updateUserPasswordRequest">
        <complexType>
          <sequence/>
          <attribute name="userId" type="xsd:positiveInteger" use="required"/>
          <attribute name="currentPassword" type="policynet:Password" use="optional"/>
          <attribute name="newPassword" type="policynet:Password" use="required"/>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="updateUserPasswordResponse">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="searchUsersRequest">
        <complexType>
          <sequence>
            <element name="searchFilter" type="policynet:UserSearchFilter" minOccurs="0" maxOccurs="1"/>
          </sequence>
          <attribute name="getPermissions" type="xsd:boolean" use="optional"/>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="searchUsersResponse">
        <complexType>
          <sequence>
            <element name="user" type="policynet:User" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          </sequence>
          <attribute name="totalRows" type="xsd:int" use="required"/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="deleteUserRequest">
        <complexType>
          <sequence/>
          <attribute name="userId" type="xsd:positiveInteger" use="required"/>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="deleteUserResponse">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="enableUserRequest">
        <complexType>
          <sequence>
            <element name="userId" type="xsd:positiveInteger" minOccurs="1" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="enableUserResponse">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="disableUserRequest">
        <complexType>
          <sequence>
            <element name="userId" type="xsd:positiveInteger" minOccurs="1" maxOccurs="1"/>
            <element name="disableTime" type="xsd:dateTime" minOccurs="0" maxOccurs="1" nillable="true"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="disableUserResponse">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="unlockUserRequest">
        <complexType>
          <sequence>
            <element name="userId" type="xsd:positiveInteger" minOccurs="1" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="unlockUserResponse">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="enableUserPasswordAgingRequest">
        <complexType>
          <sequence>
            <element name="userId" type="xsd:positiveInteger" minOccurs="1" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="enableUserPasswordAgingResponse">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="disableUserPasswordAgingRequest">
        <complexType>
          <sequence>
            <element name="userId" type="xsd:positiveInteger" minOccurs="1" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="disableUserPasswordAgingResponse">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="searchRolesRequest">
        <complexType>
          <sequence>
            <element name="searchFilter" type="policynet:RoleSearchFilter" minOccurs="0" maxOccurs="1"/>
          </sequence>
          <attribute name="getPermissions" type="xsd:boolean" use="optional"/>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="searchRolesResponse">
        <complexType>
          <sequence>
            <element name="role" type="policynet:Role" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          </sequence>
          <attribute name="totalRows" type="xsd:int" use="required"/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="getUserSecurityRulesRequest">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="getUserSecurityRulesResponse">
        <complexType>
          <sequence/>
          <attribute name="minPasswordLength" type="policynet:PasswordLength" use="required"/>
          <attribute name="maxPasswordAge" type="policynet:PasswordAge" use="required"/>
          <attribute name="passwordHistoryCount" type="policynet:PasswordHistoryCount" use="required"/>
          <attribute name="maxFailedLogins" type="policynet:FailedLoginsCount" use="required"/>
          <attribute name="lockoutDuration" type="policynet:LockoutDuration" use="required"/>
          <attribute name="observationWindow" type="policynet:ObservationWindow" use="required"/>
          <attribute name="forcePasswordChangeAfterLogin" type="xsd:boolean" use="required"/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="setUserSecurityRulesRequest">
        <complexType>
          <sequence>
            <element name="minPasswordLength" type="policynet:PasswordLength" minOccurs="1" maxOccurs="1"/>
            <element name="maxPasswordAge" type="policynet:PasswordAge" minOccurs="1" maxOccurs="1"/>
            <element name="passwordHistoryCount" type="policynet:PasswordHistoryCount" minOccurs="1" maxOccurs="1"/>
            <element name="maxFailedLogins" type="policynet:FailedLoginsCount" minOccurs="1" maxOccurs="1"/>
            <element name="lockoutDuration" type="policynet:LockoutDuration" minOccurs="1" maxOccurs="1"/>
            <element name="observationWindow" type="policynet:ObservationWindow" minOccurs="1" maxOccurs="1"/>
            <element name="forcePasswordChangeAfterLogin" type="xsd:boolean" minOccurs="1" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="setUserSecurityRulesResponse">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="getClockDriftSettingsRequest">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="getClockDriftSettingsResponse">
        <complexType>
          <sequence/>
          <attribute name="minDrift" type="policynet:ClockDrift" use="optional"/>
          <attribute name="maxDrift" type="policynet:ClockDrift" use="optional"/>
          <attribute name="publishForOutOfBoundsClocks" type="xsd:boolean" use="optional"/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="setClockDriftSettingsRequest">
        <complexType>
          <sequence>
            <element name="minDrift" type="policynet:ClockDrift" minOccurs="1" maxOccurs="1"/>
            <element name="maxDrift" type="policynet:ClockDrift" minOccurs="1" maxOccurs="1"/>
          </sequence>
          <attribute name="publishForOutOfBoundsClocks" type="xsd:boolean" use="optional"/>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="setClockDriftSettingsResponse">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="getRadiusSettingsRequest">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="getRadiusSettingsResponse">
        <complexType>
          <sequence>
            <element name="radiusSettings" type="policynet:RadiusSettings" minOccurs="0" maxOccurs="1" nillable="true"/>
          </sequence>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="setRadiusSettingsRequest">
        <complexType>
          <sequence>
            <element name="radiusSettings" type="policynet:RadiusSettings" minOccurs="1" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="setRadiusSettingsResponse">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="searchNasClientsRequest">
        <complexType>
          <sequence>
            <element name="searchFilter" type="policynet:NasClientSearchFilter" minOccurs="1" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="SearchNasClientsResponse">
        <complexType>
          <sequence>
            <element name="nasClient" type="policynet:NasClient" minOccurs="0" maxOccurs="unbounded"/>
          </sequence>
          <attribute name="totalRows" type="xsd:int" use="required"/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="createNasClientRequest">
        <complexType>
          <sequence>
            <element name="nasClient" type="policynet:NasClient" minOccurs="1" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="CreateNasClientResponse">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="updateNasClientRequest">
        <complexType>
          <sequence>
            <element name="nasClient" type="policynet:NasClient" minOccurs="1" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="UpdateNasClientResponse">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="deleteNasClientRequest">
        <complexType>
          <sequence>
            <element name="nasClientId" type="xsd:positiveInteger" minOccurs="1" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="DeleteNasClientResponse">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="searchRadiusProxiesRequest">
        <complexType>
          <sequence>
            <element name="searchFilter" type="policynet:RadiusProxySearchFilter" minOccurs="1" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="SearchRadiusProxiesResponse">
        <complexType>
          <sequence>
            <element name="radiusProxy" type="policynet:RadiusProxy" minOccurs="0" maxOccurs="unbounded"/>
          </sequence>
          <attribute name="totalRows" type="xsd:int" use="required"/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="createRadiusProxyRequest">
        <complexType>
          <sequence>
            <element name="radiusProxy" type="policynet:RadiusProxy" minOccurs="1" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="CreateRadiusProxyResponse">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="updateRadiusProxyRequest">
        <complexType>
          <sequence>
            <element name="radiusProxy" type="policynet:RadiusProxy" minOccurs="1" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="UpdateRadiusProxyResponse">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="deleteRadiusProxyRequest">
        <complexType>
          <sequence>
            <element name="radiusProxyId" type="xsd:positiveInteger" minOccurs="1" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="DeleteRadiusProxyResponse">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="forceDeployMulticastPolicyRequest">
        <complexType>
          <sequence/>
          <attribute name="policyId" type="xsd:positiveInteger" use="required"/>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="forceDeployMulticastPolicyResponse">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="createMeterReadScheduleRequest">
        <complexType>
          <sequence>
            <element name="policy" type="policynet:MeterReadType" minOccurs="1" maxOccurs="1"/>
            <element name="consumer" type="policynet:Consumer" minOccurs="0" maxOccurs="1" nillable="true"/>
          </sequence>
          <attribute name="publishInterval" type="xsd:positiveInteger" use="optional"/>
          <attribute name="publishBatchSize" type="xsd:positiveInteger" use="optional"/>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="createMeterReadScheduleResponse">
        <complexType>
          <sequence/>
          <attribute name="policyId" type="xsd:positiveInteger" use="required"/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="updateMeterReadScheduleRequest">
        <complexType>
          <sequence>
            <element name="policy" type="policynet:MeterReadType" minOccurs="1" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="updateMeterReadScheduleResponse">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="deleteMeterReadScheduleRequest">
        <complexType>
          <sequence/>
          <attribute name="policyId" type="xsd:positiveInteger" use="required"/>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="deleteMeterReadScheduleResponse">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="deployMeterReadScheduleRequest">
        <complexType>
          <sequence/>
          <attribute name="policyId" type="xsd:positiveInteger" use="required"/>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="deployMeterReadScheduleResponse">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="undeployMeterReadScheduleRequest">
        <complexType>
          <sequence/>
          <attribute name="policyId" type="xsd:positiveInteger" use="required"/>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="undeployMeterReadScheduleResponse">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="createMeterControlScheduleRequest">
        <complexType>
          <sequence>
            <element name="policy" type="policynet:MeterControlType" minOccurs="1" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="createMeterControlScheduleResponse">
        <complexType>
          <sequence/>
          <attribute name="policyId" type="xsd:positiveInteger" use="required"/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="updateMeterControlScheduleRequest">
        <complexType>
          <sequence>
            <element name="policy" type="policynet:MeterControlType" minOccurs="1" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="updateMeterControlScheduleResponse">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="deleteMeterControlScheduleRequest">
        <complexType>
          <sequence/>
          <attribute name="policyId" type="xsd:positiveInteger" use="required"/>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="deleteMeterControlScheduleResponse">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="deployMeterControlScheduleRequest">
        <complexType>
          <sequence/>
          <attribute name="policyId" type="xsd:positiveInteger" use="required"/>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="deployMeterControlScheduleResponse">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="undeployMeterControlScheduleRequest">
        <complexType>
          <sequence/>
          <attribute name="policyId" type="xsd:positiveInteger" use="required"/>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="undeployMeterControlScheduleResponse">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="createLoadControlScheduleRequest">
        <complexType>
          <sequence>
            <element name="policy" type="policynet:LoadControlType" minOccurs="1" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="createLoadControlScheduleResponse">
        <complexType>
          <sequence/>
          <attribute name="policyId" type="xsd:positiveInteger" use="required"/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="updateLoadControlScheduleRequest">
        <complexType>
          <sequence>
            <element name="policy" type="policynet:LoadControlType" minOccurs="1" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="updateLoadControlScheduleResponse">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="deleteLoadControlScheduleRequest">
        <complexType>
          <sequence/>
          <attribute name="policyId" type="xsd:positiveInteger" use="required"/>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="deleteLoadControlScheduleResponse">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="deployLoadControlScheduleRequest">
        <complexType>
          <sequence/>
          <attribute name="policyId" type="xsd:positiveInteger" use="required"/>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="deployLoadControlScheduleResponse">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="undeployLoadControlScheduleRequest">
        <complexType>
          <sequence/>
          <attribute name="policyId" type="xsd:positiveInteger" use="required"/>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="undeployLoadControlScheduleResponse">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="createPanPolicyRequest">
        <complexType>
          <sequence>
            <element name="policy" type="policynet:PanType" minOccurs="1" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="createPanPolicyResponse">
        <complexType>
          <sequence/>
          <attribute name="policyId" type="xsd:positiveInteger" use="required"/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="updatePanPolicyRequest">
        <complexType>
          <sequence>
            <element name="policy" type="policynet:PanType" minOccurs="1" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="updatePanPolicyResponse">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="deletePanPolicyRequest">
        <complexType>
          <sequence/>
          <attribute name="policyId" type="xsd:positiveInteger" use="required"/>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="deletePanPolicyResponse">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="deployPanPolicyRequest">
        <complexType>
          <sequence/>
          <attribute name="policyId" type="xsd:positiveInteger" use="required"/>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="deployPanPolicyResponse">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="undeployPanPolicyRequest">
        <complexType>
          <sequence/>
          <attribute name="policyId" type="xsd:positiveInteger" use="required"/>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="undeployPanPolicyResponse">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="createPanDevicesRequest">
        <complexType>
          <sequence>
            <element name="device" type="policynet:createPanDevicesRequestDevice" minOccurs="1" maxOccurs="unbounded" nillable="false"/>
          </sequence>
          <attribute name="espUtilitySerialNumber" type="policynet:UtilitySerialNumber" use="optional"/>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="createPanDevicesResponse">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="setPanDeviceLabelRequest">
        <complexType>
          <sequence/>
          <attribute name="eui" type="policynet:PanEui" use="required"/>
          <attribute name="panLabelId" type="xsd:positiveInteger" use="required"/>
          <attribute name="circuitId" type="policynet:PanCircuitId" use="optional"/>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="setPanDeviceLabelResponse">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="removePanDeviceLabelRequest">
        <complexType>
          <sequence/>
          <attribute name="eui" type="policynet:PanEui" use="required"/>
          <attribute name="circuitId" type="policynet:PanCircuitId" use="optional"/>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="removePanDeviceLabelResponse">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="assignPanServicePointRequest">
        <complexType>
          <sequence>
            <element name="panServicePoint" type="policynet:PanServicePoint" minOccurs="1" maxOccurs="unbounded" nillable="false"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="assignPanServicePointResponse">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="assignWaterServicePointRequest">
        <complexType>
          <sequence>
            <element name="WaterServicePoint" type="policynet:WaterServicePoint" minOccurs="1" maxOccurs="unbounded" nillable="false"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="assignWaterServicePointResponse">
        <complexType>
          <sequence>
            <element name="error" type="policynet:assignWaterServicePointError" minOccurs="0" maxOccurs="1" nillable="true"/>
          </sequence>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="createWaterMeterReadRequest">
        <complexType>
          <sequence>
            <element name="policy" type="policynet:OnRequestWaterMeterReadType" minOccurs="1" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="createWaterMeterReadResponse">
        <complexType>
          <sequence>
            <element name="waterMeterReadings" type="policynet:WaterMeterReadings" minOccurs="0" maxOccurs="1" nillable="true"/>
          </sequence>
          <attribute name="policyId" type="xsd:positiveInteger" use="required"/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="createWaterMeterReadScheduleRequest">
        <complexType>
          <sequence>
            <element name="policy" type="policynet:WaterMeterReadType" minOccurs="1" maxOccurs="1"/>
            <element name="consumer" type="policynet:Consumer" minOccurs="0" maxOccurs="1" nillable="true"/>
          </sequence>
          <attribute name="publishInterval" type="xsd:positiveInteger" use="optional"/>
          <attribute name="publishBatchSize" type="xsd:positiveInteger" use="optional"/>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="createWaterMeterReadScheduleResponse">
        <complexType>
          <sequence/>
          <attribute name="policyId" type="xsd:positiveInteger" use="required"/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="updateWaterMeterReadScheduleRequest">
        <complexType>
          <sequence>
            <element name="policy" type="policynet:WaterMeterReadType" minOccurs="1" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="updateWaterMeterReadScheduleResponse">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="deleteWaterMeterReadScheduleRequest">
        <complexType>
          <sequence/>
          <attribute name="policyId" type="xsd:positiveInteger" use="required"/>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="deleteWaterMeterReadScheduleResponse">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="deployWaterMeterReadScheduleRequest">
        <complexType>
          <sequence/>
          <attribute name="policyId" type="xsd:positiveInteger" use="required"/>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="deployWaterMeterReadScheduleResponse">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="undeployWaterMeterReadScheduleRequest">
        <complexType>
          <sequence/>
          <attribute name="policyId" type="xsd:positiveInteger" use="required"/>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="undeployWaterMeterReadScheduleResponse">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="createGasMeterReadScheduleRequest">
        <complexType>
          <sequence>
            <element name="policy" type="policynet:GasMeterReadType" minOccurs="1" maxOccurs="1"/>
            <element name="consumer" type="policynet:Consumer" minOccurs="0" maxOccurs="1" nillable="true"/>
          </sequence>
          <attribute name="publishInterval" type="xsd:positiveInteger" use="optional"/>
          <attribute name="publishBatchSize" type="xsd:positiveInteger" use="optional"/>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="createGasMeterReadScheduleResponse">
        <complexType>
          <sequence/>
          <attribute name="policyId" type="xsd:positiveInteger" use="required"/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="updateGasMeterReadScheduleRequest">
        <complexType>
          <sequence>
            <element name="policy" type="policynet:GasMeterReadType" minOccurs="1" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="updateGasMeterReadScheduleResponse">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="deleteGasMeterReadScheduleRequest">
        <complexType>
          <sequence/>
          <attribute name="policyId" type="xsd:positiveInteger" use="required"/>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="deleteGasMeterReadScheduleResponse">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="deployGasMeterReadScheduleRequest">
        <complexType>
          <sequence/>
          <attribute name="policyId" type="xsd:positiveInteger" use="required"/>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="deployGasMeterReadScheduleResponse">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="undeployGasMeterReadScheduleRequest">
        <complexType>
          <sequence/>
          <attribute name="policyId" type="xsd:positiveInteger" use="required"/>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="undeployGasMeterReadScheduleResponse">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="createDeviceControlScheduleRequest">
        <complexType>
          <sequence>
            <element name="policy" type="policynet:DeviceControlType" minOccurs="1" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="createDeviceControlScheduleResponse">
        <complexType>
          <sequence/>
          <attribute name="policyId" type="xsd:positiveInteger" use="required"/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="updateDeviceControlScheduleRequest">
        <complexType>
          <sequence>
            <element name="policy" type="policynet:DeviceControlType" minOccurs="1" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="updateDeviceControlScheduleResponse">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="deleteDeviceControlScheduleRequest">
        <complexType>
          <sequence/>
          <attribute name="policyId" type="xsd:positiveInteger" use="required"/>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="deleteDeviceControlScheduleResponse">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="deployDeviceControlScheduleRequest">
        <complexType>
          <sequence/>
          <attribute name="policyId" type="xsd:positiveInteger" use="required"/>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="deployDeviceControlScheduleResponse">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="undeployDeviceControlScheduleRequest">
        <complexType>
          <sequence/>
          <attribute name="policyId" type="xsd:positiveInteger" use="required"/>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="undeployDeviceControlScheduleResponse">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="createWaterMeterRegisterReportRequest">
        <complexType>
          <sequence>
            <element name="params" type="policynet:reportParams" minOccurs="1" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="createWaterMeterRegisterReportResponse">
        <complexType>
          <sequence>
            <element name="report" type="policynet:WaterMeterReadings" minOccurs="0" maxOccurs="1" nillable="true"/>
          </sequence>
          <attribute name="totalRows" type="xsd:int" use="required"/>
          <attribute name="hasReported" type="xsd:boolean" use="required"/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="createWaterMeterIntervalReportRequest">
        <complexType>
          <sequence>
            <element name="params" type="policynet:reportParams" minOccurs="1" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="createWaterMeterIntervalReportResponse">
        <complexType>
          <sequence>
            <element name="report" type="policynet:WaterMeterReadings" minOccurs="0" maxOccurs="1" nillable="true"/>
          </sequence>
          <attribute name="totalRows" type="xsd:int" use="required"/>
          <attribute name="hasReported" type="xsd:boolean" use="required"/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="createGasMeterRegisterReportRequest">
        <complexType>
          <sequence>
            <element name="params" type="policynet:reportParams" minOccurs="1" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="createGasMeterRegisterReportResponse">
        <complexType>
          <sequence>
            <element name="report" type="policynet:GasMeterReadings" minOccurs="0" maxOccurs="1" nillable="true"/>
          </sequence>
          <attribute name="totalRows" type="xsd:int" use="required"/>
          <attribute name="hasReported" type="xsd:boolean" use="required"/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="createGasMeterIntervalReportRequest">
        <complexType>
          <sequence>
            <element name="params" type="policynet:reportParams" minOccurs="1" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="createGasMeterIntervalReportResponse">
        <complexType>
          <sequence>
            <element name="report" type="policynet:GasMeterReadings" minOccurs="0" maxOccurs="1" nillable="true"/>
          </sequence>
          <attribute name="totalRows" type="xsd:int" use="required"/>
          <attribute name="hasReported" type="xsd:boolean" use="required"/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="createServerPolicyRequest">
        <complexType>
          <sequence>
            <element name="policy" type="policynet:ServerPolicyType" minOccurs="1" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="createServerPolicyResponse">
        <complexType>
          <sequence/>
          <attribute name="policyId" type="xsd:positiveInteger" use="required"/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="updateServerPolicyRequest">
        <complexType>
          <sequence>
            <element name="policy" type="policynet:ServerPolicyType" minOccurs="1" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="updateServerPolicyResponse">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="deleteServerPolicyRequest">
        <complexType>
          <sequence/>
          <attribute name="policyId" type="xsd:positiveInteger" use="required"/>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="deleteServerPolicyResponse">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="deployServerPolicyRequest">
        <complexType>
          <sequence/>
          <attribute name="policyId" type="xsd:positiveInteger" use="required"/>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="deployServerPolicyResponse">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="undeployServerPolicyRequest">
        <complexType>
          <sequence/>
          <attribute name="policyId" type="xsd:positiveInteger" use="required"/>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="undeployServerPolicyResponse">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="searchPoliciesRequest">
        <complexType>
          <sequence>
            <element name="searchFilter" type="policynet:PolicySearchFilter" minOccurs="0" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="searchPoliciesResponse">
        <complexType>
          <sequence>
            <element name="policy" type="policynet:PolicyType" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          </sequence>
          <attribute name="totalRows" type="xsd:int" use="required"/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="searchPoliciesListRequest">
        <complexType>
          <sequence>
            <element name="searchFilter" type="policynet:PolicySearchFilter" minOccurs="0" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="searchPoliciesListResponse">
        <complexType>
          <sequence>
            <element name="policy" type="policynet:BasePolicy" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          </sequence>
          <attribute name="totalRows" type="xsd:int" use="required"/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="getDeviceStateSummaryRequest">
        <complexType>
          <sequence/>
          <attribute name="customerId" type="xsd:positiveInteger" use="optional"/>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="getDeviceStateSummaryResponse">
        <complexType>
          <sequence>
            <element name="smartMeters" type="policynet:DeviceStateSummary" minOccurs="0" maxOccurs="1" nillable="true"/>
            <element name="unboundMeters" type="policynet:DeviceStateSummary" minOccurs="0" maxOccurs="1" nillable="true"/>
            <element name="smartGridCards" type="policynet:DeviceStateSummary" minOccurs="0" maxOccurs="1" nillable="true"/>
            <element name="sgModems" type="policynet:DeviceStateSummary" minOccurs="0" maxOccurs="1" nillable="true"/>
            <element name="waterMeters" type="policynet:DeviceStateSummary" minOccurs="0" maxOccurs="1" nillable="true"/>
            <element name="gasMeters" type="policynet:DeviceStateSummary" minOccurs="0" maxOccurs="1" nillable="true"/>
            <element name="dreds" type="policynet:DeviceStateSummary" minOccurs="0" maxOccurs="1" nillable="true"/>
            <element name="smartPlugs" type="policynet:DeviceStateSummary" minOccurs="0" maxOccurs="1" nillable="true"/>
            <element name="panelMeters" type="policynet:DeviceStateSummary" minOccurs="0" maxOccurs="1" nillable="true"/>
            <element name="panDisplays" type="policynet:DeviceStateSummary" minOccurs="0" maxOccurs="1" nillable="true"/>
            <element name="autoTcus" type="policynet:DeviceStateSummary" minOccurs="0" maxOccurs="1" nillable="true"/>
            <element name="gateways" type="policynet:DeviceStateSummary" minOccurs="0" maxOccurs="1" nillable="true"/>
          </sequence>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="searchDevicesWildcardRequest">
        <complexType>
          <sequence>
            <element name="searchFilter" type="policynet:DeviceWildcardSearchFilter" minOccurs="0" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="searchDevicesResponse">
        <complexType>
          <sequence>
            <element name="devices" type="policynet:SgDevice" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          </sequence>
          <attribute name="totalRows" type="xsd:int" use="required"/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="searchDevicesRequest">
        <complexType>
          <sequence>
            <element name="searchFilter" type="policynet:DeviceSearchFilter" minOccurs="0" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="searchDevicesBaseRequest">
        <complexType>
          <sequence>
            <element name="searchFilter" type="policynet:SearchDevicesBaseFilter" minOccurs="0" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="SearchDevicesBaseResponse">
        <complexType>
          <sequence>
            <element name="devices" type="policynet:SearchDevicesBaseDevice" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          </sequence>
          <attribute name="totalRows" type="xsd:int" use="required"/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="searchDeviceSiblingsRequest">
        <complexType>
          <sequence>
            <element name="searchFilter" type="policynet:DeviceSiblingSearchFilter" minOccurs="0" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="searchDeviceSiblingsResponse">
        <complexType>
          <sequence>
            <element name="deviceSibling" type="policynet:DeviceSibling" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          </sequence>
          <attribute name="totalRows" type="xsd:int" use="required"/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="searchDeviceListRequest">
        <complexType>
          <sequence>
            <element name="searchFilter" type="policynet:DeviceListSearchFilter" minOccurs="0" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="searchDeviceListResponse">
        <complexType>
          <sequence>
            <element name="listItem" type="policynet:DeviceListItem" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          </sequence>
          <attribute name="totalRows" type="xsd:int" use="required"/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="searchCommAssetsRequest">
        <complexType>
          <sequence>
            <element name="searchFilter" type="policynet:CommAssetsSearchFilter" minOccurs="0" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="searchCommAssetsResponse">
        <complexType>
          <sequence>
            <element name="SmartGridCard" type="policynet:SmartGridCard" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          </sequence>
          <attribute name="totalRows" type="xsd:int" use="required"/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="deleteCommAssetRequest">
        <complexType>
          <sequence>
            <element name="sgcSerialNumber" type="policynet:sgcSerialNumber" minOccurs="1" maxOccurs="unbounded"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="deleteCommAssetResponse">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="createMeterPasswordReportRequest">
        <complexType>
          <sequence>
            <element name="searchFilter" type="policynet:createMeterPasswordReportSearchFilter" minOccurs="0" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="createMeterPasswordReportResponse">
        <complexType>
          <sequence>
            <element name="passwordSet" type="policynet:MeterPasswordReportRow" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          </sequence>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="updateDeviceBindingRequest">
        <complexType>
          <sequence>
            <element name="deviceBinding" type="policynet:DeviceBinding" minOccurs="1" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="updateDeviceBindingResponse">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="getDevicesStatusesRequest">
        <complexType>
          <sequence>
            <element name="utilitySerialNumbers" type="policynet:DeviceList" minOccurs="1" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="getDevicesStatusesResponse">
        <complexType>
          <sequence>
            <element name="statuses" type="policynet:DeviceStatus" minOccurs="0" maxOccurs="unbounded"/>
          </sequence>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="getNameListRequest">
        <complexType>
          <sequence>
            <element name="nameType" type="policynet:NameType" minOccurs="1" maxOccurs="1"/>
            <element name="nameFilter" type="policynet:String" minOccurs="1" maxOccurs="1"/>
            <element name="maxCount" type="xsd:int" minOccurs="1" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="getNameListResponse">
        <complexType>
          <sequence>
            <element name="row" type="policynet:getNameListResponseRow" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          </sequence>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="previewPolicyTargetCountRequest">
        <complexType>
          <sequence>
            <element name="groupIds" type="xsd:positiveInteger" minOccurs="1" maxOccurs="unbounded"/>
            <element name="utilitySerialNumbers" type="policynet:UtilitySerialNumber" minOccurs="1" maxOccurs="unbounded"/>
            <element name="servicePointIds" type="policynet:ServicePointId" minOccurs="1" maxOccurs="unbounded"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="previewPolicyTargetCountResponse">
        <complexType>
          <sequence/>
          <attribute name="targetCount" type="xsd:positiveInteger" use="required"/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="searchPolicyTargetsRequest">
        <complexType>
          <sequence>
            <element name="searchFilter" type="policynet:PolicyTargetSearchFilter" minOccurs="1" maxOccurs="1">
              <annotation>
                <documentation>RULES: IF policyType=panPricingInformation, pricingMode SHOULD be specified (DEFAULTS to ToU).</documentation>
              </annotation>
            </element>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="searchPolicyTargetsResponse">
        <complexType>
          <sequence>
            <choice>
              <element name="group" type="policynet:EligibleTargetGroup" minOccurs="1" maxOccurs="unbounded"/>
              <element name="device" type="policynet:EligibleTargetDevice" minOccurs="1" maxOccurs="unbounded"/>
              <element name="servicePoint" type="policynet:EligibleTargetServicePoint" minOccurs="1" maxOccurs="unbounded"/>
            </choice>
          </sequence>
          <attribute name="totalRows" type="xsd:positiveInteger" use="required"/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="syncPolicyTargetsRequest">
        <complexType>
          <sequence/>
          <attribute name="policyType" type="policynet:PolicyTaskType" use="required"/>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="syncPolicyTargetsResponse">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="createCustomDeviceAttributesRequest">
        <complexType>
          <sequence>
            <element name="customDeviceAttribute" type="policynet:CustomDeviceAttribute" minOccurs="1" maxOccurs="unbounded" nillable="false"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="createCustomDeviceAttributesResponse">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="deleteCustomDeviceAttributesRequest">
        <complexType>
          <sequence>
            <element name="customDeviceAttribute" type="policynet:CustomDeviceAttribute" minOccurs="1" maxOccurs="unbounded" nillable="false"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="deleteCustomDeviceAttributesResponse">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="searchCustomDeviceAttributesRequest">
        <complexType>
          <sequence>
            <element name="searchFilter" type="policynet:CustomDeviceAttributesSearchFilter" minOccurs="1" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="searchCustomDeviceAttributesResponse">
        <complexType>
          <sequence>
            <element name="customDeviceAttribute" type="policynet:CustomDeviceAttribute" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          </sequence>
          <attribute name="totalRows" type="xsd:int" use="required"/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="createIntervalReportRequest">
        <complexType>
          <sequence>
            <element name="params" type="policynet:reportParams" minOccurs="1" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="createIntervalReportResponse">
        <complexType>
          <sequence>
            <element name="report" type="policynet:MeterReadings" minOccurs="0" maxOccurs="1" nillable="true"/>
          </sequence>
          <attribute name="totalRows" type="xsd:int" use="required"/>
          <attribute name="hasReported" type="xsd:boolean" use="required"/>
          <attribute name="maxChannels" type="xsd:positiveInteger" use="required"/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="createValidatedIntervalReportRequest">
        <complexType>
          <sequence>
            <element name="params" type="policynet:reportParams" minOccurs="1" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="createValidatedIntervalReportResponse">
        <complexType>
          <sequence>
            <element name="report" type="policynet:MeterReadings" minOccurs="0" maxOccurs="1" nillable="true"/>
          </sequence>
          <attribute name="totalRows" type="xsd:int" use="required"/>
          <attribute name="hasReported" type="xsd:boolean" use="required"/>
          <attribute name="maxChannels" type="xsd:positiveInteger" use="required"/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="createRegisterReportRequest">
        <complexType>
          <sequence>
            <element name="params" type="policynet:reportParams" minOccurs="1" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="createRegisterReportResponse">
        <complexType>
          <sequence>
            <element name="report" type="policynet:MeterReadings" minOccurs="0" maxOccurs="1" nillable="true"/>
          </sequence>
          <attribute name="totalRows" type="xsd:int" use="required"/>
          <attribute name="hasReported" type="xsd:boolean" use="required"/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="createRegisterReportMSPRequest">
        <complexType>
          <sequence>
            <element name="params" type="policynet:reportParams" minOccurs="1" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="createRegisterReportMSPResponse">
        <complexType>
          <sequence>
            <element name="report" type="policynet:MeterReadings" minOccurs="0" maxOccurs="1" nillable="true"/>
          </sequence>
          <attribute name="totalRows" type="xsd:int" use="required"/>
          <attribute name="hasReported" type="xsd:boolean" use="required"/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="searchPanTopologyRequest">
        <complexType>
          <sequence>
            <element name="searchFilter" type="policynet:PanTopologySearchFilter" minOccurs="1" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="searchPanTopologyResponse">
        <complexType>
          <sequence>
            <element name="panTopology" type="policynet:PanTopologyType" minOccurs="0" maxOccurs="1" nillable="true"/>
          </sequence>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="createDeviceHistoryReportRequest">
        <complexType>
          <sequence>
            <element name="searchFilter" type="policynet:DeviceHistorySearchFilter" minOccurs="0" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="createDeviceHistoryReportResponse">
        <complexType>
          <sequence>
            <element name="deviceHistory" type="policynet:DeviceHistory" minOccurs="0" maxOccurs="1" nillable="true"/>
          </sequence>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="searchGroupsRequest">
        <complexType>
          <sequence>
            <element name="searchFilter" type="policynet:GroupsSearchFilter" minOccurs="0" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="searchGroupsResponse">
        <complexType>
          <sequence>
            <element name="groups" type="policynet:DeviceGroup" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          </sequence>
          <attribute name="totalRows" type="xsd:int" use="required"/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="uploadFirmwarePackageRequest">
        <complexType>
          <sequence>
            <element name="image" type="policynet:BinaryData" minOccurs="1" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="uploadFirmwarePackageResponse">
        <complexType>
          <sequence/>
          <attribute name="packageId" type="xsd:int" use="required"/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="importShipFileRequest">
        <complexType>
          <sequence>
            <element name="image" type="policynet:BinaryData" minOccurs="1" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="importShipFileResponse">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="exportShipFileRequest">
        <complexType>
          <sequence>
            <element name="groupId" type="xsd:positiveInteger" minOccurs="1" maxOccurs="1"/>
            <element name="certificateSerialNo" type="xsd:positiveInteger" minOccurs="1" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="exportShipFileResponse">
        <complexType>
          <sequence>
            <element name="image" type="policynet:BinaryData" minOccurs="0" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="uploadDeviceExportCertificateRequest">
        <complexType>
          <sequence>
            <element name="serviceName" type="policynet:ServiceName" minOccurs="1" maxOccurs="1"/>
            <element name="cert" type="xsd:string" minOccurs="1" maxOccurs="1" nillable="false"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="uploadDeviceExportCertificateResponse">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="searchDeviceExportCertificatesRequest">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="searchDeviceExportCertificatesResponse">
        <complexType>
          <sequence>
            <element name="certificates" type="policynet:DeviceExportCertificate" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          </sequence>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="searchFirmwarePackagesRequest">
        <complexType>
          <sequence>
            <element name="searchFilter" type="policynet:FirmwarePackagesSearchFilter" minOccurs="0" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="searchFirmwarePackagesResponse">
        <complexType>
          <sequence>
            <element name="packages" type="policynet:FirmwarePackage" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          </sequence>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="deleteFirmwarePackageRequest">
        <complexType>
          <sequence/>
          <attribute name="packageId" type="xsd:int" use="required"/>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="deleteFirmwarePackageResponse">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="updateFirmwarePackageStateRequest">
        <complexType>
          <sequence/>
          <attribute name="packageId" type="xsd:int" use="required"/>
          <attribute name="active" type="xsd:boolean" use="required"/>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="updateFirmwarePackageStateResponse">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="downloadFirmwarePackageRequest">
        <complexType>
          <sequence/>
          <attribute name="packageId" type="xsd:int" use="required"/>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="downloadFirmwarePackageResponse">
        <complexType>
          <sequence>
            <element name="image" type="policynet:BinaryData" minOccurs="1" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="createMeterProgramRequest">
        <complexType>
          <sequence>
            <element name="meterData" type="xsd:base64Binary" minOccurs="1" maxOccurs="1" nillable="false"/>
          </sequence>
          <attribute name="ripple" type="xsd:boolean" use="optional"/>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="createMeterProgramResponse">
        <complexType>
          <sequence/>
          <attribute name="meterProgramId" type="xsd:string" use="required"/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="searchMeterProgramsRequest">
        <complexType>
          <sequence>
            <element name="searchFilter" type="policynet:MeterProgramSearchFilter" minOccurs="0" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="searchMeterProgramsResponse">
        <complexType>
          <sequence>
            <element name="programs" type="policynet:meterProgramInfo" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          </sequence>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="updateMeterProgramRequest">
        <complexType>
          <sequence/>
          <attribute name="meterProgramId" type="xsd:string" use="required"/>
          <attribute name="active" type="xsd:boolean" use="required"/>
          <attribute name="customerId" type="xsd:positiveInteger" use="optional"/>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="updateMeterProgramResponse">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="deleteMeterProgramRequest">
        <complexType>
          <sequence/>
          <attribute name="meterProgramId" type="xsd:string" use="required"/>
          <attribute name="customerId" type="xsd:positiveInteger" use="optional"/>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="deleteMeterProgramResponse">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="createQosProfileRequest">
        <complexType>
          <sequence>
            <element name="profile" type="policynet:QosProfile" minOccurs="1" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="createQosProfileResponse">
        <complexType>
          <sequence/>
          <attribute name="profileId" type="xsd:positiveInteger" use="required"/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="searchQosProfilesRequest">
        <complexType>
          <sequence>
            <element name="searchFilter" type="policynet:QosProfileSearchFilter" minOccurs="0" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="searchQosProfilesResponse">
        <complexType>
          <sequence>
            <element name="profile" type="policynet:QosProfile" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          </sequence>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="updateQosProfileRequest">
        <complexType>
          <sequence>
            <element name="profile" type="policynet:QosProfile" minOccurs="1" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="updateQosProfileResponse">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="deleteQosProfileRequest">
        <complexType>
          <sequence/>
          <attribute name="profileId" type="xsd:positiveInteger" use="required"/>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="deleteQosProfileResponse">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="searchRadiusDictionariesRequest">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="searchRadiusDictionariesResponse">
        <complexType>
          <sequence>
            <element name="dictionary" type="policynet:RadiusDictionary" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          </sequence>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="createPowerQualityReportRequest">
        <complexType>
          <sequence>
            <element name="params" type="policynet:reportParams" minOccurs="1" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="createPowerQualityReportResponse">
        <complexType>
          <sequence>
            <element name="report" type="policynet:MeterReadings" minOccurs="0" maxOccurs="1" nillable="true"/>
          </sequence>
          <attribute name="totalRows" type="xsd:int" use="required"/>
          <attribute name="hasReported" type="xsd:boolean" use="required"/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="createPowerQualityProfileReportRequest">
        <complexType>
          <sequence>
            <element name="params" type="policynet:reportParams" minOccurs="1" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="createPowerQualityProfileReportResponse">
        <complexType>
          <sequence>
            <element name="report" type="policynet:MeterReadings" minOccurs="0" maxOccurs="1" nillable="true"/>
          </sequence>
          <attribute name="totalRows" type="xsd:int" use="required"/>
          <attribute name="hasReported" type="xsd:boolean" use="required"/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="getVoltageBandSettingsRequest">
        <complexType>
          <sequence>
            <element name="searchFilter" type="policynet:VoltageBandSettingsSearchFilter" minOccurs="1" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="getVoltageBandSettingsResponse">
        <complexType>
          <sequence>
            <element name="settings" type="policynet:VoltageBandSettings" minOccurs="0" maxOccurs="1" nillable="true"/>
          </sequence>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="setVoltageBandSettingsRequest">
        <complexType>
          <sequence>
            <element name="settings" type="policynet:VoltageBandSettings" minOccurs="1" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="setVoltageBandSettingsResponse">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="createOutageStatsReportRequest">
        <complexType>
          <sequence>
            <element name="params" type="policynet:reportParams" minOccurs="1" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="createOutageStatsReportResponse">
        <complexType>
          <sequence>
            <element name="report" type="policynet:MeterReadings" minOccurs="0" maxOccurs="1" nillable="true"/>
          </sequence>
          <attribute name="totalRows" type="xsd:int" use="required"/>
          <attribute name="hasReported" type="xsd:boolean" use="required"/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="createMeterProgramResultRequest">
        <complexType>
          <sequence>
            <element name="request" type="policynet:policyResultDetailRequest" minOccurs="1" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="policyResultDetailResponse">
        <complexType>
          <sequence>
            <element name="report" type="policynet:policyResultDetailResponseRow" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          </sequence>
          <attribute name="totalRows" type="xsd:int" use="required"/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="createSWUpgradeResultRequest">
        <complexType>
          <sequence>
            <element name="request" type="policynet:policyResultDetailRequest" minOccurs="1" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="getEventTrendsRequest">
        <complexType>
          <sequence>
            <element name="params" type="policynet:EventTrendParams" minOccurs="1" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="getEventTrendsResponse">
        <complexType>
          <sequence>
            <element name="eventTrend" type="policynet:EventTrend" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          </sequence>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="getEventSummaryRequest">
        <complexType>
          <sequence>
            <element name="params" type="policynet:EventSummaryParams" minOccurs="1" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="getEventSummaryResponse">
        <complexType>
          <sequence>
            <element name="eventSummary" type="policynet:EventSummary" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          </sequence>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="createEventsReportRequest">
        <complexType>
          <sequence>
            <element name="params" type="policynet:eventsReportParams" minOccurs="1" maxOccurs="1"/>
            <element name="eventCode" type="xsd:int" minOccurs="0" maxOccurs="unbounded"/>
          </sequence>
          <attribute name="eventSeverity" type="policynet:EventSeverity" use="optional"/>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="createEventsReportResponse">
        <complexType>
          <sequence>
            <element name="events" type="policynet:EventRecords" minOccurs="1" maxOccurs="1"/>
          </sequence>
          <attribute name="totalRows" type="xsd:int" use="required"/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="createSystemOutagesReportRequest">
        <complexType>
          <sequence>
            <element name="params" type="policynet:outageReportParams" minOccurs="1" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="createSystemOutagesReportResponse">
        <complexType>
          <sequence>
            <choice>
              <element name="report" type="policynet:PowerOutages" minOccurs="1" maxOccurs="1" nillable="false"/>
            </choice>
          </sequence>
          <attribute name="totalRows" type="xsd:positiveInteger" use="required"/>
          <attribute name="outageCount" type="xsd:positiveInteger" use="optional"/>
          <attribute name="unknownCount" type="xsd:positiveInteger" use="optional"/>
          <attribute name="energyStatusFilter" type="policynet:EnergyStateFilter" use="optional"/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="getSystemOutagesSummaryRequest">
        <complexType>
          <sequence>
            <element name="params" type="policynet:systemOutagesSummaryParams" minOccurs="1" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="getSystemOutagesSummaryResponse">
        <complexType>
          <sequence>
            <choice>
              <element name="report" type="policynet:getSystemOutagesSummaryReport" minOccurs="1" maxOccurs="1" nillable="false"/>
            </choice>
          </sequence>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="searchFeedersRequest">
        <complexType>
          <sequence>
            <element name="searchFilter" type="policynet:FeedersSearchFilter" minOccurs="1" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="searchFeedersResponse">
        <complexType>
          <sequence>
            <element name="feeder" type="policynet:Feeder" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          </sequence>
          <attribute name="totalRows" type="xsd:positiveInteger" use="required"/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="createChronicReadFailureReportRequest">
        <complexType>
          <sequence>
            <element name="params" type="policynet:reportParams" minOccurs="1" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="createChronicReadFailureReportResponse">
        <complexType>
          <sequence>
            <element name="report" type="policynet:ChronicReadFailureReportItem" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          </sequence>
          <attribute name="totalRows" type="xsd:int" use="required"/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="createFailedEnforcementReportRequest">
        <complexType>
          <sequence>
            <element name="params" type="policynet:FailedEnforcementReportParams" minOccurs="1" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="createFailedEnforcementReportResponse">
        <complexType>
          <sequence>
            <element name="report" type="policynet:FailedEnforcementReportRow" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          </sequence>
          <attribute name="totalRows" type="xsd:int" use="required"/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="createClockDriftReportRequest">
        <complexType>
          <sequence>
            <element name="params" type="policynet:ClockDriftReportParams" minOccurs="1" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="createClockDriftReportResponse">
        <complexType>
          <sequence>
            <element name="report" type="policynet:ClockDriftReportRow" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          </sequence>
          <attribute name="totalRows" type="xsd:int" use="required"/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="createClockAdjustmentReportRequest">
        <complexType>
          <sequence>
            <element name="params" type="policynet:ClockAdjustmentReportParams" minOccurs="1" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="createClockAdjustmentReportResponse">
        <complexType>
          <sequence>
            <element name="report" type="policynet:ClockAdjustmentReportRow" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          </sequence>
          <attribute name="totalRows" type="xsd:int" use="required"/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="createRadiusAccountingReportRequest">
        <complexType>
          <sequence>
            <element name="params" type="policynet:RadiusAccountingReportParams" minOccurs="1" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="createRadiusAccountingReportResponse">
        <complexType>
          <sequence>
            <element name="report" type="policynet:RadiusAccountingReportRow" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          </sequence>
          <attribute name="totalRows" type="xsd:int" use="required"/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="createIntervalDataSummaryReportRequest">
        <complexType>
          <sequence>
            <element name="params" type="policynet:aggregateReportParams" minOccurs="1" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="createIntervalReadDataSummaryReportResponse">
        <complexType>
          <sequence>
            <element name="report" type="policynet:IntervalReadDataSummaryReportItem" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          </sequence>
          <attribute name="totalRows" type="xsd:int" use="required"/>
          <attribute name="avgSuccessRate" type="xsd:decimal" use="required"/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="createIntervalReadGapReportRequest">
        <complexType>
          <sequence>
            <element name="params" type="policynet:reportParams" minOccurs="1" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="createIntervalReadGapReportResponse">
        <complexType>
          <sequence>
            <element name="report" type="policynet:IntervalReadGapReportItem" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          </sequence>
          <attribute name="totalRows" type="xsd:int" use="required"/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="createSystemReliabilityReportRequest">
        <complexType>
          <sequence>
            <element name="params" type="policynet:SystemReliabilityReportFilter" minOccurs="1" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="createSystemReliabilityReportResponse">
        <complexType>
          <sequence>
            <element name="report" type="policynet:SystemReliabilityReportRow" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          </sequence>
          <attribute name="totalRows" type="xsd:int" use="required"/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="getSystemReliabilityConfigRequest">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="getSystemReliabilityConfigResponse">
        <complexType>
          <sequence>
            <element name="config" type="policynet:SystemReliabilityConfig" minOccurs="1" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="setSystemReliabilityConfigRequest">
        <complexType>
          <sequence>
            <element name="config" type="policynet:SystemReliabilityConfig" minOccurs="1" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="setSystemReliabilityConfigResponse">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="createDeviceGroupRequest">
        <complexType>
          <sequence>
            <element name="deviceGroup" type="policynet:DeviceGroup" minOccurs="1" maxOccurs="1">
              <annotation>
                <documentation>RULES: IF groupCategory=panPricingGroup, pricingMode SHOULD be specified (DEFAULTS to ToU).  IF pricingMode=ToU, BOTH retailerId AND meterProgramId MUST be specified in the FIRST level of filterGroup. IF pricingMode=NonToU, retailerId MUST be specified in the FIRST level of filtergroup.  IF groupCategory=dredControl, groupType MUST be panDeviceGroup.</documentation>
              </annotation>
            </element>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="createDeviceGroupResponse">
        <complexType>
          <sequence/>
          <attribute name="groupId" type="xsd:int" use="required"/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="updateDeviceGroupRequest">
        <complexType>
          <sequence>
            <element name="deviceGroup" type="policynet:DeviceGroup" minOccurs="1" maxOccurs="1">
              <annotation>
                <documentation>RULES: IF groupCategory=panPricingGroup, pricingMode SHOULD be specified (DEFAULTS to ToU).  IF pricingMode=ToU, BOTH retailerId AND meterProgramId MUST be specified in the FIRST level of filterGroup. IF pricingMode=NonToU, retailerId MUST be specified in the FIRST level of filtergroup.</documentation>
              </annotation>
            </element>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="updateDeviceGroupResponse">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="deleteDeviceGroupRequest">
        <complexType>
          <sequence/>
          <attribute name="groupId" type="xsd:int" use="required"/>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="deleteDeviceGroupResponse">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="getGroupCountRequest">
        <complexType>
          <sequence>
            <element name="operationalStatus" type="policynet:OperationalStatus" minOccurs="1" maxOccurs="6"/>
            <element name="filterGroup" type="policynet:DeviceGroupRoleFilterGroup" minOccurs="0" maxOccurs="1" nillable="true"/>
          </sequence>
          <attribute name="groupType" type="policynet:GroupType" use="required"/>
          <attribute name="groupCategory" type="policynet:DeviceGroupCategory" use="required"/>
          <attribute name="pricingMode" type="policynet:MeterPricingMode" use="optional">
            <annotation>
              <documentation>Only applicable if groupCategory=panPricingGroup, in which case it defaults to ToU pricing mode if not specified</documentation>
            </annotation>
          </attribute>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="getGroupCountResponse">
        <complexType>
          <sequence/>
          <attribute name="groupCount" type="xsd:int" use="required"/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="getDeviceGroupAttributeValuesRequest">
        <complexType>
          <sequence/>
          <attribute name="deviceType" type="policynet:DeviceType" use="required"/>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="getDeviceGroupAttributeValuesResponse">
        <complexType>
          <sequence>
            <element name="attributeValues" type="policynet:AttributeValue" minOccurs="0" maxOccurs="unbounded"/>
          </sequence>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="getPolicyStatusRequest">
        <complexType>
          <sequence>
            <element name="searchFilter" type="policynet:getPolicyStatusRequestFilter" minOccurs="1" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="getPolicyStatusResponse">
        <complexType>
          <sequence>
            <element name="report" type="policynet:getPolicyStatusResponseRow" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          </sequence>
          <attribute name="totalRows" type="xsd:int" use="required"/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="getPolicyDeploymentStats">
        <complexType>
          <sequence>
            <element name="policyId" type="xsd:positiveInteger" minOccurs="1" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="getPolicyDeploymentStatsResponse">
        <complexType>
          <sequence>
            <element name="timesToDeploy" type="policynet:TimesToDeploy" minOccurs="1" maxOccurs="1"/>
          </sequence>
          <attribute name="avgTimeToDeploy" type="xsd:positiveInteger" use="required"/>
          <attribute name="minTimeToDeploy" type="xsd:positiveInteger" use="required"/>
          <attribute name="maxTimeToDeploy" type="xsd:positiveInteger" use="required"/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="createPolicyDeploymentReportRequest">
        <complexType>
          <sequence>
            <element name="params" type="policynet:policyDeploymentReportParams" minOccurs="1" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="createPolicyDeploymentReportResponse">
        <complexType>
          <sequence>
            <element name="deploymentResults" type="policynet:PolicyDeploymentResults" minOccurs="1" maxOccurs="1"/>
          </sequence>
          <attribute name="totalRows" type="xsd:int" use="required"/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="createPolicyEnforcementReportRequest">
        <complexType>
          <sequence>
            <element name="params" type="policynet:aggregateReportParams" minOccurs="1" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="createPolicyEnforcementReportResponse">
        <complexType>
          <sequence>
            <element name="enforcementResults" type="policynet:PolicyEnforcementResults" minOccurs="1" maxOccurs="1"/>
          </sequence>
          <attribute name="totalRows" type="xsd:int" use="required"/>
          <attribute name="avgReportTime" type="xsd:decimal" use="optional"/>
          <attribute name="medReportTime" type="xsd:decimal" use="optional"/>
          <attribute name="avgSuccessRate" type="xsd:decimal" use="optional"/>
          <attribute name="beginDate" type="policynet:deviceLocalTime" use="required"/>
          <attribute name="endDate" type="policynet:deviceLocalTime" use="required"/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="getDeviceGroupChangeRequest">
        <complexType>
          <sequence>
            <element name="operationalStatus" type="policynet:OperationalStatus" minOccurs="1" maxOccurs="6"/>
            <element name="filterGroup" type="policynet:DeviceGroupRoleFilterGroup" minOccurs="0" maxOccurs="1" nillable="true"/>
          </sequence>
          <attribute name="groupId" type="xsd:int" use="required"/>
          <attribute name="groupType" type="policynet:GroupType" use="required"/>
          <attribute name="groupCategory" type="policynet:DeviceGroupCategory" use="required"/>
          <attribute name="pricingMode" type="policynet:MeterPricingMode" use="optional">
            <annotation>
              <documentation>Only applicable if groupCategory=panPricingGroup, in which case it defaults to ToU pricing mode if not specified</documentation>
            </annotation>
          </attribute>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="getDeviceGroupChangeResponse">
        <complexType>
          <sequence>
            <element name="row" type="policynet:getDeviceGroupChangeResponseRow" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          </sequence>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="getDeviceOperationalStateChangeRequest">
        <complexType>
          <sequence>
            <element name="operationalState" type="policynet:DeviceOperationalState" minOccurs="1" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="getDeviceOperationalStateChangeResponse">
        <complexType>
          <sequence>
            <element name="servicePoint" type="policynet:ServicePoint" minOccurs="0" maxOccurs="1" nillable="true"/>
            <element name="policy" type="policynet:PolicyType" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
            <element name="device" type="policynet:SgDevice" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          </sequence>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="searchAuditTrailRequest">
        <complexType>
          <sequence>
            <element name="searchFilter" type="policynet:AuditTrailSearchFilter" minOccurs="1" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="searchAuditTrailResponse">
        <complexType>
          <sequence>
            <element name="report" type="policynet:searchAuditTrailResponseRow" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          </sequence>
          <attribute name="totalRows" type="xsd:int" use="required"/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="createServicePointsRequest">
        <complexType>
          <sequence>
            <element name="servicePoints" type="policynet:ServicePoints" minOccurs="1" maxOccurs="1"/>
          </sequence>
          <attribute name="deviceType" type="policynet:DeviceType" use="optional"/>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="createServicePointsResponse">
        <complexType>
          <sequence>
            <element name="boundDevices" type="policynet:BoundDevice" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
            <element name="error" type="policynet:createServicePointsError" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          </sequence>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="updateServicePointsRequest">
        <complexType>
          <sequence>
            <element name="servicePoints" type="policynet:ServicePoints" minOccurs="1" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="updateServicePointsResponse">
        <complexType>
          <sequence>
            <element name="error" type="policynet:createServicePointsError" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          </sequence>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="deleteServicePointRequest">
        <complexType>
          <sequence/>
          <attribute name="servicePointId" type="policynet:ServicePointId" use="required"/>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="deleteServicePointResponse">
        <complexType>
          <sequence/>
          <attribute name="userId" type="xsd:positiveInteger" use="required"/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="removeServicePointFromDeviceRequest">
        <complexType>
          <sequence>
            <element name="servicePointIds" type="xsd:string" minOccurs="1" maxOccurs="unbounded"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="removeServicePointFromDeviceResponse">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="updateDeviceServicePointRequest">
        <complexType>
          <sequence>
            <element name="deviceServicePoint" type="policynet:DeviceServicePoint" minOccurs="1" maxOccurs="unbounded" nillable="false"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="updateDeviceServicePointResponse">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="updateDeviceOperationalStateRequest">
        <complexType>
          <sequence>
            <element name="operationalState" type="policynet:DeviceOperationalState" minOccurs="1" maxOccurs="unbounded"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="updateDeviceOperationalStateResponse">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="updateWaterMeterOperationalStateRequest">
        <complexType>
          <sequence>
            <element name="operationalState" type="policynet:WaterMeterOperationalState" minOccurs="1" maxOccurs="unbounded"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="updateWaterMeterOperationalStateResponse">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="searchServicePointRequest">
        <complexType>
          <sequence>
            <element name="searchFilter" type="policynet:searchServicePointRequestFilter" minOccurs="1" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="searchServicePointResponse">
        <complexType>
          <sequence>
            <element name="servicePoint" type="policynet:ServicePoint" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          </sequence>
          <attribute name="totalRows" type="xsd:int" use="required"/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="searchServicePointHistoryRequest">
        <complexType>
          <sequence>
            <element name="deviceId" type="policynet:UtilitySerialNumber" minOccurs="1" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="searchServicePointHistoryResponse">
        <complexType>
          <sequence>
            <element name="servicePoint" type="policynet:ServicePoint" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          </sequence>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="createRoleRequest">
        <complexType>
          <sequence>
            <element name="role" type="policynet:Role" minOccurs="1" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="createRoleResponse">
        <complexType>
          <sequence/>
          <attribute name="roleId" type="xsd:positiveInteger" use="required"/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="updateRoleRequest">
        <complexType>
          <sequence>
            <element name="role" type="policynet:Role" minOccurs="1" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="updateRoleResponse">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="deleteRoleRequest">
        <complexType>
          <sequence>
            <element name="roleId" type="xsd:positiveInteger" minOccurs="1" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="deleteRoleResponse">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="createWimaxReportRequest">
        <complexType>
          <sequence>
            <element name="params" type="policynet:reportParams" minOccurs="1" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="createWimaxReportResponse">
        <complexType>
          <sequence>
            <element name="report" type="policynet:WimaxStats" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          </sequence>
          <attribute name="totalRows" type="xsd:int" use="required"/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="searchManufacturingStatusRequest">
        <complexType>
          <sequence>
            <element name="searchFilter" type="policynet:searchManufacturingStatusFilter" minOccurs="1" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="searchManufacturingStatusResponse">
        <complexType>
          <sequence>
            <element name="status" type="policynet:MfgStatus" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          </sequence>
          <attribute name="totalRows" type="xsd:int" use="required"/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="omsDeviceStatusRequest">
        <complexType>
          <sequence>
            <element name="devices" type="policynet:Devices" minOccurs="1" maxOccurs="1"/>
            <element name="omsRequestType" type="policynet:omsRequestType" minOccurs="0" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="omsDeviceStatusResponse">
        <complexType>
          <sequence>
            <element name="devices" type="policynet:omsDeviceList" minOccurs="1" maxOccurs="1"/>
            <element name="dispatcherDemand" type="xsd:boolean" minOccurs="0" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="searchTopicsRequest">
        <complexType>
          <sequence>
            <element name="searchFilter" type="policynet:TopicSearchFilter" minOccurs="0" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="searchTopicsResponse">
        <complexType>
          <sequence>
            <element name="topic" type="policynet:searchTopicsResponseRow" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          </sequence>
          <attribute name="totalRows" type="xsd:int" use="required"/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="searchConsumersRequest">
        <complexType>
          <sequence>
            <element name="searchFilter" type="policynet:searchConsumersFilter" minOccurs="0" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="searchConsumersResponse">
        <complexType>
          <sequence>
            <element name="consumer" type="policynet:Consumer" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          </sequence>
          <attribute name="totalRows" type="xsd:int" use="required"/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="subscribeTopicRequest">
        <complexType>
          <sequence>
            <element name="client" type="policynet:SubscriptionConsumer" minOccurs="1" maxOccurs="1"/>
            <element name="topic" type="policynet:SubscriptionTopic" minOccurs="1" maxOccurs="1"/>
          </sequence>
          <attribute name="publishInterval" type="xsd:positiveInteger" use="optional"/>
          <attribute name="batchSize" type="xsd:positiveInteger" use="optional"/>
          <attribute name="excludeSubMeters" type="xsd:boolean" use="optional"/>
          <attribute name="excludePlannedOutages" type="xsd:boolean" use="optional"/>
          <attribute name="excludeDiscoveredMeterOutages" type="xsd:boolean" use="optional"/>
          <attribute name="includeHeaderRow" type="xsd:boolean" use="optional"/>
          <attribute name="ccbFormat" type="xsd:boolean" use="optional"/>
          <attribute name="reportBeginTime" type="policynet:deviceLocalTime" use="optional"/>
          <attribute name="reportEndTime" type="policynet:deviceLocalTime" use="optional"/>
          <attribute name="dayOfMonth" type="policynet:DayOfMonth" use="optional"/>
          <attribute name="timeOfDay" type="policynet:HourMinuteTime" use="optional"/>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="subscribeTopicResponse">
        <complexType>
          <sequence/>
          <attribute name="mrid" type="policynet:Mrid" use="optional"/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="unsubscribeTopicRequest">
        <complexType>
          <sequence>
            <element name="topic" type="policynet:SubscriptionTopic" minOccurs="1" maxOccurs="1"/>
          </sequence>
          <attribute name="consumerId" type="xsd:int" use="required"/>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="unsubscribeTopicResponse">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="uploadNwkTopologyRequest">
        <complexType>
          <sequence>
            <element name="networkTopology" type="xsd:string" minOccurs="1" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="uploadNwkTopologyResponse">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="consumeCommEvent">
        <complexType>
          <sequence>
            <element name="commEvent" type="policynet:commEvent" minOccurs="1" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="consumeCommEventResponse">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="createProvisioningCryptoKeyRequest">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="createProvisioningCryptoKeyResponse">
        <complexType>
          <sequence>
            <element name="cert" type="xsd:string" minOccurs="0" maxOccurs="1" nillable="true"/>
          </sequence>
          <attribute name="subject" type="xsd:string" use="optional"/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="getProvisioningCryptoKeyRequest">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="getProvisioningCryptoKeyResponse">
        <complexType>
          <sequence/>
          <attribute name="cert" type="xsd:string" use="optional"/>
          <attribute name="subject" type="xsd:string" use="optional"/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="createMfgCustomerRequest">
        <complexType>
          <sequence>
            <element name="customer" type="policynet:MfgCustomer" minOccurs="1" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="createMfgCustomerResponse">
        <complexType>
          <sequence/>
          <attribute name="customerId" type="xsd:positiveInteger" use="optional"/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="updateMfgCustomerRequest">
        <complexType>
          <sequence>
            <element name="customer" type="policynet:MfgCustomer" minOccurs="1" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="updateMfgCustomerResponse">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="deleteMfgCustomerRequest">
        <complexType>
          <sequence/>
          <attribute name="customerId" type="xsd:int" use="required"/>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="deleteMfgCustomerResponse">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="searchMfgCustomerRequest">
        <complexType>
          <sequence>
            <element name="searchFilter" type="policynet:MfgCustomerSearchFilter" minOccurs="1" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="searchMfgCustomerResponse">
        <complexType>
          <sequence>
            <element name="customers" type="policynet:MfgCustomer" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          </sequence>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="createMfgProductRequest">
        <complexType>
          <sequence>
            <element name="product" type="policynet:MfgProduct" minOccurs="1" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="createMfgProductResponse">
        <complexType>
          <sequence/>
          <attribute name="productId" type="xsd:int" use="optional"/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="updateMfgProductRequest">
        <complexType>
          <sequence>
            <element name="product" type="policynet:MfgProduct" minOccurs="1" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="updateMfgProductResponse">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="deleteMfgProductRequest">
        <complexType>
          <sequence/>
          <attribute name="productId" type="xsd:int" use="required"/>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="deleteMfgProductResponse">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="searchMfgProductRequest">
        <complexType>
          <sequence>
            <element name="searchFilter" type="policynet:MfgProductSearchFilter" minOccurs="1" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="searchMfgProductResponse">
        <complexType>
          <sequence>
            <element name="products" type="policynet:MfgProduct" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          </sequence>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="startMfgProductLineRequest">
        <complexType>
          <sequence/>
          <attribute name="productId" type="xsd:positiveInteger" use="required"/>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="startMfgProductLineResponse">
        <complexType>
          <sequence/>
          <attribute name="productionRunId" type="xsd:positiveInteger" use="optional"/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="stopMfgProductLineRequest">
        <complexType>
          <sequence/>
          <attribute name="productId" type="xsd:positiveInteger" use="required"/>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="stopMfgProductLineResponse">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="createMfgShipFileRequest">
        <complexType>
          <sequence>
            <element name="shipFile" type="policynet:MfgShipFile" minOccurs="1" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="createMfgShipFileResponse">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="searchMfgShipFileRequest">
        <complexType>
          <sequence>
            <element name="searchFilter" type="policynet:MfgShipFileSearchFilter" minOccurs="1" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="searchMfgShipFileResponse">
        <complexType>
          <sequence>
            <element name="files" type="policynet:MfgShipFile" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          </sequence>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="downloadMfgShipFileRequest">
        <complexType>
          <sequence>
            <element name="file" type="policynet:MfgShipFile" minOccurs="1" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="downloadMfgShipFileResponse">
        <complexType>
          <sequence>
            <element name="image" type="policynet:BinaryData" minOccurs="0" maxOccurs="1" nillable="true"/>
          </sequence>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="searchMfgProductionRunRequest">
        <complexType>
          <sequence>
            <element name="searchFilter" type="policynet:MfgProductionRunSearchFilter" minOccurs="1" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="searchMfgProductionRunResponse">
        <complexType>
          <sequence>
            <element name="productionRuns" type="policynet:MfgProductionRun" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          </sequence>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="createNetworkEntryReportRequest">
        <complexType>
          <sequence>
            <element name="params" type="policynet:NetworkEntryReportSearchFilter" minOccurs="1" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="createNetworkEntryReportResponse">
        <complexType>
          <sequence>
            <element name="report" type="policynet:NetworkEntryReportRow" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          </sequence>
          <attribute name="totalRows" type="xsd:int" use="required"/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="createFailedNetworkEntryReportRequest">
        <complexType>
          <sequence>
            <element name="params" type="policynet:failedNetworkReportParams" minOccurs="1" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="createFailedNetworkEntryReportResponse">
        <complexType>
          <sequence>
            <element name="report" type="policynet:FailedNetworkEntryReportItem" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          </sequence>
          <attribute name="totalRows" type="xsd:int" use="required"/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="getEnergyStatusTrendRequest">
        <complexType>
          <sequence>
            <element name="params" type="policynet:TrendReportParams" minOccurs="1" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="getEnergyStatusTrendResponse">
        <complexType>
          <sequence>
            <element name="EnergyStatusTrend" type="policynet:EnergyStatusTrend" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          </sequence>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="getCommStatusTrendRequest">
        <complexType>
          <sequence>
            <element name="params" type="policynet:TrendReportParams" minOccurs="1" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="getCommStatusTrendResponse">
        <complexType>
          <sequence>
            <element name="CommStatusTrend" type="policynet:CommStatusTrend" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          </sequence>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="getDeviceErrorTrendRequest">
        <complexType>
          <sequence>
            <element name="params" type="policynet:TrendReportParams" minOccurs="1" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="getDeviceErrorTrendResponse">
        <complexType>
          <sequence>
            <element name="DeviceErrorTrend" type="policynet:DeviceErrorTrend" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          </sequence>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="getPolicySuccessTrendRequest">
        <complexType>
          <sequence>
            <element name="params" type="policynet:TrendReportParams" minOccurs="1" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="getPolicySuccessTrendResponse">
        <complexType>
          <sequence>
            <element name="PolicySuccessTrend" type="policynet:PolicySuccessTrend" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          </sequence>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="getAllDeviceTrendsRequest">
        <complexType>
          <sequence>
            <element name="params" type="policynet:TrendReportParams" minOccurs="1" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="getAllDeviceTrendsResponse">
        <complexType>
          <sequence>
            <element name="DeviceTrends" type="policynet:DeviceTrends" minOccurs="1" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="getApproversListRequest">
        <complexType>
          <sequence>
            <element name="policyType" type="policynet:DualAuthPolicyType" minOccurs="1" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="getApproversListResponse">
        <complexType>
          <sequence>
            <choice>
              <element name="approvers" type="policynet:Approvers" minOccurs="1" maxOccurs="1" nillable="false"/>
            </choice>
          </sequence>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="requestDeployApprovalRequest">
        <complexType>
          <sequence/>
          <attribute name="policyId" type="xsd:positiveInteger" use="required"/>
          <attribute name="approver" type="xsd:positiveInteger" use="required"/>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="requestDeployApprovalResponse">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="cancelDeployApprovalRequest">
        <complexType>
          <sequence/>
          <attribute name="policyId" type="xsd:positiveInteger" use="required"/>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="cancelDeployApprovalResponse">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="rejectDeployApprovalRequest">
        <complexType>
          <sequence/>
          <attribute name="policyId" type="xsd:positiveInteger" use="required"/>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="rejectDeployApprovalResponse">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="approveDeployRequest">
        <complexType>
          <sequence/>
          <attribute name="policyId" type="xsd:positiveInteger" use="required"/>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="approveDeployResponse">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="deactivatePolicyRequest">
        <complexType>
          <sequence/>
          <attribute name="policyId" type="xsd:positiveInteger" use="required"/>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="deactivatePolicyResponse">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="getDualAuthPoliciesSettingsRequest">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="getDualAuthPoliciesSettingsResponse">
        <complexType>
          <sequence>
            <choice>
              <element name="policies" type="policynet:DualAuthPolicies" minOccurs="1" maxOccurs="1" nillable="false"/>
            </choice>
          </sequence>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="setDualAuthPoliciesSettingsRequest">
        <complexType>
          <sequence>
            <element name="policy" type="policynet:DualAuthPolicy" minOccurs="1" maxOccurs="unbounded" nillable="false"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="setDualAuthPoliciesSettingsResponse">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="createPlannedOutageRequest">
        <complexType>
          <sequence>
            <element name="plannedOutage" type="policynet:PlannedOutage" minOccurs="1" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="createPlannedOutageResponse">
        <complexType>
          <sequence/>
          <attribute name="outageId" type="xsd:positiveInteger" use="required"/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="updatePlannedOutageRequest">
        <complexType>
          <sequence>
            <element name="plannedOutage" type="policynet:PlannedOutage" minOccurs="1" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="updatePlannedOutageResponse">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="deletePlannedOutageRequest">
        <complexType>
          <sequence>
            <element name="outageId" type="xsd:positiveInteger" minOccurs="1" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="deletePlannedOutageResponse">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="searchPlannedOutagesRequest">
        <complexType>
          <sequence>
            <element name="searchFilter" type="policynet:PlannedOutageSearchFilter" minOccurs="0" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="searchPlannedOutagesResponse">
        <complexType>
          <sequence>
            <element name="outage" type="policynet:PlannedOutage" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          </sequence>
          <attribute name="totalRows" type="xsd:int" use="required"/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="addPanLabelRequest">
        <complexType>
          <sequence>
            <element name="labelName" type="policynet:PanLabel" minOccurs="1" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="addPanLabelResponse">
        <complexType>
          <sequence/>
          <attribute name="labelId" type="xsd:positiveInteger" use="required"/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="removeDeviceFromPanRequest">
        <complexType>
          <sequence>
            <element name="params" type="policynet:removeDeviceFromPanParams" minOccurs="1" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="removeDeviceFromPanResponse">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="updatePanLabelRequest">
        <complexType>
          <sequence>
            <element name="labelId" type="xsd:positiveInteger" minOccurs="1" maxOccurs="1"/>
            <element name="labelName" type="policynet:PanLabel" minOccurs="1" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="updatePanLabelResponse">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="deletePanLabelRequest">
        <complexType>
          <sequence>
            <element name="labelId" type="xsd:positiveInteger" minOccurs="1" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="deletePanLabelResponse">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="getPanLabelsRequest">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="getPanLabelsResponse">
        <complexType>
          <sequence>
            <element name="label" type="policynet:PanLabelInfo" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          </sequence>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="getSystemTime">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="getSystemTimeResponse">
        <complexType>
          <sequence/>
          <attribute name="currentTime" type="xsd:dateTime" use="required"/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="setDataRetentionSettings">
        <complexType>
          <sequence>
            <element name="dataRetentionSetting" type="policynet:DataRetentionSetting" minOccurs="1" maxOccurs="unbounded"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="setDataRetentionSettingsResponse">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="getDataRetentionSettings">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="getDataRetentionSettingsResponse">
        <complexType>
          <sequence>
            <element name="dataRetentionSetting" type="policynet:DataRetentionSetting" minOccurs="0" maxOccurs="unbounded"/>
          </sequence>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="setOpstateRestrictionSettingsRequest">
        <complexType>
          <sequence>
            <element name="opstateRestrictionSetting" type="policynet:OpstateRestrictionSetting" minOccurs="1" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="setOpstateRestrictionSettingsResponse">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="getOpstateRestrictionSettingsRequest">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="getOpstateRestrictionSettingsResponse">
        <complexType>
          <sequence>
            <element name="opstateRestrictionSetting" type="policynet:OpstateRestrictionSetting" minOccurs="1" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="setOffPeakDownloadWindowSettingsRequest">
        <complexType>
          <sequence>
            <element name="downloadWindow" type="policynet:OffPeakDownloadWindow" minOccurs="0" maxOccurs="1" nillable="true"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="setOffPeakDownloadWindowSettingsResponse">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="getOffPeakDownloadWindowSettingsRequest">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="getOffPeakDownloadWindowSettingsResponse">
        <complexType>
          <sequence>
            <element name="downloadWindow" type="policynet:OffPeakDownloadWindow" minOccurs="0" maxOccurs="1" nillable="true"/>
          </sequence>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="getDailyReportingTimezoneSettingRequest">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="getDailyReportingTimezoneSettingResponse">
        <complexType>
          <sequence>
            <choice>
              <element name="timezone" type="policynet:TimeZone" minOccurs="1" maxOccurs="1"/>
            </choice>
          </sequence>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="setDailyReportingTimezoneSettingRequest">
        <complexType>
          <sequence/>
          <attribute name="timezone" type="policynet:TimeZone" use="required"/>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="setDailyReportingTimezoneSettingResponse">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="getDemandDataStreamSettingsRequest">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="getDemandDataStreamSettingsResponse">
        <complexType>
          <sequence>
            <choice>
              <element name="demandStreamMaxValidityWindow" type="policynet:DemandDataStreamValidityWindow" minOccurs="1" maxOccurs="1" nillable="false">
                <annotation>
                  <documentation>The demandStreamMaxValidityWindow is used to validate the demand data stream policy validity window in minutes.</documentation>
                </annotation>
              </element>
            </choice>
          </sequence>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="setDemandDataStreamSettingsRequest">
        <complexType>
          <sequence/>
          <attribute name="demandStreamMaxValidityWindow" type="policynet:DemandDataStreamValidityWindow" use="required">
            <annotation>
              <documentation>The demandStreamMaxValidityWindow is used to validate the demand data stream policy validity window in minutes.</documentation>
            </annotation>
          </attribute>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="setDemandDataStreamSettingsResponse">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="getLdapAuthenticationSettingsRequest">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="getLdapAuthenticationSettingsResponse">
        <complexType>
          <sequence>
            <element name="settings" type="policynet:LdapAuthenticationSettings" minOccurs="0" maxOccurs="1" nillable="true"/>
          </sequence>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="setLdapAuthenticationSettingsRequest">
        <complexType>
          <sequence>
            <element name="settings" type="policynet:LdapAuthenticationSettings" minOccurs="1" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="setLdapAuthenticationSettingsResponse">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="generateSoapFaultRequest">
        <complexType>
          <sequence>
            <element name="faultDetails" type="policynet:ExceptionType" minOccurs="1" maxOccurs="1"/>
          </sequence>
          <attribute name="soapFaultCode" type="policynet:SoapFaultCode" use="required"/>
          <attribute name="reason" type="xsd:string" use="required"/>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="emptyResponse">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="overrideDredControlRequest">
        <complexType>
          <sequence>
            <element name="participant" type="policynet:DrlcParticipant" minOccurs="1" maxOccurs="unbounded" nillable="false"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="overrideDredControlResponse">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="searchDredsRequest">
        <complexType>
          <sequence>
            <element name="searchFilter" type="policynet:DredSearchFilter" minOccurs="1" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="searchDredsResponse">
        <complexType>
          <sequence>
            <element name="dred" type="policynet:DredStatusReportRow" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          </sequence>
          <attribute name="totalRows" type="xsd:int" use="required"/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="getDredLoadShedDataRequest">
        <complexType>
          <sequence>
            <element name="params" type="policynet:getDredLoadShedDataParams" minOccurs="1" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="getDredLoadShedDataResponse">
        <complexType>
          <sequence>
            <element name="loadShedPoints" type="policynet:LoadShedPoints" minOccurs="1" maxOccurs="1"/>
            <element name="demandPoints" type="policynet:DemandPoints" minOccurs="1" maxOccurs="1"/>
          </sequence>
          <attribute name="dredFailedToShedCount" type="xsd:positiveInteger" use="required"/>
          <attribute name="totalLoadShed" type="xsd:decimal" use="required"/>
          <attribute name="peakLoadShed" type="xsd:decimal" use="required"/>
          <attribute name="maxDemand" type="xsd:decimal" use="required">
            <annotation>
              <documentation>Maximum peak demand (kW)</documentation>
            </annotation>
          </attribute>
          <attribute name="targetReportingPercent" type="policynet:percentValue" use="required"/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="getCardSwapSettingRequest">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="getCardSwapSettingResponse">
        <complexType>
          <sequence/>
          <attribute name="restriction" type="policynet:cardSwapRestriction" use="required"/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="setCardSwapSettingRequest">
        <complexType>
          <sequence>
            <element name="restriction" type="policynet:cardSwapRestriction" minOccurs="1" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="setCardSwapSettingResponse">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="getRetailersRequest">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="getRetailersResponse">
        <complexType>
          <sequence>
            <element name="retailer" type="policynet:RetailerInfo" minOccurs="0" maxOccurs="unbounded"/>
          </sequence>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="addRetailerRequest">
        <complexType>
          <sequence/>
          <attribute name="retailerUserId" type="policynet:RetailerUserId" use="required"/>
          <attribute name="retailerName" type="policynet:RetailerName" use="required"/>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="addRetailerResponse">
        <complexType>
          <sequence/>
          <attribute name="retailerId" type="xsd:positiveInteger" use="required"/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="updateRetailerRequest">
        <complexType>
          <sequence/>
          <attribute name="retailerId" type="xsd:positiveInteger" use="required"/>
          <attribute name="retailerUserId" type="policynet:RetailerUserId" use="required"/>
          <attribute name="retailerName" type="policynet:RetailerName" use="required"/>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="updateRetailerResponse">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="deleteRetailerRequest">
        <complexType>
          <sequence/>
          <attribute name="retailerId" type="xsd:positiveInteger" use="required"/>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="deleteRetailerResponse">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="getDistributorsRequest">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="getDistributorsResponse">
        <complexType>
          <sequence>
            <element name="distributor" type="policynet:DistributorInfo" minOccurs="0" maxOccurs="unbounded"/>
          </sequence>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="addDistributorRequest">
        <complexType>
          <sequence/>
          <attribute name="distributorUserId" type="policynet:DistributorUserId" use="required"/>
          <attribute name="distributorName" type="policynet:DistributorName" use="required"/>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="addDistributorResponse">
        <complexType>
          <sequence/>
          <attribute name="distributorId" type="xsd:positiveInteger" use="required"/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="updateDistributorRequest">
        <complexType>
          <sequence/>
          <attribute name="distributorId" type="xsd:positiveInteger" use="required"/>
          <attribute name="distributorUserId" type="policynet:DistributorUserId" use="required"/>
          <attribute name="distributorName" type="policynet:DistributorName" use="required"/>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="updateDistributorResponse">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="deleteDistributorRequest">
        <complexType>
          <sequence/>
          <attribute name="distributorId" type="xsd:positiveInteger" use="required"/>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="deleteDistributorResponse">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="refreshDeviceStatusRequest">
        <complexType>
          <sequence/>
          <attribute name="utilitySerialNumber" type="policynet:UtilitySerialNumber" use="required"/>
          <attribute name="customerId" type="xsd:positiveInteger" use="optional"/>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="refreshDeviceStatusResponse">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="purgeDeviceRequest">
        <complexType>
          <sequence>
            <element name="utilitySerialNumber" type="policynet:UtilitySerialNumber" minOccurs="0" maxOccurs="unbounded"/>
          </sequence>
          <attribute name="purgeDataOnly" type="xsd:boolean" use="required"/>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="purgeDeviceResponse">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="createBaseStationsRequest">
        <complexType>
          <sequence>
            <element name="baseStation" type="policynet:BaseStation" minOccurs="1" maxOccurs="unbounded" nillable="false"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="createBaseStationsResponse">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="searchCustomEventTopicsRequest">
        <complexType>
          <sequence>
            <element name="searchFilter" type="policynet:CustomEventSearchFilter" minOccurs="0" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="SearchCustomEventTopicsResponse">
        <complexType>
          <sequence>
            <element name="topics" type="policynet:CustomEventTopicSearchRecord" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          </sequence>
          <attribute name="totalRows" type="xsd:int" use="required"/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="createCustomEventTopicRequest">
        <complexType>
          <sequence>
            <element name="topic" type="policynet:CustomEventTopicRecord" minOccurs="1" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="createCustomEventTopicResponse">
        <complexType>
          <sequence/>
          <attribute name="topicId" type="xsd:positiveInteger" use="required"/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="deleteCustomEventTopicRequest">
        <complexType>
          <sequence/>
          <attribute name="topicId" type="xsd:int" use="required"/>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="deleteCustomEventTopicResponse">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="searchSlaRequest">
        <complexType>
          <sequence>
            <element name="searchFilter" type="policynet:SlaSearchFilter" minOccurs="0" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="SearchSlaResponse">
        <complexType>
          <sequence>
            <element name="slas" type="policynet:SlaConfigRecord" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          </sequence>
          <attribute name="totalRows" type="xsd:int" use="required"/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="createSlaRequest">
        <complexType>
          <sequence>
            <element name="rec" type="policynet:SlaConfigRecord" minOccurs="1" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="createSlaResponse">
        <complexType>
          <sequence/>
          <attribute name="slaId" type="xsd:positiveInteger" use="required"/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="updateSlaRequest">
        <complexType>
          <sequence>
            <element name="rec" type="policynet:SlaConfigRecord" minOccurs="1" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="updateSlaResponse">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="deleteSlaRequest">
        <complexType>
          <sequence/>
          <attribute name="slaId" type="xsd:int" use="required"/>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="deleteSlaResponse">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="createSlaReportRequest">
        <complexType>
          <sequence>
            <element name="params" type="policynet:SlaReportParams" minOccurs="1" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="createSlaReportResponse">
        <complexType>
          <sequence>
            <element name="slaRecs" type="policynet:SlaRecord" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          </sequence>
          <attribute name="slaId" type="xsd:positiveInteger" use="required"/>
          <attribute name="slaName" type="xsd:string" use="required"/>
          <attribute name="policyId" type="xsd:positiveInteger" use="required"/>
          <attribute name="policyName" type="xsd:string" use="required"/>
          <attribute name="targetCount" type="xsd:positiveInteger" use="required"/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="setOutageProbeSettingsRequest">
        <complexType>
          <sequence>
            <element name="outageProbeSettings" type="policynet:OutageProbeSettings" minOccurs="1" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="setOutageProbeSettingsResponse">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="getOutageProbeSettingsRequest">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="getOutageProbeSettingsResponse">
        <complexType>
          <sequence>
            <element name="outageProbeSettings" type="policynet:OutageProbeSettings" minOccurs="0" maxOccurs="1" nillable="true"/>
          </sequence>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="setDeployOnNextConnectRequest">
        <complexType>
          <sequence/>
          <attribute name="policyId" type="xsd:positiveInteger" use="required"/>
          <attribute name="deployOnNextConnect" type="xsd:boolean" use="required"/>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="setDeployOnNextConnectResponse">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="createCustomerRequest">
        <complexType>
          <sequence>
            <element name="customer" type="policynet:Customer" minOccurs="1" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="createCustomerResponse">
        <complexType>
          <sequence/>
          <attribute name="customerId" type="xsd:positiveInteger" use="required"/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="updateCustomerRequest">
        <complexType>
          <sequence>
            <element name="customer" type="policynet:Customer" minOccurs="1" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="updateCustomerResponse">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="searchCustomersRequest">
        <complexType>
          <sequence>
            <element name="searchFilter" type="policynet:CustomerSearchFilter" minOccurs="0" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="searchCustomersResponse">
        <complexType>
          <sequence>
            <element name="customers" type="policynet:Customer" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          </sequence>
          <attribute name="totalRows" type="xsd:int" use="required"/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="deleteCustomerRequest">
        <complexType>
          <sequence/>
          <attribute name="customerId" type="xsd:positiveInteger" use="required"/>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="deleteCustomerResponse">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="suspendCustomerRequest">
        <complexType>
          <sequence/>
          <attribute name="customerId" type="xsd:positiveInteger" use="required"/>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="suspendCustomerResponse">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="cancelCustomerRequest">
        <complexType>
          <sequence/>
          <attribute name="customerId" type="xsd:positiveInteger" use="required"/>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="cancelCustomerResponse">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="reactivateCustomerRequest">
        <complexType>
          <sequence/>
          <attribute name="customerId" type="xsd:positiveInteger" use="required"/>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="reactivateCustomerResponse">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="getMeterOptionsRequest">
        <complexType>
          <sequence>
            <element name="searchFilter" type="policynet:MeterOptionsSearchFilter" minOccurs="0" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="getMeterOptionsResponse">
        <complexType>
          <sequence>
            <element name="meterOptions" type="policynet:MeterOptions" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          </sequence>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="createMeterOrderRequest">
        <complexType>
          <sequence>
            <element name="meterOrder" type="policynet:MeterOrder" minOccurs="1" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="createMeterOrderResponse">
        <complexType>
          <sequence/>
          <attribute name="orderId" type="xsd:positiveInteger" use="required"/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="searchMeterOrdersRequest">
        <complexType>
          <sequence>
            <element name="searchFilter" type="policynet:MeterOrderSearchFilter" minOccurs="0" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="searchMeterOrdersResponse">
        <complexType>
          <sequence>
            <element name="meterOrders" type="policynet:MeterOrder" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          </sequence>
          <attribute name="totalRows" type="xsd:int" use="required"/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="getStartingMeterIdRequest">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="getStartingMeterIdResponse">
        <complexType>
          <sequence/>
          <attribute name="startingMeterId" type="xsd:positiveInteger" use="required"/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="recalculateSystemReliablityRequest">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="recalculateSystemReliablityResponse">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="createMeterReaderPasswordReportRequest">
        <complexType>
          <sequence>
            <element name="searchFilter" type="policynet:PasswordReportSearchFilter" minOccurs="1" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="resetUserPasswordRequest">
        <complexType>
          <sequence/>
          <attribute name="username" type="policynet:UserName" use="required"/>
          <attribute name="emailAddress" type="xsd:string" use="required"/>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="resetUserPasswordResponse">
        <complexType>
          <sequence/>
          <attribute name="password" type="policynet:Password" use="required"/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="searchConsumerTypesRequest">
        <complexType>
          <sequence>
            <element name="searchFilter" type="policynet:ConsumerTypeSearchFilter" minOccurs="0" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="searchConsumerTypesResponse">
        <complexType>
          <sequence>
            <element name="consumerTypes" type="policynet:ConsumerType" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          </sequence>
          <attribute name="totalRows" type="xsd:int" use="required"/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="searchMeterOrderTemplatesRequest">
        <complexType>
          <sequence>
            <element name="searchFilter" type="policynet:MeterOrderTemplateSearchFilter" minOccurs="0" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="searchMeterOrderTemplatesResponse">
        <complexType>
          <sequence>
            <element name="meterOrderTemplates" type="policynet:MeterOrderTemplate" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          </sequence>
          <attribute name="totalRows" type="xsd:int" use="required"/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="getCustomerDetailsRequest">
        <complexType>
          <sequence>
            <element name="searchFilter" type="policynet:CustomerDetailsSearchFilter" minOccurs="0" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="getCustomerDetailsResponse">
        <complexType>
          <sequence>
            <element name="customers" type="policynet:Customer" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          </sequence>
          <attribute name="totalRows" type="xsd:int" use="required"/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="getSecurityQuestionsRequest">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="GetSecurityQuestionsResponse">
        <complexType>
          <sequence>
            <element name="securityQuestions" type="policynet:SecurityQuestion" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          </sequence>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="verifyUserRequest">
        <complexType>
          <sequence>
            <element name="filter" type="policynet:verifyUserSearchFilter" minOccurs="1" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="verifyUserResponse">
        <complexType>
          <sequence/>
          <attribute name="userId" type="xsd:positiveInteger" use="required"/>
          <attribute name="authString" type="xsd:string" use="required"/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="searchEmailAddressesRequest">
        <complexType>
          <sequence>
            <element name="searchFilter" type="policynet:EmailAddressSearchFilter" minOccurs="0" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="searchEmailAddressesResponse">
        <complexType>
          <sequence>
            <element name="emailAddresses" type="xsd:string" minOccurs="0" maxOccurs="unbounded"/>
          </sequence>
          <attribute name="totalRows" type="xsd:positiveInteger" use="required"/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="searchEmailToSmsAddressesRequest">
        <complexType>
          <sequence>
            <element name="searchFilter" type="policynet:EmailToSmsAddressSearchFilter" minOccurs="0" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="searchEmailToSmsAddressesResponse">
        <complexType>
          <sequence>
            <element name="emailAddresses" type="xsd:string" minOccurs="0" maxOccurs="unbounded"/>
          </sequence>
          <attribute name="totalRows" type="xsd:positiveInteger" use="required"/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="enableUserNotificationsRequest">
        <complexType>
          <sequence/>
          <attribute name="userId" type="xsd:positiveInteger" use="optional"/>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="enableUserNotificationsResponse">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="disableUserNotificationsRequest">
        <complexType>
          <sequence/>
          <attribute name="userId" type="xsd:positiveInteger" use="optional"/>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="disableUserNotificationsResponse">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="updateConsumerRequest">
        <complexType>
          <sequence>
            <element name="consumer" type="policynet:Consumer" minOccurs="1" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="updateConsumerResponse">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="deleteConsumerRequest">
        <complexType>
          <sequence/>
          <attribute name="consumerId" type="xsd:positiveInteger" use="required"/>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="deleteConsumerResponse">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="createWaterMeterStatsReportRequest">
        <complexType>
          <sequence>
            <element name="params" type="policynet:reportParams" minOccurs="1" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="createWaterMeterStatsReportResponse">
        <complexType>
          <sequence>
            <element name="results" type="policynet:WaterMeterStatsRow" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          </sequence>
          <attribute name="totalRows" type="xsd:positiveInteger" use="required"/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="createGasMeterStatsReportRequest">
        <complexType>
          <sequence>
            <element name="params" type="policynet:reportParams" minOccurs="1" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="createGasMeterStatsReportResponse">
        <complexType>
          <sequence>
            <element name="results" type="policynet:WaterMeterStatsRow" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          </sequence>
          <attribute name="totalRows" type="xsd:positiveInteger" use="required"/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="createWaterMeterAlertsReportRequest">
        <complexType>
          <sequence>
            <element name="searchFilter" type="policynet:WaterMeterAlertsSearchFilter" minOccurs="0" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="createWaterMeterAlertsReportResponse">
        <complexType>
          <sequence>
            <element name="results" type="policynet:WaterMeterAlertsRow" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          </sequence>
          <attribute name="totalRows" type="xsd:positiveInteger" use="required"/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="getAverageCoordinatesRequest">
        <complexType>
          <sequence>
            <element name="searchFilter" type="policynet:AverageCoordinatesSearchFilter" minOccurs="0" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="getAverageCoordinatesResponse">
        <complexType>
          <sequence>
            <element name="coordinates" type="policynet:Coordinates" minOccurs="1" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="migrateSmccsRequest">
        <complexType>
          <sequence>
            <element name="smccRecords" type="policynet:SmccRecord" minOccurs="1" maxOccurs="unbounded" nillable="false"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="migrateSmccsResponse">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="searchMeterTypesRequest">
        <complexType>
          <sequence>
            <element name="searchFilter" type="policynet:MeterTypeSearchFilter" minOccurs="0" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="searchMeterTypesResponse">
        <complexType>
          <sequence>
            <element name="meterTypes" type="policynet:MeterTypeModel" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          </sequence>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="searchMapSubstationsRequest">
        <complexType>
          <sequence>
            <element name="searchFilter" type="policynet:MapViewerFilter" minOccurs="0" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="searchMapSubstationsResponse">
        <complexType>
          <sequence>
            <element name="substations" type="policynet:Substation" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          </sequence>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="searchMapDevicesRequest">
        <complexType>
          <sequence>
            <element name="searchFilter" type="policynet:MapViewerFilter" minOccurs="0" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="searchMapDevicesResponse">
        <complexType>
          <sequence>
            <element name="timeSlices" type="policynet:MapTimeSlice" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          </sequence>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="getMapFiltersRequest">
        <complexType>
          <sequence>
            <element name="searchFilter" type="policynet:MapViewerFilter" minOccurs="0" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="getMapFiltersResponse">
        <complexType>
          <sequence>
            <element name="groups" type="policynet:IdNamePair" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
            <element name="events" type="policynet:EventRecord" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
            <element name="customerTypes" type="policynet:IdNamePair" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
            <element name="customerSizes" type="policynet:IdNamePair" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
            <element name="billingCycles" type="policynet:IdNamePair" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
            <element name="roles" type="policynet:IdNamePair" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          </sequence>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="getBandSettingsRequest">
        <complexType>
          <sequence>
            <element name="searchFilter" type="policynet:BandSettingsFilter" minOccurs="0" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="getBandSettingsResponse">
        <complexType>
          <sequence>
            <element name="bands" type="policynet:Band" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          </sequence>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="setBandSettingsRequest">
        <complexType>
          <sequence>
            <element name="bands" type="policynet:Band" minOccurs="1" maxOccurs="unbounded" nillable="false"/>
          </sequence>
          <attribute name="bandType" type="policynet:BandType" use="required"/>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="setBandSettingsResponse">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="searchMapWaterDistrictsRequest">
        <complexType>
          <sequence>
            <element name="searchFilter" type="policynet:MapViewerFilter" minOccurs="0" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="searchMapWaterDistrictsResponse">
        <complexType>
          <sequence>
            <element name="waterDistricts" type="policynet:WaterDistrict" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          </sequence>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="createMapEventReportRequest">
        <complexType>
          <sequence>
            <element name="searchFilter" type="policynet:MapViewerFilter" minOccurs="0" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="createMapEventReportResponse">
        <complexType>
          <sequence>
            <element name="timeSlices" type="policynet:MapTimeSlice" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          </sequence>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="createMapWaterReadReportRequest">
        <complexType>
          <sequence>
            <element name="searchFilter" type="policynet:MapViewerFilter" minOccurs="0" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="createMapWaterReadReportResponse">
        <complexType>
          <sequence>
            <element name="timeSlices" type="policynet:MapTimeSlice" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          </sequence>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="createHanDevicesRequest">
        <complexType>
          <sequence>
            <element name="hanDevices" type="policynet:HanDevice" minOccurs="1" maxOccurs="unbounded" nillable="false"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="createHanDevicesResponse">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="getUserInfoRequest">
        <complexType>
          <sequence>
            <element name="searchFilter" type="policynet:UserInfoSearchFilter" minOccurs="0" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="getUserInfoResponse">
        <complexType>
          <sequence>
            <element name="userInfo" type="policynet:UserInfo" minOccurs="1" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="getPolicyBillingCycleDates">
        <complexType>
          <sequence>
            <element name="policyId" type="xsd:positiveInteger" minOccurs="1" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="BillingCycleCalendar">
        <complexType>
          <sequence>
            <element name="dates" type="policynet:BillingCycleDate" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          </sequence>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="updateDeviceRequest">
        <complexType>
          <sequence>
            <element name="device" type="policynet:DeviceUpdate" minOccurs="1" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="updateDeviceResponse">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="searchMeterCommsTypesRequest">
        <complexType>
          <sequence>
            <element name="searchFilter" type="policynet:MeterCommsTypeSearchFilter" minOccurs="0" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="searchMeterCommsTypesResponse">
        <complexType>
          <sequence>
            <element name="meterCommsTypes" type="policynet:MeterCommsType" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          </sequence>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="searchMeterSubscriptionsRequest">
        <complexType>
          <sequence>
            <element name="searchFilter" type="policynet:MeterSubscriptionsSearchFilter" minOccurs="0" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="searchMeterSubscriptionsResponse">
        <complexType>
          <sequence>
            <element name="meterSubscriptions" type="policynet:MeterSubscription" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          </sequence>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="createMeterSubscriptionRequest">
        <complexType>
          <sequence>
            <element name="MeterSubscription" type="policynet:MeterSubscription" minOccurs="1" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="createMeterSubscriptionResponse">
        <complexType>
          <sequence/>
          <attribute name="meterSubscriptionId" type="xsd:positiveInteger" use="required"/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="searchVendorsRequest">
        <complexType>
          <sequence>
            <element name="searchFilter" type="policynet:VendorSearchFilter" minOccurs="0" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="searchVendorsResponse">
        <complexType>
          <sequence>
            <element name="vendors" type="policynet:Vendor" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          </sequence>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="getProvisioningDefaultsRequest">
        <complexType>
          <sequence>
            <element name="searchFilter" type="policynet:ProvisioningDefaultsSearchFilter" minOccurs="0" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="getProvisioningDefaultsResponse">
        <complexType>
          <sequence>
            <element name="provisioningDefaults" type="policynet:provisioningDefaults" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          </sequence>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="setProvisioningDefaultsRequest">
        <complexType>
          <sequence>
            <element name="provisioningDefaults" type="policynet:provisioningDefaults" minOccurs="1" maxOccurs="unbounded" nillable="false"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="setProvisioningDefaultsResponse">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="getAECredentialsRequest">
        <complexType>
          <sequence>
            <element name="searchFilter" type="policynet:AECredentialsSearchFilter" minOccurs="0" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="getAECredentialsResponse">
        <complexType>
          <sequence>
            <element name="aeCredential" type="policynet:AECredential" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          </sequence>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="setAECredentialsRequest">
        <complexType>
          <sequence>
            <element name="aeCredential" type="policynet:AECredential" minOccurs="1" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="setAECredentialsResponse">
        <complexType>
          <sequence>
            <element name="credentialId" type="xsd:string" minOccurs="1" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="getExportColumnsRequest">
        <complexType>
          <sequence>
            <element name="searchFilter" type="policynet:ExportColumnsSearchFilter" minOccurs="0" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="getExportColumnsResponse">
        <complexType>
          <sequence>
            <element name="commonColumns" type="policynet:ExportColumn" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
            <element name="allColumns" type="policynet:ExportColumn" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          </sequence>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="searchDataExportTargetsRequest">
        <complexType>
          <sequence>
            <element name="searchFilter" type="policynet:DataExportTargetSearchFilter" minOccurs="1" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="searchDataExportTargetsResponse">
        <complexType>
          <sequence>
            <element name="group" type="policynet:DataExportGroup" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
            <element name="device" type="policynet:DataExportDevice" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          </sequence>
          <attribute name="totalRows" type="xsd:positiveInteger" use="required"/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="searchDataExportTopicsRequest">
        <complexType>
          <sequence>
            <element name="searchFilter" type="policynet:DataExportTopicSearchFilter" minOccurs="0" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="SearchDataExportTopicsResponse">
        <complexType>
          <sequence>
            <element name="topics" type="policynet:DataExportTopic" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          </sequence>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="createDataExportTopicRequest">
        <complexType>
          <sequence>
            <element name="topic" type="policynet:DataExportTopic" minOccurs="1" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="createDataExportTopicResponse">
        <complexType>
          <sequence/>
          <attribute name="topicId" type="xsd:positiveInteger" use="required"/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="deleteDataExportTopicRequest">
        <complexType>
          <sequence/>
          <attribute name="topicId" type="xsd:int" use="required"/>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="deleteDataExportTopicResponse">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="createDataExportReportRequest">
        <complexType>
          <sequence>
            <element name="params" type="policynet:ExportParams" minOccurs="1" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="createDataExportReportResponse">
        <complexType>
          <sequence>
            <element name="exportLines" type="xsd:string" minOccurs="0" maxOccurs="unbounded"/>
          </sequence>
          <attribute name="totalRows" type="xsd:int" use="required"/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="swapServicePointsRequest">
        <complexType>
          <sequence>
            <element name="meterExchange" type="policynet:MeterExchange" minOccurs="1" maxOccurs="unbounded"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="swapServicePointsResponse">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="assignVendorRequest">
        <complexType>
          <sequence/>
          <attribute name="vendorId" type="xsd:int" use="required"/>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="assignVendorResponse">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="getMmcInfoRequest">
        <complexType>
          <sequence/>
          <attribute name="utilitySerialNumber" type="policynet:UtilitySerialNumber" use="required"/>
          <attribute name="customerId" type="xsd:positiveInteger" use="optional"/>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="getMmcInfoResponse">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="getAuthConfigRequest">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="getAuthConfigResponse">
        <complexType>
          <sequence>
            <element name="config" type="policynet:AuthConfig" minOccurs="1" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="setAuthConfigRequest">
        <complexType>
          <sequence>
            <element name="config" type="policynet:AuthConfig" minOccurs="1" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="setAuthConfigResponse">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="enableUserMultifactorAuthRequest">
        <complexType>
          <sequence>
            <element name="userId" type="xsd:positiveInteger" minOccurs="1" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="enableUserMultifactorAuthResponse">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="disableUserMultifactorAuthRequest">
        <complexType>
          <sequence>
            <element name="userId" type="xsd:positiveInteger" minOccurs="1" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="disableUserMultifactorAuthResponse">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="createDemandReadReportRequest">
        <complexType>
          <sequence>
            <element name="params" type="policynet:reportParams" minOccurs="1" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="createDemandReadReportResponse">
        <complexType>
          <sequence>
            <element name="reading" type="policynet:DemandReading" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          </sequence>
          <attribute name="totalRows" type="xsd:int" use="required"/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="searchDevicesMspRequest">
        <complexType>
          <sequence>
            <element name="searchFilter" type="policynet:DeviceSearchFilter" minOccurs="0" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="searchDevicesMspResponse">
        <complexType>
          <sequence>
            <element name="devices" type="policynet:SgDevices" minOccurs="0" maxOccurs="1" nillable="true"/>
          </sequence>
          <attribute name="totalRows" type="xsd:int" use="required"/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="searchTransportTypesRequest">
        <complexType>
          <sequence>
            <element name="searchFilter" type="policynet:TransportTypeSearchFilter" minOccurs="0" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="searchTransportTypesResponse">
        <complexType>
          <sequence>
            <element name="transportTypes" type="policynet:TransportType" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          </sequence>
          <attribute name="totalRows" type="xsd:int" use="required"/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="getUserEventsRequest">
        <complexType>
          <sequence/>
          <attribute name="customerId" type="xsd:positiveInteger" use="optional"/>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="getUserEventsResponse">
        <complexType>
          <sequence>
            <element name="event" type="policynet:EventRecord" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          </sequence>
          <attribute name="totalRows" type="xsd:int" use="required"/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="searchConsumerKeysRequest">
        <complexType>
          <sequence>
            <element name="searchFilter" type="policnet:ConsumerKeySearchFilter" minOccurs="0" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="searchConsumerKeysResponse">
        <complexType>
          <sequence>
            <element name="consumerKey" type="policnet:ConsumerKey" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          </sequence>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="createScmDailyReportRequest">
        <complexType>
          <sequence>
            <element name="searchFilter" type="policynet:ScmReportSearchFilter" minOccurs="0" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="createScmDailyReportResponse">
        <complexType>
          <sequence>
            <element name="totalRows" type="xsd:int" minOccurs="1" maxOccurs="1"/>
            <element name="report" type="policynet:ScmDailyReportRow" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          </sequence>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="createScmCycleReportRequest">
        <complexType>
          <sequence>
            <element name="searchFilter" type="policynet:ScmReportSearchFilter" minOccurs="0" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="createScmCycleReportResponse">
        <complexType>
          <sequence>
            <element name="totalRows" type="xsd:int" minOccurs="1" maxOccurs="1"/>
            <element name="report" type="policynet:ScmCycleReportRow" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          </sequence>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="createScmTransactionReportRequest">
        <complexType>
          <sequence>
            <element name="searchFilter" type="policynet:ScmReportSearchFilter" minOccurs="0" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="createScmTransactionReportResponse">
        <complexType>
          <sequence>
            <element name="totalRows" type="xsd:int" minOccurs="1" maxOccurs="1"/>
            <element name="report" type="policynet:ScmTransactionReportRow" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          </sequence>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="createAosShipfileRequest">
        <complexType>
          <sequence>
            <element name="aosShipfileRecord" type="policynet:AosShipfileRecord" minOccurs="1" maxOccurs="unbounded" nillable="false"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="createAosShipfileResponse">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="createBlinkReportRequest">
        <complexType>
          <sequence>
            <element name="params" type="policynet:reportParams" minOccurs="1" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="createBlinkReportResponse">
        <complexType>
          <sequence>
            <element name="report" type="policynet:BlinkReportRow" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          </sequence>
          <attribute name="totalRows" type="xsd:int" use="required"/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="createScmLicenseReportRequest">
        <complexType>
          <sequence>
            <element name="params" type="policynet:scmReportParams" minOccurs="1" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="createScmLicenseReportResponse">
        <complexType>
          <sequence>
            <element name="report" type="policynet:ScmLicenseReportRow" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          </sequence>
          <attribute name="totalRows" type="xsd:int" use="required"/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="createScmYearlyReportRequest">
        <complexType>
          <sequence>
            <element name="params" type="policynet:reportParams" minOccurs="1" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="createScmYearlyReportResponse">
        <complexType>
          <sequence>
            <element name="report" type="policynet:ScmYearlyReportRow" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          </sequence>
          <attribute name="totalRows" type="xsd:int" use="required"/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="createScmMonthlyReportRequest">
        <complexType>
          <sequence>
            <element name="params" type="policynet:reportParams" minOccurs="1" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="createScmMonthlyReportResponse">
        <complexType>
          <sequence>
            <element name="report" type="policynet:ScmMonthlyReportRow" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          </sequence>
          <attribute name="totalRows" type="xsd:int" use="required"/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="createAclaraMarriageFileRequest">
        <complexType>
          <sequence>
            <element name="aclaraFileRecord" type="policynet:AclaraMarriageFileRecord" minOccurs="1" maxOccurs="unbounded" nillable="false"/>
          </sequence>
          <attribute name="fileName" type="xsd:string" use="optional"/>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="createAclaraMarriageFileResponse">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="createScmTransactionHistoryReportRequest">
        <complexType>
          <sequence>
            <element name="params" type="policynet:scmReportParams" minOccurs="1" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="createScmTransactionHistoryReportResponse">
        <complexType>
          <sequence>
            <element name="report" type="policynet:ScmTransactionHistoryReportRow" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          </sequence>
          <attribute name="totalRows" type="xsd:int" use="required"/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="searchApplicationPackagesRequest">
        <complexType>
          <sequence>
            <element name="searchFilter" type="policynet:ApplicationPackagesSearchFilter" minOccurs="0" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="searchApplicationPackagesResponse">
        <complexType>
          <sequence>
            <element name="packages" type="policynet:ApplicationPackage" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
          </sequence>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="deleteApplicationPackageRequest">
        <complexType>
          <sequence/>
          <attribute name="packageId" type="xsd:int" use="required"/>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="deleteApplicationPackageResponse">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="updateApplicationPackageStateRequest">
        <complexType>
          <sequence/>
          <attribute name="packageId" type="xsd:int" use="required"/>
          <attribute name="active" type="xsd:boolean" use="required"/>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="updateApplicationPackageStateResponse">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="downloadApplicationPackageRequest">
        <complexType>
          <sequence/>
          <attribute name="packageId" type="xsd:int" use="required"/>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="downloadApplicationPackageResponse">
        <complexType>
          <sequence>
            <element name="image" type="policynet:BinaryData" minOccurs="1" maxOccurs="1"/>
          </sequence>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="uploadApplicationPackageRequest">
        <complexType>
          <sequence>
            <element name="image" type="xsd:base64Binary" minOccurs="1" maxOccurs="1" nillable="false"/>
          </sequence>
          <attribute name="appId" type="xsd:string" use="required"/>
          <attribute name="appName" type="xsd:string" use="required"/>
          <attribute name="version" type="xsd:string" use="required"/>
          <attribute name="releaseDate" type="xsd:string" use="optional"/>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="uploadApplicationPackageResponse">
        <complexType>
          <sequence/>
          <attribute name="packageId" type="xsd:int" use="required"/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="activateSoftwarePolicyRequest">
        <complexType>
          <sequence/>
          <attribute name="policyId" type="xsd:positiveInteger" use="required"/>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="activateSoftwarePolicyResponse">
        <complexType>
          <sequence/>
        </complexType>
      </element>
      <!--operation request element-->
      <element name="deactivateSoftwarePolicyRequest">
        <complexType>
          <sequence/>
          <attribute name="policyId" type="xsd:positiveInteger" use="required"/>
        </complexType>
      </element>
      <!--operation response element-->
      <element name="deactivateSoftwarePolicyResponse">
        <complexType>
          <sequence/>
        </complexType>
      </element>
    </schema>
  </types>
  <message name="loginRequest">
    <part name="parameters" element="policynet:loginRequest"/>
  </message>
  <message name="loginResponse">
    <part name="parameters" element="policynet:loginResponse"/>
  </message>
  <message name="logoutRequest">
    <part name="parameters" element="policynet:logoutRequest"/>
  </message>
  <message name="logoutResponse">
    <part name="parameters" element="policynet:logoutResponse"/>
  </message>
  <message name="createUserAccountRequest">
    <part name="parameters" element="policynet:createUserAccountRequest"/>
  </message>
  <message name="createUserAccountResponse">
    <part name="parameters" element="policynet:createUserAccountResponse"/>
  </message>
  <message name="updateUserAccountRequest">
    <part name="parameters" element="policynet:updateUserAccountRequest"/>
  </message>
  <message name="updateUserAccountResponse">
    <part name="parameters" element="policynet:updateUserAccountResponse"/>
  </message>
  <message name="searchUserAccountsRequest">
    <part name="parameters" element="policynet:searchUserAccountsRequest"/>
  </message>
  <message name="searchUserAccountsResponse">
    <part name="parameters" element="policynet:searchUserAccountsResponse"/>
  </message>
  <message name="createUserRequest">
    <part name="parameters" element="policynet:createUserRequest"/>
  </message>
  <message name="createUserResponse">
    <part name="parameters" element="policynet:createUserResponse"/>
  </message>
  <message name="updateUserRequest">
    <part name="parameters" element="policynet:updateUserRequest"/>
  </message>
  <message name="updateUserResponse">
    <part name="parameters" element="policynet:updateUserResponse"/>
  </message>
  <message name="updateUserPasswordRequest">
    <part name="parameters" element="policynet:updateUserPasswordRequest"/>
  </message>
  <message name="updateUserPasswordResponse">
    <part name="parameters" element="policynet:updateUserPasswordResponse"/>
  </message>
  <message name="searchUsersRequest">
    <part name="parameters" element="policynet:searchUsersRequest"/>
  </message>
  <message name="searchUsersResponse">
    <part name="parameters" element="policynet:searchUsersResponse"/>
  </message>
  <message name="deleteUserRequest">
    <part name="parameters" element="policynet:deleteUserRequest"/>
  </message>
  <message name="deleteUserResponse">
    <part name="parameters" element="policynet:deleteUserResponse"/>
  </message>
  <message name="enableUserRequest">
    <part name="parameters" element="policynet:enableUserRequest"/>
  </message>
  <message name="enableUserResponse">
    <part name="parameters" element="policynet:enableUserResponse"/>
  </message>
  <message name="disableUserRequest">
    <part name="parameters" element="policynet:disableUserRequest"/>
  </message>
  <message name="disableUserResponse">
    <part name="parameters" element="policynet:disableUserResponse"/>
  </message>
  <message name="unlockUserRequest">
    <part name="parameters" element="policynet:unlockUserRequest"/>
  </message>
  <message name="unlockUserResponse">
    <part name="parameters" element="policynet:unlockUserResponse"/>
  </message>
  <message name="enableUserPasswordAgingRequest">
    <part name="parameters" element="policynet:enableUserPasswordAgingRequest"/>
  </message>
  <message name="enableUserPasswordAgingResponse">
    <part name="parameters" element="policynet:enableUserPasswordAgingResponse"/>
  </message>
  <message name="disableUserPasswordAgingRequest">
    <part name="parameters" element="policynet:disableUserPasswordAgingRequest"/>
  </message>
  <message name="disableUserPasswordAgingResponse">
    <part name="parameters" element="policynet:disableUserPasswordAgingResponse"/>
  </message>
  <message name="searchRolesRequest">
    <part name="parameters" element="policynet:searchRolesRequest"/>
  </message>
  <message name="searchRolesResponse">
    <part name="parameters" element="policynet:searchRolesResponse"/>
  </message>
  <message name="getUserSecurityRulesRequest">
    <part name="parameters" element="policynet:getUserSecurityRulesRequest"/>
  </message>
  <message name="getUserSecurityRulesResponse">
    <part name="parameters" element="policynet:getUserSecurityRulesResponse"/>
  </message>
  <message name="setUserSecurityRulesRequest">
    <part name="parameters" element="policynet:setUserSecurityRulesRequest"/>
  </message>
  <message name="setUserSecurityRulesResponse">
    <part name="parameters" element="policynet:setUserSecurityRulesResponse"/>
  </message>
  <message name="getClockDriftSettingsRequest">
    <part name="parameters" element="policynet:getClockDriftSettingsRequest"/>
  </message>
  <message name="getClockDriftSettingsResponse">
    <part name="parameters" element="policynet:getClockDriftSettingsResponse"/>
  </message>
  <message name="setClockDriftSettingsRequest">
    <part name="parameters" element="policynet:setClockDriftSettingsRequest"/>
  </message>
  <message name="setClockDriftSettingsResponse">
    <part name="parameters" element="policynet:setClockDriftSettingsResponse"/>
  </message>
  <message name="getRadiusSettingsRequest">
    <part name="parameters" element="policynet:getRadiusSettingsRequest"/>
  </message>
  <message name="getRadiusSettingsResponse">
    <part name="parameters" element="policynet:getRadiusSettingsResponse"/>
  </message>
  <message name="setRadiusSettingsRequest">
    <part name="parameters" element="policynet:setRadiusSettingsRequest"/>
  </message>
  <message name="setRadiusSettingsResponse">
    <part name="parameters" element="policynet:setRadiusSettingsResponse"/>
  </message>
  <message name="searchNasClientsRequest">
    <part name="parameters" element="policynet:searchNasClientsRequest"/>
  </message>
  <message name="SearchNasClientsResponse">
    <part name="parameters" element="policynet:SearchNasClientsResponse"/>
  </message>
  <message name="createNasClientRequest">
    <part name="parameters" element="policynet:createNasClientRequest"/>
  </message>
  <message name="CreateNasClientResponse">
    <part name="parameters" element="policynet:CreateNasClientResponse"/>
  </message>
  <message name="updateNasClientRequest">
    <part name="parameters" element="policynet:updateNasClientRequest"/>
  </message>
  <message name="UpdateNasClientResponse">
    <part name="parameters" element="policynet:UpdateNasClientResponse"/>
  </message>
  <message name="deleteNasClientRequest">
    <part name="parameters" element="policynet:deleteNasClientRequest"/>
  </message>
  <message name="DeleteNasClientResponse">
    <part name="parameters" element="policynet:DeleteNasClientResponse"/>
  </message>
  <message name="searchRadiusProxiesRequest">
    <part name="parameters" element="policynet:searchRadiusProxiesRequest"/>
  </message>
  <message name="SearchRadiusProxiesResponse">
    <part name="parameters" element="policynet:SearchRadiusProxiesResponse"/>
  </message>
  <message name="createRadiusProxyRequest">
    <part name="parameters" element="policynet:createRadiusProxyRequest"/>
  </message>
  <message name="CreateRadiusProxyResponse">
    <part name="parameters" element="policynet:CreateRadiusProxyResponse"/>
  </message>
  <message name="updateRadiusProxyRequest">
    <part name="parameters" element="policynet:updateRadiusProxyRequest"/>
  </message>
  <message name="UpdateRadiusProxyResponse">
    <part name="parameters" element="policynet:UpdateRadiusProxyResponse"/>
  </message>
  <message name="deleteRadiusProxyRequest">
    <part name="parameters" element="policynet:deleteRadiusProxyRequest"/>
  </message>
  <message name="DeleteRadiusProxyResponse">
    <part name="parameters" element="policynet:DeleteRadiusProxyResponse"/>
  </message>
  <message name="forceDeployMulticastPolicyRequest">
    <part name="parameters" element="policynet:forceDeployMulticastPolicyRequest"/>
  </message>
  <message name="forceDeployMulticastPolicyResponse">
    <part name="parameters" element="policynet:forceDeployMulticastPolicyResponse"/>
  </message>
  <message name="createMeterReadScheduleRequest">
    <part name="parameters" element="policynet:createMeterReadScheduleRequest"/>
  </message>
  <message name="createMeterReadScheduleResponse">
    <part name="parameters" element="policynet:createMeterReadScheduleResponse"/>
  </message>
  <message name="updateMeterReadScheduleRequest">
    <part name="parameters" element="policynet:updateMeterReadScheduleRequest"/>
  </message>
  <message name="updateMeterReadScheduleResponse">
    <part name="parameters" element="policynet:updateMeterReadScheduleResponse"/>
  </message>
  <message name="deleteMeterReadScheduleRequest">
    <part name="parameters" element="policynet:deleteMeterReadScheduleRequest"/>
  </message>
  <message name="deleteMeterReadScheduleResponse">
    <part name="parameters" element="policynet:deleteMeterReadScheduleResponse"/>
  </message>
  <message name="deployMeterReadScheduleRequest">
    <part name="parameters" element="policynet:deployMeterReadScheduleRequest"/>
  </message>
  <message name="deployMeterReadScheduleResponse">
    <part name="parameters" element="policynet:deployMeterReadScheduleResponse"/>
  </message>
  <message name="undeployMeterReadScheduleRequest">
    <part name="parameters" element="policynet:undeployMeterReadScheduleRequest"/>
  </message>
  <message name="undeployMeterReadScheduleResponse">
    <part name="parameters" element="policynet:undeployMeterReadScheduleResponse"/>
  </message>
  <message name="createMeterControlScheduleRequest">
    <part name="parameters" element="policynet:createMeterControlScheduleRequest"/>
  </message>
  <message name="createMeterControlScheduleResponse">
    <part name="parameters" element="policynet:createMeterControlScheduleResponse"/>
  </message>
  <message name="updateMeterControlScheduleRequest">
    <part name="parameters" element="policynet:updateMeterControlScheduleRequest"/>
  </message>
  <message name="updateMeterControlScheduleResponse">
    <part name="parameters" element="policynet:updateMeterControlScheduleResponse"/>
  </message>
  <message name="deleteMeterControlScheduleRequest">
    <part name="parameters" element="policynet:deleteMeterControlScheduleRequest"/>
  </message>
  <message name="deleteMeterControlScheduleResponse">
    <part name="parameters" element="policynet:deleteMeterControlScheduleResponse"/>
  </message>
  <message name="deployMeterControlScheduleRequest">
    <part name="parameters" element="policynet:deployMeterControlScheduleRequest"/>
  </message>
  <message name="deployMeterControlScheduleResponse">
    <part name="parameters" element="policynet:deployMeterControlScheduleResponse"/>
  </message>
  <message name="undeployMeterControlScheduleRequest">
    <part name="parameters" element="policynet:undeployMeterControlScheduleRequest"/>
  </message>
  <message name="undeployMeterControlScheduleResponse">
    <part name="parameters" element="policynet:undeployMeterControlScheduleResponse"/>
  </message>
  <message name="createLoadControlScheduleRequest">
    <part name="parameters" element="policynet:createLoadControlScheduleRequest"/>
  </message>
  <message name="createLoadControlScheduleResponse">
    <part name="parameters" element="policynet:createLoadControlScheduleResponse"/>
  </message>
  <message name="updateLoadControlScheduleRequest">
    <part name="parameters" element="policynet:updateLoadControlScheduleRequest"/>
  </message>
  <message name="updateLoadControlScheduleResponse">
    <part name="parameters" element="policynet:updateLoadControlScheduleResponse"/>
  </message>
  <message name="deleteLoadControlScheduleRequest">
    <part name="parameters" element="policynet:deleteLoadControlScheduleRequest"/>
  </message>
  <message name="deleteLoadControlScheduleResponse">
    <part name="parameters" element="policynet:deleteLoadControlScheduleResponse"/>
  </message>
  <message name="deployLoadControlScheduleRequest">
    <part name="parameters" element="policynet:deployLoadControlScheduleRequest"/>
  </message>
  <message name="deployLoadControlScheduleResponse">
    <part name="parameters" element="policynet:deployLoadControlScheduleResponse"/>
  </message>
  <message name="undeployLoadControlScheduleRequest">
    <part name="parameters" element="policynet:undeployLoadControlScheduleRequest"/>
  </message>
  <message name="undeployLoadControlScheduleResponse">
    <part name="parameters" element="policynet:undeployLoadControlScheduleResponse"/>
  </message>
  <message name="createPanPolicyRequest">
    <part name="parameters" element="policynet:createPanPolicyRequest"/>
  </message>
  <message name="createPanPolicyResponse">
    <part name="parameters" element="policynet:createPanPolicyResponse"/>
  </message>
  <message name="updatePanPolicyRequest">
    <part name="parameters" element="policynet:updatePanPolicyRequest"/>
  </message>
  <message name="updatePanPolicyResponse">
    <part name="parameters" element="policynet:updatePanPolicyResponse"/>
  </message>
  <message name="deletePanPolicyRequest">
    <part name="parameters" element="policynet:deletePanPolicyRequest"/>
  </message>
  <message name="deletePanPolicyResponse">
    <part name="parameters" element="policynet:deletePanPolicyResponse"/>
  </message>
  <message name="deployPanPolicyRequest">
    <part name="parameters" element="policynet:deployPanPolicyRequest"/>
  </message>
  <message name="deployPanPolicyResponse">
    <part name="parameters" element="policynet:deployPanPolicyResponse"/>
  </message>
  <message name="undeployPanPolicyRequest">
    <part name="parameters" element="policynet:undeployPanPolicyRequest"/>
  </message>
  <message name="undeployPanPolicyResponse">
    <part name="parameters" element="policynet:undeployPanPolicyResponse"/>
  </message>
  <message name="createPanDevicesRequest">
    <part name="parameters" element="policynet:createPanDevicesRequest"/>
  </message>
  <message name="createPanDevicesResponse">
    <part name="parameters" element="policynet:createPanDevicesResponse"/>
  </message>
  <message name="setPanDeviceLabelRequest">
    <part name="parameters" element="policynet:setPanDeviceLabelRequest"/>
  </message>
  <message name="setPanDeviceLabelResponse">
    <part name="parameters" element="policynet:setPanDeviceLabelResponse"/>
  </message>
  <message name="removePanDeviceLabelRequest">
    <part name="parameters" element="policynet:removePanDeviceLabelRequest"/>
  </message>
  <message name="removePanDeviceLabelResponse">
    <part name="parameters" element="policynet:removePanDeviceLabelResponse"/>
  </message>
  <message name="assignPanServicePointRequest">
    <part name="parameters" element="policynet:assignPanServicePointRequest"/>
  </message>
  <message name="assignPanServicePointResponse">
    <part name="parameters" element="policynet:assignPanServicePointResponse"/>
  </message>
  <message name="assignWaterServicePointRequest">
    <part name="parameters" element="policynet:assignWaterServicePointRequest"/>
  </message>
  <message name="assignWaterServicePointResponse">
    <part name="parameters" element="policynet:assignWaterServicePointResponse"/>
  </message>
  <message name="createWaterMeterReadRequest">
    <part name="parameters" element="policynet:createWaterMeterReadRequest"/>
  </message>
  <message name="createWaterMeterReadResponse">
    <part name="parameters" element="policynet:createWaterMeterReadResponse"/>
  </message>
  <message name="createWaterMeterReadScheduleRequest">
    <part name="parameters" element="policynet:createWaterMeterReadScheduleRequest"/>
  </message>
  <message name="createWaterMeterReadScheduleResponse">
    <part name="parameters" element="policynet:createWaterMeterReadScheduleResponse"/>
  </message>
  <message name="updateWaterMeterReadScheduleRequest">
    <part name="parameters" element="policynet:updateWaterMeterReadScheduleRequest"/>
  </message>
  <message name="updateWaterMeterReadScheduleResponse">
    <part name="parameters" element="policynet:updateWaterMeterReadScheduleResponse"/>
  </message>
  <message name="deleteWaterMeterReadScheduleRequest">
    <part name="parameters" element="policynet:deleteWaterMeterReadScheduleRequest"/>
  </message>
  <message name="deleteWaterMeterReadScheduleResponse">
    <part name="parameters" element="policynet:deleteWaterMeterReadScheduleResponse"/>
  </message>
  <message name="deployWaterMeterReadScheduleRequest">
    <part name="parameters" element="policynet:deployWaterMeterReadScheduleRequest"/>
  </message>
  <message name="deployWaterMeterReadScheduleResponse">
    <part name="parameters" element="policynet:deployWaterMeterReadScheduleResponse"/>
  </message>
  <message name="undeployWaterMeterReadScheduleRequest">
    <part name="parameters" element="policynet:undeployWaterMeterReadScheduleRequest"/>
  </message>
  <message name="undeployWaterMeterReadScheduleResponse">
    <part name="parameters" element="policynet:undeployWaterMeterReadScheduleResponse"/>
  </message>
  <message name="createGasMeterReadScheduleRequest">
    <part name="parameters" element="policynet:createGasMeterReadScheduleRequest"/>
  </message>
  <message name="createGasMeterReadScheduleResponse">
    <part name="parameters" element="policynet:createGasMeterReadScheduleResponse"/>
  </message>
  <message name="updateGasMeterReadScheduleRequest">
    <part name="parameters" element="policynet:updateGasMeterReadScheduleRequest"/>
  </message>
  <message name="updateGasMeterReadScheduleResponse">
    <part name="parameters" element="policynet:updateGasMeterReadScheduleResponse"/>
  </message>
  <message name="deleteGasMeterReadScheduleRequest">
    <part name="parameters" element="policynet:deleteGasMeterReadScheduleRequest"/>
  </message>
  <message name="deleteGasMeterReadScheduleResponse">
    <part name="parameters" element="policynet:deleteGasMeterReadScheduleResponse"/>
  </message>
  <message name="deployGasMeterReadScheduleRequest">
    <part name="parameters" element="policynet:deployGasMeterReadScheduleRequest"/>
  </message>
  <message name="deployGasMeterReadScheduleResponse">
    <part name="parameters" element="policynet:deployGasMeterReadScheduleResponse"/>
  </message>
  <message name="undeployGasMeterReadScheduleRequest">
    <part name="parameters" element="policynet:undeployGasMeterReadScheduleRequest"/>
  </message>
  <message name="undeployGasMeterReadScheduleResponse">
    <part name="parameters" element="policynet:undeployGasMeterReadScheduleResponse"/>
  </message>
  <message name="createDeviceControlScheduleRequest">
    <part name="parameters" element="policynet:createDeviceControlScheduleRequest"/>
  </message>
  <message name="createDeviceControlScheduleResponse">
    <part name="parameters" element="policynet:createDeviceControlScheduleResponse"/>
  </message>
  <message name="updateDeviceControlScheduleRequest">
    <part name="parameters" element="policynet:updateDeviceControlScheduleRequest"/>
  </message>
  <message name="updateDeviceControlScheduleResponse">
    <part name="parameters" element="policynet:updateDeviceControlScheduleResponse"/>
  </message>
  <message name="deleteDeviceControlScheduleRequest">
    <part name="parameters" element="policynet:deleteDeviceControlScheduleRequest"/>
  </message>
  <message name="deleteDeviceControlScheduleResponse">
    <part name="parameters" element="policynet:deleteDeviceControlScheduleResponse"/>
  </message>
  <message name="deployDeviceControlScheduleRequest">
    <part name="parameters" element="policynet:deployDeviceControlScheduleRequest"/>
  </message>
  <message name="deployDeviceControlScheduleResponse">
    <part name="parameters" element="policynet:deployDeviceControlScheduleResponse"/>
  </message>
  <message name="undeployDeviceControlScheduleRequest">
    <part name="parameters" element="policynet:undeployDeviceControlScheduleRequest"/>
  </message>
  <message name="undeployDeviceControlScheduleResponse">
    <part name="parameters" element="policynet:undeployDeviceControlScheduleResponse"/>
  </message>
  <message name="createWaterMeterRegisterReportRequest">
    <part name="parameters" element="policynet:createWaterMeterRegisterReportRequest"/>
  </message>
  <message name="createWaterMeterRegisterReportResponse">
    <part name="parameters" element="policynet:createWaterMeterRegisterReportResponse"/>
  </message>
  <message name="createWaterMeterIntervalReportRequest">
    <part name="parameters" element="policynet:createWaterMeterIntervalReportRequest"/>
  </message>
  <message name="createWaterMeterIntervalReportResponse">
    <part name="parameters" element="policynet:createWaterMeterIntervalReportResponse"/>
  </message>
  <message name="createGasMeterRegisterReportRequest">
    <part name="parameters" element="policynet:createGasMeterRegisterReportRequest"/>
  </message>
  <message name="createGasMeterRegisterReportResponse">
    <part name="parameters" element="policynet:createGasMeterRegisterReportResponse"/>
  </message>
  <message name="createGasMeterIntervalReportRequest">
    <part name="parameters" element="policynet:createGasMeterIntervalReportRequest"/>
  </message>
  <message name="createGasMeterIntervalReportResponse">
    <part name="parameters" element="policynet:createGasMeterIntervalReportResponse"/>
  </message>
  <message name="createServerPolicyRequest">
    <part name="parameters" element="policynet:createServerPolicyRequest"/>
  </message>
  <message name="createServerPolicyResponse">
    <part name="parameters" element="policynet:createServerPolicyResponse"/>
  </message>
  <message name="updateServerPolicyRequest">
    <part name="parameters" element="policynet:updateServerPolicyRequest"/>
  </message>
  <message name="updateServerPolicyResponse">
    <part name="parameters" element="policynet:updateServerPolicyResponse"/>
  </message>
  <message name="deleteServerPolicyRequest">
    <part name="parameters" element="policynet:deleteServerPolicyRequest"/>
  </message>
  <message name="deleteServerPolicyResponse">
    <part name="parameters" element="policynet:deleteServerPolicyResponse"/>
  </message>
  <message name="deployServerPolicyRequest">
    <part name="parameters" element="policynet:deployServerPolicyRequest"/>
  </message>
  <message name="deployServerPolicyResponse">
    <part name="parameters" element="policynet:deployServerPolicyResponse"/>
  </message>
  <message name="undeployServerPolicyRequest">
    <part name="parameters" element="policynet:undeployServerPolicyRequest"/>
  </message>
  <message name="undeployServerPolicyResponse">
    <part name="parameters" element="policynet:undeployServerPolicyResponse"/>
  </message>
  <message name="searchPoliciesRequest">
    <part name="parameters" element="policynet:searchPoliciesRequest"/>
  </message>
  <message name="searchPoliciesResponse">
    <part name="parameters" element="policynet:searchPoliciesResponse"/>
  </message>
  <message name="searchPoliciesListRequest">
    <part name="parameters" element="policynet:searchPoliciesListRequest"/>
  </message>
  <message name="searchPoliciesListResponse">
    <part name="parameters" element="policynet:searchPoliciesListResponse"/>
  </message>
  <message name="getDeviceStateSummaryRequest">
    <part name="parameters" element="policynet:getDeviceStateSummaryRequest"/>
  </message>
  <message name="getDeviceStateSummaryResponse">
    <part name="parameters" element="policynet:getDeviceStateSummaryResponse"/>
  </message>
  <message name="searchDevicesWildcardRequest">
    <part name="parameters" element="policynet:searchDevicesWildcardRequest"/>
  </message>
  <message name="searchDevicesResponse">
    <part name="parameters" element="policynet:searchDevicesResponse"/>
  </message>
  <message name="searchDevicesRequest">
    <part name="parameters" element="policynet:searchDevicesRequest"/>
  </message>
  <message name="searchDevicesBaseRequest">
    <part name="parameters" element="policynet:searchDevicesBaseRequest"/>
  </message>
  <message name="SearchDevicesBaseResponse">
    <part name="parameters" element="policynet:SearchDevicesBaseResponse"/>
  </message>
  <message name="searchDeviceSiblingsRequest">
    <part name="parameters" element="policynet:searchDeviceSiblingsRequest"/>
  </message>
  <message name="searchDeviceSiblingsResponse">
    <part name="parameters" element="policynet:searchDeviceSiblingsResponse"/>
  </message>
  <message name="searchDeviceListRequest">
    <part name="parameters" element="policynet:searchDeviceListRequest"/>
  </message>
  <message name="searchDeviceListResponse">
    <part name="parameters" element="policynet:searchDeviceListResponse"/>
  </message>
  <message name="searchCommAssetsRequest">
    <part name="parameters" element="policynet:searchCommAssetsRequest"/>
  </message>
  <message name="searchCommAssetsResponse">
    <part name="parameters" element="policynet:searchCommAssetsResponse"/>
  </message>
  <message name="deleteCommAssetRequest">
    <part name="parameters" element="policynet:deleteCommAssetRequest"/>
  </message>
  <message name="deleteCommAssetResponse">
    <part name="parameters" element="policynet:deleteCommAssetResponse"/>
  </message>
  <message name="createMeterPasswordReportRequest">
    <part name="parameters" element="policynet:createMeterPasswordReportRequest"/>
  </message>
  <message name="createMeterPasswordReportResponse">
    <part name="parameters" element="policynet:createMeterPasswordReportResponse"/>
  </message>
  <message name="updateDeviceBindingRequest">
    <part name="parameters" element="policynet:updateDeviceBindingRequest"/>
  </message>
  <message name="updateDeviceBindingResponse">
    <part name="parameters" element="policynet:updateDeviceBindingResponse"/>
  </message>
  <message name="getDevicesStatusesRequest">
    <part name="parameters" element="policynet:getDevicesStatusesRequest"/>
  </message>
  <message name="getDevicesStatusesResponse">
    <part name="parameters" element="policynet:getDevicesStatusesResponse"/>
  </message>
  <message name="getNameListRequest">
    <part name="parameters" element="policynet:getNameListRequest"/>
  </message>
  <message name="getNameListResponse">
    <part name="parameters" element="policynet:getNameListResponse"/>
  </message>
  <message name="previewPolicyTargetCountRequest">
    <part name="parameters" element="policynet:previewPolicyTargetCountRequest"/>
  </message>
  <message name="previewPolicyTargetCountResponse">
    <part name="parameters" element="policynet:previewPolicyTargetCountResponse"/>
  </message>
  <message name="searchPolicyTargetsRequest">
    <part name="parameters" element="policynet:searchPolicyTargetsRequest"/>
  </message>
  <message name="searchPolicyTargetsResponse">
    <part name="parameters" element="policynet:searchPolicyTargetsResponse"/>
  </message>
  <message name="syncPolicyTargetsRequest">
    <part name="parameters" element="policynet:syncPolicyTargetsRequest"/>
  </message>
  <message name="syncPolicyTargetsResponse">
    <part name="parameters" element="policynet:syncPolicyTargetsResponse"/>
  </message>
  <message name="createCustomDeviceAttributesRequest">
    <part name="parameters" element="policynet:createCustomDeviceAttributesRequest"/>
  </message>
  <message name="createCustomDeviceAttributesResponse">
    <part name="parameters" element="policynet:createCustomDeviceAttributesResponse"/>
  </message>
  <message name="deleteCustomDeviceAttributesRequest">
    <part name="parameters" element="policynet:deleteCustomDeviceAttributesRequest"/>
  </message>
  <message name="deleteCustomDeviceAttributesResponse">
    <part name="parameters" element="policynet:deleteCustomDeviceAttributesResponse"/>
  </message>
  <message name="searchCustomDeviceAttributesRequest">
    <part name="parameters" element="policynet:searchCustomDeviceAttributesRequest"/>
  </message>
  <message name="searchCustomDeviceAttributesResponse">
    <part name="parameters" element="policynet:searchCustomDeviceAttributesResponse"/>
  </message>
  <message name="createIntervalReportRequest">
    <part name="parameters" element="policynet:createIntervalReportRequest"/>
  </message>
  <message name="createIntervalReportResponse">
    <part name="parameters" element="policynet:createIntervalReportResponse"/>
  </message>
  <message name="createValidatedIntervalReportRequest">
    <part name="parameters" element="policynet:createValidatedIntervalReportRequest"/>
  </message>
  <message name="createValidatedIntervalReportResponse">
    <part name="parameters" element="policynet:createValidatedIntervalReportResponse"/>
  </message>
  <message name="createRegisterReportRequest">
    <part name="parameters" element="policynet:createRegisterReportRequest"/>
  </message>
  <message name="createRegisterReportResponse">
    <part name="parameters" element="policynet:createRegisterReportResponse"/>
  </message>
  <message name="createRegisterReportMSPRequest">
    <part name="parameters" element="policynet:createRegisterReportMSPRequest"/>
  </message>
  <message name="createRegisterReportMSPResponse">
    <part name="parameters" element="policynet:createRegisterReportMSPResponse"/>
  </message>
  <message name="searchPanTopologyRequest">
    <part name="parameters" element="policynet:searchPanTopologyRequest"/>
  </message>
  <message name="searchPanTopologyResponse">
    <part name="parameters" element="policynet:searchPanTopologyResponse"/>
  </message>
  <message name="createDeviceHistoryReportRequest">
    <part name="parameters" element="policynet:createDeviceHistoryReportRequest"/>
  </message>
  <message name="createDeviceHistoryReportResponse">
    <part name="parameters" element="policynet:createDeviceHistoryReportResponse"/>
  </message>
  <message name="searchGroupsRequest">
    <part name="parameters" element="policynet:searchGroupsRequest"/>
  </message>
  <message name="searchGroupsResponse">
    <part name="parameters" element="policynet:searchGroupsResponse"/>
  </message>
  <message name="uploadFirmwarePackageRequest">
    <part name="parameters" element="policynet:uploadFirmwarePackageRequest"/>
  </message>
  <message name="uploadFirmwarePackageResponse">
    <part name="parameters" element="policynet:uploadFirmwarePackageResponse"/>
  </message>
  <message name="importShipFileRequest">
    <part name="parameters" element="policynet:importShipFileRequest"/>
  </message>
  <message name="importShipFileResponse">
    <part name="parameters" element="policynet:importShipFileResponse"/>
  </message>
  <message name="exportShipFileRequest">
    <part name="parameters" element="policynet:exportShipFileRequest"/>
  </message>
  <message name="exportShipFileResponse">
    <part name="parameters" element="policynet:exportShipFileResponse"/>
  </message>
  <message name="uploadDeviceExportCertificateRequest">
    <part name="parameters" element="policynet:uploadDeviceExportCertificateRequest"/>
  </message>
  <message name="uploadDeviceExportCertificateResponse">
    <part name="parameters" element="policynet:uploadDeviceExportCertificateResponse"/>
  </message>
  <message name="searchDeviceExportCertificatesRequest">
    <part name="parameters" element="policynet:searchDeviceExportCertificatesRequest"/>
  </message>
  <message name="searchDeviceExportCertificatesResponse">
    <part name="parameters" element="policynet:searchDeviceExportCertificatesResponse"/>
  </message>
  <message name="searchFirmwarePackagesRequest">
    <part name="parameters" element="policynet:searchFirmwarePackagesRequest"/>
  </message>
  <message name="searchFirmwarePackagesResponse">
    <part name="parameters" element="policynet:searchFirmwarePackagesResponse"/>
  </message>
  <message name="deleteFirmwarePackageRequest">
    <part name="parameters" element="policynet:deleteFirmwarePackageRequest"/>
  </message>
  <message name="deleteFirmwarePackageResponse">
    <part name="parameters" element="policynet:deleteFirmwarePackageResponse"/>
  </message>
  <message name="updateFirmwarePackageStateRequest">
    <part name="parameters" element="policynet:updateFirmwarePackageStateRequest"/>
  </message>
  <message name="updateFirmwarePackageStateResponse">
    <part name="parameters" element="policynet:updateFirmwarePackageStateResponse"/>
  </message>
  <message name="downloadFirmwarePackageRequest">
    <part name="parameters" element="policynet:downloadFirmwarePackageRequest"/>
  </message>
  <message name="downloadFirmwarePackageResponse">
    <part name="parameters" element="policynet:downloadFirmwarePackageResponse"/>
  </message>
  <message name="createMeterProgramRequest">
    <part name="parameters" element="policynet:createMeterProgramRequest"/>
  </message>
  <message name="createMeterProgramResponse">
    <part name="parameters" element="policynet:createMeterProgramResponse"/>
  </message>
  <message name="searchMeterProgramsRequest">
    <part name="parameters" element="policynet:searchMeterProgramsRequest"/>
  </message>
  <message name="searchMeterProgramsResponse">
    <part name="parameters" element="policynet:searchMeterProgramsResponse"/>
  </message>
  <message name="updateMeterProgramRequest">
    <part name="parameters" element="policynet:updateMeterProgramRequest"/>
  </message>
  <message name="updateMeterProgramResponse">
    <part name="parameters" element="policynet:updateMeterProgramResponse"/>
  </message>
  <message name="deleteMeterProgramRequest">
    <part name="parameters" element="policynet:deleteMeterProgramRequest"/>
  </message>
  <message name="deleteMeterProgramResponse">
    <part name="parameters" element="policynet:deleteMeterProgramResponse"/>
  </message>
  <message name="createQosProfileRequest">
    <part name="parameters" element="policynet:createQosProfileRequest"/>
  </message>
  <message name="createQosProfileResponse">
    <part name="parameters" element="policynet:createQosProfileResponse"/>
  </message>
  <message name="searchQosProfilesRequest">
    <part name="parameters" element="policynet:searchQosProfilesRequest"/>
  </message>
  <message name="searchQosProfilesResponse">
    <part name="parameters" element="policynet:searchQosProfilesResponse"/>
  </message>
  <message name="updateQosProfileRequest">
    <part name="parameters" element="policynet:updateQosProfileRequest"/>
  </message>
  <message name="updateQosProfileResponse">
    <part name="parameters" element="policynet:updateQosProfileResponse"/>
  </message>
  <message name="deleteQosProfileRequest">
    <part name="parameters" element="policynet:deleteQosProfileRequest"/>
  </message>
  <message name="deleteQosProfileResponse">
    <part name="parameters" element="policynet:deleteQosProfileResponse"/>
  </message>
  <message name="searchRadiusDictionariesRequest">
    <part name="parameters" element="policynet:searchRadiusDictionariesRequest"/>
  </message>
  <message name="searchRadiusDictionariesResponse">
    <part name="parameters" element="policynet:searchRadiusDictionariesResponse"/>
  </message>
  <message name="createPowerQualityReportRequest">
    <part name="parameters" element="policynet:createPowerQualityReportRequest"/>
  </message>
  <message name="createPowerQualityReportResponse">
    <part name="parameters" element="policynet:createPowerQualityReportResponse"/>
  </message>
  <message name="createPowerQualityProfileReportRequest">
    <part name="parameters" element="policynet:createPowerQualityProfileReportRequest"/>
  </message>
  <message name="createPowerQualityProfileReportResponse">
    <part name="parameters" element="policynet:createPowerQualityProfileReportResponse"/>
  </message>
  <message name="getVoltageBandSettingsRequest">
    <part name="parameters" element="policynet:getVoltageBandSettingsRequest"/>
  </message>
  <message name="getVoltageBandSettingsResponse">
    <part name="parameters" element="policynet:getVoltageBandSettingsResponse"/>
  </message>
  <message name="setVoltageBandSettingsRequest">
    <part name="parameters" element="policynet:setVoltageBandSettingsRequest"/>
  </message>
  <message name="setVoltageBandSettingsResponse">
    <part name="parameters" element="policynet:setVoltageBandSettingsResponse"/>
  </message>
  <message name="createOutageStatsReportRequest">
    <part name="parameters" element="policynet:createOutageStatsReportRequest"/>
  </message>
  <message name="createOutageStatsReportResponse">
    <part name="parameters" element="policynet:createOutageStatsReportResponse"/>
  </message>
  <message name="createMeterProgramResultRequest">
    <part name="parameters" element="policynet:createMeterProgramResultRequest"/>
  </message>
  <message name="policyResultDetailResponse">
    <part name="parameters" element="policynet:policyResultDetailResponse"/>
  </message>
  <message name="createSWUpgradeResultRequest">
    <part name="parameters" element="policynet:createSWUpgradeResultRequest"/>
  </message>
  <message name="getEventTrendsRequest">
    <part name="parameters" element="policynet:getEventTrendsRequest"/>
  </message>
  <message name="getEventTrendsResponse">
    <part name="parameters" element="policynet:getEventTrendsResponse"/>
  </message>
  <message name="getEventSummaryRequest">
    <part name="parameters" element="policynet:getEventSummaryRequest"/>
  </message>
  <message name="getEventSummaryResponse">
    <part name="parameters" element="policynet:getEventSummaryResponse"/>
  </message>
  <message name="createEventsReportRequest">
    <part name="parameters" element="policynet:createEventsReportRequest"/>
  </message>
  <message name="createEventsReportResponse">
    <part name="parameters" element="policynet:createEventsReportResponse"/>
  </message>
  <message name="createSystemOutagesReportRequest">
    <part name="parameters" element="policynet:createSystemOutagesReportRequest"/>
  </message>
  <message name="createSystemOutagesReportResponse">
    <part name="parameters" element="policynet:createSystemOutagesReportResponse"/>
  </message>
  <message name="getSystemOutagesSummaryRequest">
    <part name="parameters" element="policynet:getSystemOutagesSummaryRequest"/>
  </message>
  <message name="getSystemOutagesSummaryResponse">
    <part name="parameters" element="policynet:getSystemOutagesSummaryResponse"/>
  </message>
  <message name="searchFeedersRequest">
    <part name="parameters" element="policynet:searchFeedersRequest"/>
  </message>
  <message name="searchFeedersResponse">
    <part name="parameters" element="policynet:searchFeedersResponse"/>
  </message>
  <message name="createChronicReadFailureReportRequest">
    <part name="parameters" element="policynet:createChronicReadFailureReportRequest"/>
  </message>
  <message name="createChronicReadFailureReportResponse">
    <part name="parameters" element="policynet:createChronicReadFailureReportResponse"/>
  </message>
  <message name="createFailedEnforcementReportRequest">
    <part name="parameters" element="policynet:createFailedEnforcementReportRequest"/>
  </message>
  <message name="createFailedEnforcementReportResponse">
    <part name="parameters" element="policynet:createFailedEnforcementReportResponse"/>
  </message>
  <message name="createClockDriftReportRequest">
    <part name="parameters" element="policynet:createClockDriftReportRequest"/>
  </message>
  <message name="createClockDriftReportResponse">
    <part name="parameters" element="policynet:createClockDriftReportResponse"/>
  </message>
  <message name="createClockAdjustmentReportRequest">
    <part name="parameters" element="policynet:createClockAdjustmentReportRequest"/>
  </message>
  <message name="createClockAdjustmentReportResponse">
    <part name="parameters" element="policynet:createClockAdjustmentReportResponse"/>
  </message>
  <message name="createRadiusAccountingReportRequest">
    <part name="parameters" element="policynet:createRadiusAccountingReportRequest"/>
  </message>
  <message name="createRadiusAccountingReportResponse">
    <part name="parameters" element="policynet:createRadiusAccountingReportResponse"/>
  </message>
  <message name="createIntervalDataSummaryReportRequest">
    <part name="parameters" element="policynet:createIntervalDataSummaryReportRequest"/>
  </message>
  <message name="createIntervalReadDataSummaryReportResponse">
    <part name="parameters" element="policynet:createIntervalReadDataSummaryReportResponse"/>
  </message>
  <message name="createIntervalReadGapReportRequest">
    <part name="parameters" element="policynet:createIntervalReadGapReportRequest"/>
  </message>
  <message name="createIntervalReadGapReportResponse">
    <part name="parameters" element="policynet:createIntervalReadGapReportResponse"/>
  </message>
  <message name="createSystemReliabilityReportRequest">
    <part name="parameters" element="policynet:createSystemReliabilityReportRequest"/>
  </message>
  <message name="createSystemReliabilityReportResponse">
    <part name="parameters" element="policynet:createSystemReliabilityReportResponse"/>
  </message>
  <message name="getSystemReliabilityConfigRequest">
    <part name="parameters" element="policynet:getSystemReliabilityConfigRequest"/>
  </message>
  <message name="getSystemReliabilityConfigResponse">
    <part name="parameters" element="policynet:getSystemReliabilityConfigResponse"/>
  </message>
  <message name="setSystemReliabilityConfigRequest">
    <part name="parameters" element="policynet:setSystemReliabilityConfigRequest"/>
  </message>
  <message name="setSystemReliabilityConfigResponse">
    <part name="parameters" element="policynet:setSystemReliabilityConfigResponse"/>
  </message>
  <message name="createDeviceGroupRequest">
    <part name="parameters" element="policynet:createDeviceGroupRequest"/>
  </message>
  <message name="createDeviceGroupResponse">
    <part name="parameters" element="policynet:createDeviceGroupResponse"/>
  </message>
  <message name="updateDeviceGroupRequest">
    <part name="parameters" element="policynet:updateDeviceGroupRequest"/>
  </message>
  <message name="updateDeviceGroupResponse">
    <part name="parameters" element="policynet:updateDeviceGroupResponse"/>
  </message>
  <message name="deleteDeviceGroupRequest">
    <part name="parameters" element="policynet:deleteDeviceGroupRequest"/>
  </message>
  <message name="deleteDeviceGroupResponse">
    <part name="parameters" element="policynet:deleteDeviceGroupResponse"/>
  </message>
  <message name="getGroupCountRequest">
    <part name="parameters" element="policynet:getGroupCountRequest"/>
  </message>
  <message name="getGroupCountResponse">
    <part name="parameters" element="policynet:getGroupCountResponse"/>
  </message>
  <message name="getDeviceGroupAttributeValuesRequest">
    <part name="parameters" element="policynet:getDeviceGroupAttributeValuesRequest"/>
  </message>
  <message name="getDeviceGroupAttributeValuesResponse">
    <part name="parameters" element="policynet:getDeviceGroupAttributeValuesResponse"/>
  </message>
  <message name="getPolicyStatusRequest">
    <part name="parameters" element="policynet:getPolicyStatusRequest"/>
  </message>
  <message name="getPolicyStatusResponse">
    <part name="parameters" element="policynet:getPolicyStatusResponse"/>
  </message>
  <message name="getPolicyDeploymentStats">
    <part name="parameters" element="policynet:getPolicyDeploymentStats"/>
  </message>
  <message name="getPolicyDeploymentStatsResponse">
    <part name="parameters" element="policynet:getPolicyDeploymentStatsResponse"/>
  </message>
  <message name="createPolicyDeploymentReportRequest">
    <part name="parameters" element="policynet:createPolicyDeploymentReportRequest"/>
  </message>
  <message name="createPolicyDeploymentReportResponse">
    <part name="parameters" element="policynet:createPolicyDeploymentReportResponse"/>
  </message>
  <message name="createPolicyEnforcementReportRequest">
    <part name="parameters" element="policynet:createPolicyEnforcementReportRequest"/>
  </message>
  <message name="createPolicyEnforcementReportResponse">
    <part name="parameters" element="policynet:createPolicyEnforcementReportResponse"/>
  </message>
  <message name="getDeviceGroupChangeRequest">
    <part name="parameters" element="policynet:getDeviceGroupChangeRequest"/>
  </message>
  <message name="getDeviceGroupChangeResponse">
    <part name="parameters" element="policynet:getDeviceGroupChangeResponse"/>
  </message>
  <message name="getDeviceOperationalStateChangeRequest">
    <part name="parameters" element="policynet:getDeviceOperationalStateChangeRequest"/>
  </message>
  <message name="getDeviceOperationalStateChangeResponse">
    <part name="parameters" element="policynet:getDeviceOperationalStateChangeResponse"/>
  </message>
  <message name="searchAuditTrailRequest">
    <part name="parameters" element="policynet:searchAuditTrailRequest"/>
  </message>
  <message name="searchAuditTrailResponse">
    <part name="parameters" element="policynet:searchAuditTrailResponse"/>
  </message>
  <message name="createServicePointsRequest">
    <part name="parameters" element="policynet:createServicePointsRequest"/>
  </message>
  <message name="createServicePointsResponse">
    <part name="parameters" element="policynet:createServicePointsResponse"/>
  </message>
  <message name="updateServicePointsRequest">
    <part name="parameters" element="policynet:updateServicePointsRequest"/>
  </message>
  <message name="updateServicePointsResponse">
    <part name="parameters" element="policynet:updateServicePointsResponse"/>
  </message>
  <message name="deleteServicePointRequest">
    <part name="parameters" element="policynet:deleteServicePointRequest"/>
  </message>
  <message name="deleteServicePointResponse">
    <part name="parameters" element="policynet:deleteServicePointResponse"/>
  </message>
  <message name="removeServicePointFromDeviceRequest">
    <part name="parameters" element="policynet:removeServicePointFromDeviceRequest"/>
  </message>
  <message name="removeServicePointFromDeviceResponse">
    <part name="parameters" element="policynet:removeServicePointFromDeviceResponse"/>
  </message>
  <message name="updateDeviceServicePointRequest">
    <part name="parameters" element="policynet:updateDeviceServicePointRequest"/>
  </message>
  <message name="updateDeviceServicePointResponse">
    <part name="parameters" element="policynet:updateDeviceServicePointResponse"/>
  </message>
  <message name="updateDeviceOperationalStateRequest">
    <part name="parameters" element="policynet:updateDeviceOperationalStateRequest"/>
  </message>
  <message name="updateDeviceOperationalStateResponse">
    <part name="parameters" element="policynet:updateDeviceOperationalStateResponse"/>
  </message>
  <message name="updateWaterMeterOperationalStateRequest">
    <part name="parameters" element="policynet:updateWaterMeterOperationalStateRequest"/>
  </message>
  <message name="updateWaterMeterOperationalStateResponse">
    <part name="parameters" element="policynet:updateWaterMeterOperationalStateResponse"/>
  </message>
  <message name="searchServicePointRequest">
    <part name="parameters" element="policynet:searchServicePointRequest"/>
  </message>
  <message name="searchServicePointResponse">
    <part name="parameters" element="policynet:searchServicePointResponse"/>
  </message>
  <message name="searchServicePointHistoryRequest">
    <part name="parameters" element="policynet:searchServicePointHistoryRequest"/>
  </message>
  <message name="searchServicePointHistoryResponse">
    <part name="parameters" element="policynet:searchServicePointHistoryResponse"/>
  </message>
  <message name="createRoleRequest">
    <part name="parameters" element="policynet:createRoleRequest"/>
  </message>
  <message name="createRoleResponse">
    <part name="parameters" element="policynet:createRoleResponse"/>
  </message>
  <message name="updateRoleRequest">
    <part name="parameters" element="policynet:updateRoleRequest"/>
  </message>
  <message name="updateRoleResponse">
    <part name="parameters" element="policynet:updateRoleResponse"/>
  </message>
  <message name="deleteRoleRequest">
    <part name="parameters" element="policynet:deleteRoleRequest"/>
  </message>
  <message name="deleteRoleResponse">
    <part name="parameters" element="policynet:deleteRoleResponse"/>
  </message>
  <message name="createWimaxReportRequest">
    <part name="parameters" element="policynet:createWimaxReportRequest"/>
  </message>
  <message name="createWimaxReportResponse">
    <part name="parameters" element="policynet:createWimaxReportResponse"/>
  </message>
  <message name="searchManufacturingStatusRequest">
    <part name="parameters" element="policynet:searchManufacturingStatusRequest"/>
  </message>
  <message name="searchManufacturingStatusResponse">
    <part name="parameters" element="policynet:searchManufacturingStatusResponse"/>
  </message>
  <message name="omsDeviceStatusRequest">
    <part name="parameters" element="policynet:omsDeviceStatusRequest"/>
  </message>
  <message name="omsDeviceStatusResponse">
    <part name="parameters" element="policynet:omsDeviceStatusResponse"/>
  </message>
  <message name="searchTopicsRequest">
    <part name="parameters" element="policynet:searchTopicsRequest"/>
  </message>
  <message name="searchTopicsResponse">
    <part name="parameters" element="policynet:searchTopicsResponse"/>
  </message>
  <message name="searchConsumersRequest">
    <part name="parameters" element="policynet:searchConsumersRequest"/>
  </message>
  <message name="searchConsumersResponse">
    <part name="parameters" element="policynet:searchConsumersResponse"/>
  </message>
  <message name="subscribeTopicRequest">
    <part name="parameters" element="policynet:subscribeTopicRequest"/>
  </message>
  <message name="subscribeTopicResponse">
    <part name="parameters" element="policynet:subscribeTopicResponse"/>
  </message>
  <message name="unsubscribeTopicRequest">
    <part name="parameters" element="policynet:unsubscribeTopicRequest"/>
  </message>
  <message name="unsubscribeTopicResponse">
    <part name="parameters" element="policynet:unsubscribeTopicResponse"/>
  </message>
  <message name="uploadNwkTopologyRequest">
    <part name="parameters" element="policynet:uploadNwkTopologyRequest"/>
  </message>
  <message name="uploadNwkTopologyResponse">
    <part name="parameters" element="policynet:uploadNwkTopologyResponse"/>
  </message>
  <message name="consumeCommEvent">
    <part name="parameters" element="policynet:consumeCommEvent"/>
  </message>
  <message name="consumeCommEventResponse">
    <part name="parameters" element="policynet:consumeCommEventResponse"/>
  </message>
  <message name="createProvisioningCryptoKeyRequest">
    <part name="parameters" element="policynet:createProvisioningCryptoKeyRequest"/>
  </message>
  <message name="createProvisioningCryptoKeyResponse">
    <part name="parameters" element="policynet:createProvisioningCryptoKeyResponse"/>
  </message>
  <message name="getProvisioningCryptoKeyRequest">
    <part name="parameters" element="policynet:getProvisioningCryptoKeyRequest"/>
  </message>
  <message name="getProvisioningCryptoKeyResponse">
    <part name="parameters" element="policynet:getProvisioningCryptoKeyResponse"/>
  </message>
  <message name="createMfgCustomerRequest">
    <part name="parameters" element="policynet:createMfgCustomerRequest"/>
  </message>
  <message name="createMfgCustomerResponse">
    <part name="parameters" element="policynet:createMfgCustomerResponse"/>
  </message>
  <message name="updateMfgCustomerRequest">
    <part name="parameters" element="policynet:updateMfgCustomerRequest"/>
  </message>
  <message name="updateMfgCustomerResponse">
    <part name="parameters" element="policynet:updateMfgCustomerResponse"/>
  </message>
  <message name="deleteMfgCustomerRequest">
    <part name="parameters" element="policynet:deleteMfgCustomerRequest"/>
  </message>
  <message name="deleteMfgCustomerResponse">
    <part name="parameters" element="policynet:deleteMfgCustomerResponse"/>
  </message>
  <message name="searchMfgCustomerRequest">
    <part name="parameters" element="policynet:searchMfgCustomerRequest"/>
  </message>
  <message name="searchMfgCustomerResponse">
    <part name="parameters" element="policynet:searchMfgCustomerResponse"/>
  </message>
  <message name="createMfgProductRequest">
    <part name="parameters" element="policynet:createMfgProductRequest"/>
  </message>
  <message name="createMfgProductResponse">
    <part name="parameters" element="policynet:createMfgProductResponse"/>
  </message>
  <message name="updateMfgProductRequest">
    <part name="parameters" element="policynet:updateMfgProductRequest"/>
  </message>
  <message name="updateMfgProductResponse">
    <part name="parameters" element="policynet:updateMfgProductResponse"/>
  </message>
  <message name="deleteMfgProductRequest">
    <part name="parameters" element="policynet:deleteMfgProductRequest"/>
  </message>
  <message name="deleteMfgProductResponse">
    <part name="parameters" element="policynet:deleteMfgProductResponse"/>
  </message>
  <message name="searchMfgProductRequest">
    <part name="parameters" element="policynet:searchMfgProductRequest"/>
  </message>
  <message name="searchMfgProductResponse">
    <part name="parameters" element="policynet:searchMfgProductResponse"/>
  </message>
  <message name="startMfgProductLineRequest">
    <part name="parameters" element="policynet:startMfgProductLineRequest"/>
  </message>
  <message name="startMfgProductLineResponse">
    <part name="parameters" element="policynet:startMfgProductLineResponse"/>
  </message>
  <message name="stopMfgProductLineRequest">
    <part name="parameters" element="policynet:stopMfgProductLineRequest"/>
  </message>
  <message name="stopMfgProductLineResponse">
    <part name="parameters" element="policynet:stopMfgProductLineResponse"/>
  </message>
  <message name="createMfgShipFileRequest">
    <part name="parameters" element="policynet:createMfgShipFileRequest"/>
  </message>
  <message name="createMfgShipFileResponse">
    <part name="parameters" element="policynet:createMfgShipFileResponse"/>
  </message>
  <message name="searchMfgShipFileRequest">
    <part name="parameters" element="policynet:searchMfgShipFileRequest"/>
  </message>
  <message name="searchMfgShipFileResponse">
    <part name="parameters" element="policynet:searchMfgShipFileResponse"/>
  </message>
  <message name="downloadMfgShipFileRequest">
    <part name="parameters" element="policynet:downloadMfgShipFileRequest"/>
  </message>
  <message name="downloadMfgShipFileResponse">
    <part name="parameters" element="policynet:downloadMfgShipFileResponse"/>
  </message>
  <message name="searchMfgProductionRunRequest">
    <part name="parameters" element="policynet:searchMfgProductionRunRequest"/>
  </message>
  <message name="searchMfgProductionRunResponse">
    <part name="parameters" element="policynet:searchMfgProductionRunResponse"/>
  </message>
  <message name="createNetworkEntryReportRequest">
    <part name="parameters" element="policynet:createNetworkEntryReportRequest"/>
  </message>
  <message name="createNetworkEntryReportResponse">
    <part name="parameters" element="policynet:createNetworkEntryReportResponse"/>
  </message>
  <message name="createFailedNetworkEntryReportRequest">
    <part name="parameters" element="policynet:createFailedNetworkEntryReportRequest"/>
  </message>
  <message name="createFailedNetworkEntryReportResponse">
    <part name="parameters" element="policynet:createFailedNetworkEntryReportResponse"/>
  </message>
  <message name="getEnergyStatusTrendRequest">
    <part name="parameters" element="policynet:getEnergyStatusTrendRequest"/>
  </message>
  <message name="getEnergyStatusTrendResponse">
    <part name="parameters" element="policynet:getEnergyStatusTrendResponse"/>
  </message>
  <message name="getCommStatusTrendRequest">
    <part name="parameters" element="policynet:getCommStatusTrendRequest"/>
  </message>
  <message name="getCommStatusTrendResponse">
    <part name="parameters" element="policynet:getCommStatusTrendResponse"/>
  </message>
  <message name="getDeviceErrorTrendRequest">
    <part name="parameters" element="policynet:getDeviceErrorTrendRequest"/>
  </message>
  <message name="getDeviceErrorTrendResponse">
    <part name="parameters" element="policynet:getDeviceErrorTrendResponse"/>
  </message>
  <message name="getPolicySuccessTrendRequest">
    <part name="parameters" element="policynet:getPolicySuccessTrendRequest"/>
  </message>
  <message name="getPolicySuccessTrendResponse">
    <part name="parameters" element="policynet:getPolicySuccessTrendResponse"/>
  </message>
  <message name="getAllDeviceTrendsRequest">
    <part name="parameters" element="policynet:getAllDeviceTrendsRequest"/>
  </message>
  <message name="getAllDeviceTrendsResponse">
    <part name="parameters" element="policynet:getAllDeviceTrendsResponse"/>
  </message>
  <message name="getApproversListRequest">
    <part name="parameters" element="policynet:getApproversListRequest"/>
  </message>
  <message name="getApproversListResponse">
    <part name="parameters" element="policynet:getApproversListResponse"/>
  </message>
  <message name="requestDeployApprovalRequest">
    <part name="parameters" element="policynet:requestDeployApprovalRequest"/>
  </message>
  <message name="requestDeployApprovalResponse">
    <part name="parameters" element="policynet:requestDeployApprovalResponse"/>
  </message>
  <message name="cancelDeployApprovalRequest">
    <part name="parameters" element="policynet:cancelDeployApprovalRequest"/>
  </message>
  <message name="cancelDeployApprovalResponse">
    <part name="parameters" element="policynet:cancelDeployApprovalResponse"/>
  </message>
  <message name="rejectDeployApprovalRequest">
    <part name="parameters" element="policynet:rejectDeployApprovalRequest"/>
  </message>
  <message name="rejectDeployApprovalResponse">
    <part name="parameters" element="policynet:rejectDeployApprovalResponse"/>
  </message>
  <message name="approveDeployRequest">
    <part name="parameters" element="policynet:approveDeployRequest"/>
  </message>
  <message name="approveDeployResponse">
    <part name="parameters" element="policynet:approveDeployResponse"/>
  </message>
  <message name="deactivatePolicyRequest">
    <part name="parameters" element="policynet:deactivatePolicyRequest"/>
  </message>
  <message name="deactivatePolicyResponse">
    <part name="parameters" element="policynet:deactivatePolicyResponse"/>
  </message>
  <message name="getDualAuthPoliciesSettingsRequest">
    <part name="parameters" element="policynet:getDualAuthPoliciesSettingsRequest"/>
  </message>
  <message name="getDualAuthPoliciesSettingsResponse">
    <part name="parameters" element="policynet:getDualAuthPoliciesSettingsResponse"/>
  </message>
  <message name="setDualAuthPoliciesSettingsRequest">
    <part name="parameters" element="policynet:setDualAuthPoliciesSettingsRequest"/>
  </message>
  <message name="setDualAuthPoliciesSettingsResponse">
    <part name="parameters" element="policynet:setDualAuthPoliciesSettingsResponse"/>
  </message>
  <message name="createPlannedOutageRequest">
    <part name="parameters" element="policynet:createPlannedOutageRequest"/>
  </message>
  <message name="createPlannedOutageResponse">
    <part name="parameters" element="policynet:createPlannedOutageResponse"/>
  </message>
  <message name="updatePlannedOutageRequest">
    <part name="parameters" element="policynet:updatePlannedOutageRequest"/>
  </message>
  <message name="updatePlannedOutageResponse">
    <part name="parameters" element="policynet:updatePlannedOutageResponse"/>
  </message>
  <message name="deletePlannedOutageRequest">
    <part name="parameters" element="policynet:deletePlannedOutageRequest"/>
  </message>
  <message name="deletePlannedOutageResponse">
    <part name="parameters" element="policynet:deletePlannedOutageResponse"/>
  </message>
  <message name="searchPlannedOutagesRequest">
    <part name="parameters" element="policynet:searchPlannedOutagesRequest"/>
  </message>
  <message name="searchPlannedOutagesResponse">
    <part name="parameters" element="policynet:searchPlannedOutagesResponse"/>
  </message>
  <message name="addPanLabelRequest">
    <part name="parameters" element="policynet:addPanLabelRequest"/>
  </message>
  <message name="addPanLabelResponse">
    <part name="parameters" element="policynet:addPanLabelResponse"/>
  </message>
  <message name="removeDeviceFromPanRequest">
    <part name="parameters" element="policynet:removeDeviceFromPanRequest"/>
  </message>
  <message name="removeDeviceFromPanResponse">
    <part name="parameters" element="policynet:removeDeviceFromPanResponse"/>
  </message>
  <message name="updatePanLabelRequest">
    <part name="parameters" element="policynet:updatePanLabelRequest"/>
  </message>
  <message name="updatePanLabelResponse">
    <part name="parameters" element="policynet:updatePanLabelResponse"/>
  </message>
  <message name="deletePanLabelRequest">
    <part name="parameters" element="policynet:deletePanLabelRequest"/>
  </message>
  <message name="deletePanLabelResponse">
    <part name="parameters" element="policynet:deletePanLabelResponse"/>
  </message>
  <message name="getPanLabelsRequest">
    <part name="parameters" element="policynet:getPanLabelsRequest"/>
  </message>
  <message name="getPanLabelsResponse">
    <part name="parameters" element="policynet:getPanLabelsResponse"/>
  </message>
  <message name="getSystemTime">
    <part name="parameters" element="policynet:getSystemTime"/>
  </message>
  <message name="getSystemTimeResponse">
    <part name="parameters" element="policynet:getSystemTimeResponse"/>
  </message>
  <message name="setDataRetentionSettings">
    <part name="parameters" element="policynet:setDataRetentionSettings"/>
  </message>
  <message name="setDataRetentionSettingsResponse">
    <part name="parameters" element="policynet:setDataRetentionSettingsResponse"/>
  </message>
  <message name="getDataRetentionSettings">
    <part name="parameters" element="policynet:getDataRetentionSettings"/>
  </message>
  <message name="getDataRetentionSettingsResponse">
    <part name="parameters" element="policynet:getDataRetentionSettingsResponse"/>
  </message>
  <message name="setOpstateRestrictionSettingsRequest">
    <part name="parameters" element="policynet:setOpstateRestrictionSettingsRequest"/>
  </message>
  <message name="setOpstateRestrictionSettingsResponse">
    <part name="parameters" element="policynet:setOpstateRestrictionSettingsResponse"/>
  </message>
  <message name="getOpstateRestrictionSettingsRequest">
    <part name="parameters" element="policynet:getOpstateRestrictionSettingsRequest"/>
  </message>
  <message name="getOpstateRestrictionSettingsResponse">
    <part name="parameters" element="policynet:getOpstateRestrictionSettingsResponse"/>
  </message>
  <message name="setOffPeakDownloadWindowSettingsRequest">
    <part name="parameters" element="policynet:setOffPeakDownloadWindowSettingsRequest"/>
  </message>
  <message name="setOffPeakDownloadWindowSettingsResponse">
    <part name="parameters" element="policynet:setOffPeakDownloadWindowSettingsResponse"/>
  </message>
  <message name="getOffPeakDownloadWindowSettingsRequest">
    <part name="parameters" element="policynet:getOffPeakDownloadWindowSettingsRequest"/>
  </message>
  <message name="getOffPeakDownloadWindowSettingsResponse">
    <part name="parameters" element="policynet:getOffPeakDownloadWindowSettingsResponse"/>
  </message>
  <message name="getDailyReportingTimezoneSettingRequest">
    <part name="parameters" element="policynet:getDailyReportingTimezoneSettingRequest"/>
  </message>
  <message name="getDailyReportingTimezoneSettingResponse">
    <part name="parameters" element="policynet:getDailyReportingTimezoneSettingResponse"/>
  </message>
  <message name="setDailyReportingTimezoneSettingRequest">
    <part name="parameters" element="policynet:setDailyReportingTimezoneSettingRequest"/>
  </message>
  <message name="setDailyReportingTimezoneSettingResponse">
    <part name="parameters" element="policynet:setDailyReportingTimezoneSettingResponse"/>
  </message>
  <message name="getDemandDataStreamSettingsRequest">
    <part name="parameters" element="policynet:getDemandDataStreamSettingsRequest"/>
  </message>
  <message name="getDemandDataStreamSettingsResponse">
    <part name="parameters" element="policynet:getDemandDataStreamSettingsResponse"/>
  </message>
  <message name="setDemandDataStreamSettingsRequest">
    <part name="parameters" element="policynet:setDemandDataStreamSettingsRequest"/>
  </message>
  <message name="setDemandDataStreamSettingsResponse">
    <part name="parameters" element="policynet:setDemandDataStreamSettingsResponse"/>
  </message>
  <message name="getLdapAuthenticationSettingsRequest">
    <part name="parameters" element="policynet:getLdapAuthenticationSettingsRequest"/>
  </message>
  <message name="getLdapAuthenticationSettingsResponse">
    <part name="parameters" element="policynet:getLdapAuthenticationSettingsResponse"/>
  </message>
  <message name="setLdapAuthenticationSettingsRequest">
    <part name="parameters" element="policynet:setLdapAuthenticationSettingsRequest"/>
  </message>
  <message name="setLdapAuthenticationSettingsResponse">
    <part name="parameters" element="policynet:setLdapAuthenticationSettingsResponse"/>
  </message>
  <message name="generateSoapFaultRequest">
    <part name="parameters" element="policynet:generateSoapFaultRequest"/>
  </message>
  <message name="emptyResponse">
    <part name="parameters" element="policynet:emptyResponse"/>
  </message>
  <message name="overrideDredControlRequest">
    <part name="parameters" element="policynet:overrideDredControlRequest"/>
  </message>
  <message name="overrideDredControlResponse">
    <part name="parameters" element="policynet:overrideDredControlResponse"/>
  </message>
  <message name="searchDredsRequest">
    <part name="parameters" element="policynet:searchDredsRequest"/>
  </message>
  <message name="searchDredsResponse">
    <part name="parameters" element="policynet:searchDredsResponse"/>
  </message>
  <message name="getDredLoadShedDataRequest">
    <part name="parameters" element="policynet:getDredLoadShedDataRequest"/>
  </message>
  <message name="getDredLoadShedDataResponse">
    <part name="parameters" element="policynet:getDredLoadShedDataResponse"/>
  </message>
  <message name="getCardSwapSettingRequest">
    <part name="parameters" element="policynet:getCardSwapSettingRequest"/>
  </message>
  <message name="getCardSwapSettingResponse">
    <part name="parameters" element="policynet:getCardSwapSettingResponse"/>
  </message>
  <message name="setCardSwapSettingRequest">
    <part name="parameters" element="policynet:setCardSwapSettingRequest"/>
  </message>
  <message name="setCardSwapSettingResponse">
    <part name="parameters" element="policynet:setCardSwapSettingResponse"/>
  </message>
  <message name="getRetailersRequest">
    <part name="parameters" element="policynet:getRetailersRequest"/>
  </message>
  <message name="getRetailersResponse">
    <part name="parameters" element="policynet:getRetailersResponse"/>
  </message>
  <message name="addRetailerRequest">
    <part name="parameters" element="policynet:addRetailerRequest"/>
  </message>
  <message name="addRetailerResponse">
    <part name="parameters" element="policynet:addRetailerResponse"/>
  </message>
  <message name="updateRetailerRequest">
    <part name="parameters" element="policynet:updateRetailerRequest"/>
  </message>
  <message name="updateRetailerResponse">
    <part name="parameters" element="policynet:updateRetailerResponse"/>
  </message>
  <message name="deleteRetailerRequest">
    <part name="parameters" element="policynet:deleteRetailerRequest"/>
  </message>
  <message name="deleteRetailerResponse">
    <part name="parameters" element="policynet:deleteRetailerResponse"/>
  </message>
  <message name="getDistributorsRequest">
    <part name="parameters" element="policynet:getDistributorsRequest"/>
  </message>
  <message name="getDistributorsResponse">
    <part name="parameters" element="policynet:getDistributorsResponse"/>
  </message>
  <message name="addDistributorRequest">
    <part name="parameters" element="policynet:addDistributorRequest"/>
  </message>
  <message name="addDistributorResponse">
    <part name="parameters" element="policynet:addDistributorResponse"/>
  </message>
  <message name="updateDistributorRequest">
    <part name="parameters" element="policynet:updateDistributorRequest"/>
  </message>
  <message name="updateDistributorResponse">
    <part name="parameters" element="policynet:updateDistributorResponse"/>
  </message>
  <message name="deleteDistributorRequest">
    <part name="parameters" element="policynet:deleteDistributorRequest"/>
  </message>
  <message name="deleteDistributorResponse">
    <part name="parameters" element="policynet:deleteDistributorResponse"/>
  </message>
  <message name="refreshDeviceStatusRequest">
    <part name="parameters" element="policynet:refreshDeviceStatusRequest"/>
  </message>
  <message name="refreshDeviceStatusResponse">
    <part name="parameters" element="policynet:refreshDeviceStatusResponse"/>
  </message>
  <message name="purgeDeviceRequest">
    <part name="parameters" element="policynet:purgeDeviceRequest"/>
  </message>
  <message name="purgeDeviceResponse">
    <part name="parameters" element="policynet:purgeDeviceResponse"/>
  </message>
  <message name="createBaseStationsRequest">
    <part name="parameters" element="policynet:createBaseStationsRequest"/>
  </message>
  <message name="createBaseStationsResponse">
    <part name="parameters" element="policynet:createBaseStationsResponse"/>
  </message>
  <message name="searchCustomEventTopicsRequest">
    <part name="parameters" element="policynet:searchCustomEventTopicsRequest"/>
  </message>
  <message name="SearchCustomEventTopicsResponse">
    <part name="parameters" element="policynet:SearchCustomEventTopicsResponse"/>
  </message>
  <message name="createCustomEventTopicRequest">
    <part name="parameters" element="policynet:createCustomEventTopicRequest"/>
  </message>
  <message name="createCustomEventTopicResponse">
    <part name="parameters" element="policynet:createCustomEventTopicResponse"/>
  </message>
  <message name="deleteCustomEventTopicRequest">
    <part name="parameters" element="policynet:deleteCustomEventTopicRequest"/>
  </message>
  <message name="deleteCustomEventTopicResponse">
    <part name="parameters" element="policynet:deleteCustomEventTopicResponse"/>
  </message>
  <message name="searchSlaRequest">
    <part name="parameters" element="policynet:searchSlaRequest"/>
  </message>
  <message name="SearchSlaResponse">
    <part name="parameters" element="policynet:SearchSlaResponse"/>
  </message>
  <message name="createSlaRequest">
    <part name="parameters" element="policynet:createSlaRequest"/>
  </message>
  <message name="createSlaResponse">
    <part name="parameters" element="policynet:createSlaResponse"/>
  </message>
  <message name="updateSlaRequest">
    <part name="parameters" element="policynet:updateSlaRequest"/>
  </message>
  <message name="updateSlaResponse">
    <part name="parameters" element="policynet:updateSlaResponse"/>
  </message>
  <message name="deleteSlaRequest">
    <part name="parameters" element="policynet:deleteSlaRequest"/>
  </message>
  <message name="deleteSlaResponse">
    <part name="parameters" element="policynet:deleteSlaResponse"/>
  </message>
  <message name="createSlaReportRequest">
    <part name="parameters" element="policynet:createSlaReportRequest"/>
  </message>
  <message name="createSlaReportResponse">
    <part name="parameters" element="policynet:createSlaReportResponse"/>
  </message>
  <message name="setOutageProbeSettingsRequest">
    <part name="parameters" element="policynet:setOutageProbeSettingsRequest"/>
  </message>
  <message name="setOutageProbeSettingsResponse">
    <part name="parameters" element="policynet:setOutageProbeSettingsResponse"/>
  </message>
  <message name="getOutageProbeSettingsRequest">
    <part name="parameters" element="policynet:getOutageProbeSettingsRequest"/>
  </message>
  <message name="getOutageProbeSettingsResponse">
    <part name="parameters" element="policynet:getOutageProbeSettingsResponse"/>
  </message>
  <message name="setDeployOnNextConnectRequest">
    <part name="parameters" element="policynet:setDeployOnNextConnectRequest"/>
  </message>
  <message name="setDeployOnNextConnectResponse">
    <part name="parameters" element="policynet:setDeployOnNextConnectResponse"/>
  </message>
  <message name="createCustomerRequest">
    <part name="parameters" element="policynet:createCustomerRequest"/>
  </message>
  <message name="createCustomerResponse">
    <part name="parameters" element="policynet:createCustomerResponse"/>
  </message>
  <message name="updateCustomerRequest">
    <part name="parameters" element="policynet:updateCustomerRequest"/>
  </message>
  <message name="updateCustomerResponse">
    <part name="parameters" element="policynet:updateCustomerResponse"/>
  </message>
  <message name="searchCustomersRequest">
    <part name="parameters" element="policynet:searchCustomersRequest"/>
  </message>
  <message name="searchCustomersResponse">
    <part name="parameters" element="policynet:searchCustomersResponse"/>
  </message>
  <message name="deleteCustomerRequest">
    <part name="parameters" element="policynet:deleteCustomerRequest"/>
  </message>
  <message name="deleteCustomerResponse">
    <part name="parameters" element="policynet:deleteCustomerResponse"/>
  </message>
  <message name="suspendCustomerRequest">
    <part name="parameters" element="policynet:suspendCustomerRequest"/>
  </message>
  <message name="suspendCustomerResponse">
    <part name="parameters" element="policynet:suspendCustomerResponse"/>
  </message>
  <message name="cancelCustomerRequest">
    <part name="parameters" element="policynet:cancelCustomerRequest"/>
  </message>
  <message name="cancelCustomerResponse">
    <part name="parameters" element="policynet:cancelCustomerResponse"/>
  </message>
  <message name="reactivateCustomerRequest">
    <part name="parameters" element="policynet:reactivateCustomerRequest"/>
  </message>
  <message name="reactivateCustomerResponse">
    <part name="parameters" element="policynet:reactivateCustomerResponse"/>
  </message>
  <message name="getMeterOptionsRequest">
    <part name="parameters" element="policynet:getMeterOptionsRequest"/>
  </message>
  <message name="getMeterOptionsResponse">
    <part name="parameters" element="policynet:getMeterOptionsResponse"/>
  </message>
  <message name="createMeterOrderRequest">
    <part name="parameters" element="policynet:createMeterOrderRequest"/>
  </message>
  <message name="createMeterOrderResponse">
    <part name="parameters" element="policynet:createMeterOrderResponse"/>
  </message>
  <message name="searchMeterOrdersRequest">
    <part name="parameters" element="policynet:searchMeterOrdersRequest"/>
  </message>
  <message name="searchMeterOrdersResponse">
    <part name="parameters" element="policynet:searchMeterOrdersResponse"/>
  </message>
  <message name="getStartingMeterIdRequest">
    <part name="parameters" element="policynet:getStartingMeterIdRequest"/>
  </message>
  <message name="getStartingMeterIdResponse">
    <part name="parameters" element="policynet:getStartingMeterIdResponse"/>
  </message>
  <message name="recalculateSystemReliablityRequest">
    <part name="parameters" element="policynet:recalculateSystemReliablityRequest"/>
  </message>
  <message name="recalculateSystemReliablityResponse">
    <part name="parameters" element="policynet:recalculateSystemReliablityResponse"/>
  </message>
  <message name="createMeterReaderPasswordReportRequest">
    <part name="parameters" element="policynet:createMeterReaderPasswordReportRequest"/>
  </message>
  <message name="resetUserPasswordRequest">
    <part name="parameters" element="policynet:resetUserPasswordRequest"/>
  </message>
  <message name="resetUserPasswordResponse">
    <part name="parameters" element="policynet:resetUserPasswordResponse"/>
  </message>
  <message name="searchConsumerTypesRequest">
    <part name="parameters" element="policynet:searchConsumerTypesRequest"/>
  </message>
  <message name="searchConsumerTypesResponse">
    <part name="parameters" element="policynet:searchConsumerTypesResponse"/>
  </message>
  <message name="searchMeterOrderTemplatesRequest">
    <part name="parameters" element="policynet:searchMeterOrderTemplatesRequest"/>
  </message>
  <message name="searchMeterOrderTemplatesResponse">
    <part name="parameters" element="policynet:searchMeterOrderTemplatesResponse"/>
  </message>
  <message name="getCustomerDetailsRequest">
    <part name="parameters" element="policynet:getCustomerDetailsRequest"/>
  </message>
  <message name="getCustomerDetailsResponse">
    <part name="parameters" element="policynet:getCustomerDetailsResponse"/>
  </message>
  <message name="getSecurityQuestionsRequest">
    <part name="parameters" element="policynet:getSecurityQuestionsRequest"/>
  </message>
  <message name="GetSecurityQuestionsResponse">
    <part name="parameters" element="policynet:GetSecurityQuestionsResponse"/>
  </message>
  <message name="verifyUserRequest">
    <part name="parameters" element="policynet:verifyUserRequest"/>
  </message>
  <message name="verifyUserResponse">
    <part name="parameters" element="policynet:verifyUserResponse"/>
  </message>
  <message name="searchEmailAddressesRequest">
    <part name="parameters" element="policynet:searchEmailAddressesRequest"/>
  </message>
  <message name="searchEmailAddressesResponse">
    <part name="parameters" element="policynet:searchEmailAddressesResponse"/>
  </message>
  <message name="searchEmailToSmsAddressesRequest">
    <part name="parameters" element="policynet:searchEmailToSmsAddressesRequest"/>
  </message>
  <message name="searchEmailToSmsAddressesResponse">
    <part name="parameters" element="policynet:searchEmailToSmsAddressesResponse"/>
  </message>
  <message name="enableUserNotificationsRequest">
    <part name="parameters" element="policynet:enableUserNotificationsRequest"/>
  </message>
  <message name="enableUserNotificationsResponse">
    <part name="parameters" element="policynet:enableUserNotificationsResponse"/>
  </message>
  <message name="disableUserNotificationsRequest">
    <part name="parameters" element="policynet:disableUserNotificationsRequest"/>
  </message>
  <message name="disableUserNotificationsResponse">
    <part name="parameters" element="policynet:disableUserNotificationsResponse"/>
  </message>
  <message name="updateConsumerRequest">
    <part name="parameters" element="policynet:updateConsumerRequest"/>
  </message>
  <message name="updateConsumerResponse">
    <part name="parameters" element="policynet:updateConsumerResponse"/>
  </message>
  <message name="deleteConsumerRequest">
    <part name="parameters" element="policynet:deleteConsumerRequest"/>
  </message>
  <message name="deleteConsumerResponse">
    <part name="parameters" element="policynet:deleteConsumerResponse"/>
  </message>
  <message name="createWaterMeterStatsReportRequest">
    <part name="parameters" element="policynet:createWaterMeterStatsReportRequest"/>
  </message>
  <message name="createWaterMeterStatsReportResponse">
    <part name="parameters" element="policynet:createWaterMeterStatsReportResponse"/>
  </message>
  <message name="createGasMeterStatsReportRequest">
    <part name="parameters" element="policynet:createGasMeterStatsReportRequest"/>
  </message>
  <message name="createGasMeterStatsReportResponse">
    <part name="parameters" element="policynet:createGasMeterStatsReportResponse"/>
  </message>
  <message name="createWaterMeterAlertsReportRequest">
    <part name="parameters" element="policynet:createWaterMeterAlertsReportRequest"/>
  </message>
  <message name="createWaterMeterAlertsReportResponse">
    <part name="parameters" element="policynet:createWaterMeterAlertsReportResponse"/>
  </message>
  <message name="getAverageCoordinatesRequest">
    <part name="parameters" element="policynet:getAverageCoordinatesRequest"/>
  </message>
  <message name="getAverageCoordinatesResponse">
    <part name="parameters" element="policynet:getAverageCoordinatesResponse"/>
  </message>
  <message name="migrateSmccsRequest">
    <part name="parameters" element="policynet:migrateSmccsRequest"/>
  </message>
  <message name="migrateSmccsResponse">
    <part name="parameters" element="policynet:migrateSmccsResponse"/>
  </message>
  <message name="searchMeterTypesRequest">
    <part name="parameters" element="policynet:searchMeterTypesRequest"/>
  </message>
  <message name="searchMeterTypesResponse">
    <part name="parameters" element="policynet:searchMeterTypesResponse"/>
  </message>
  <message name="searchMapSubstationsRequest">
    <part name="parameters" element="policynet:searchMapSubstationsRequest"/>
  </message>
  <message name="searchMapSubstationsResponse">
    <part name="parameters" element="policynet:searchMapSubstationsResponse"/>
  </message>
  <message name="searchMapDevicesRequest">
    <part name="parameters" element="policynet:searchMapDevicesRequest"/>
  </message>
  <message name="searchMapDevicesResponse">
    <part name="parameters" element="policynet:searchMapDevicesResponse"/>
  </message>
  <message name="getMapFiltersRequest">
    <part name="parameters" element="policynet:getMapFiltersRequest"/>
  </message>
  <message name="getMapFiltersResponse">
    <part name="parameters" element="policynet:getMapFiltersResponse"/>
  </message>
  <message name="getBandSettingsRequest">
    <part name="parameters" element="policynet:getBandSettingsRequest"/>
  </message>
  <message name="getBandSettingsResponse">
    <part name="parameters" element="policynet:getBandSettingsResponse"/>
  </message>
  <message name="setBandSettingsRequest">
    <part name="parameters" element="policynet:setBandSettingsRequest"/>
  </message>
  <message name="setBandSettingsResponse">
    <part name="parameters" element="policynet:setBandSettingsResponse"/>
  </message>
  <message name="searchMapWaterDistrictsRequest">
    <part name="parameters" element="policynet:searchMapWaterDistrictsRequest"/>
  </message>
  <message name="searchMapWaterDistrictsResponse">
    <part name="parameters" element="policynet:searchMapWaterDistrictsResponse"/>
  </message>
  <message name="createMapEventReportRequest">
    <part name="parameters" element="policynet:createMapEventReportRequest"/>
  </message>
  <message name="createMapEventReportResponse">
    <part name="parameters" element="policynet:createMapEventReportResponse"/>
  </message>
  <message name="createMapWaterReadReportRequest">
    <part name="parameters" element="policynet:createMapWaterReadReportRequest"/>
  </message>
  <message name="createMapWaterReadReportResponse">
    <part name="parameters" element="policynet:createMapWaterReadReportResponse"/>
  </message>
  <message name="createHanDevicesRequest">
    <part name="parameters" element="policynet:createHanDevicesRequest"/>
  </message>
  <message name="createHanDevicesResponse">
    <part name="parameters" element="policynet:createHanDevicesResponse"/>
  </message>
  <message name="getUserInfoRequest">
    <part name="parameters" element="policynet:getUserInfoRequest"/>
  </message>
  <message name="getUserInfoResponse">
    <part name="parameters" element="policynet:getUserInfoResponse"/>
  </message>
  <message name="getPolicyBillingCycleDates">
    <part name="parameters" element="policynet:getPolicyBillingCycleDates"/>
  </message>
  <message name="BillingCycleCalendar">
    <part name="parameters" element="policynet:BillingCycleCalendar"/>
  </message>
  <message name="updateDeviceRequest">
    <part name="parameters" element="policynet:updateDeviceRequest"/>
  </message>
  <message name="updateDeviceResponse">
    <part name="parameters" element="policynet:updateDeviceResponse"/>
  </message>
  <message name="searchMeterCommsTypesRequest">
    <part name="parameters" element="policynet:searchMeterCommsTypesRequest"/>
  </message>
  <message name="searchMeterCommsTypesResponse">
    <part name="parameters" element="policynet:searchMeterCommsTypesResponse"/>
  </message>
  <message name="searchMeterSubscriptionsRequest">
    <part name="parameters" element="policynet:searchMeterSubscriptionsRequest"/>
  </message>
  <message name="searchMeterSubscriptionsResponse">
    <part name="parameters" element="policynet:searchMeterSubscriptionsResponse"/>
  </message>
  <message name="createMeterSubscriptionRequest">
    <part name="parameters" element="policynet:createMeterSubscriptionRequest"/>
  </message>
  <message name="createMeterSubscriptionResponse">
    <part name="parameters" element="policynet:createMeterSubscriptionResponse"/>
  </message>
  <message name="searchVendorsRequest">
    <part name="parameters" element="policynet:searchVendorsRequest"/>
  </message>
  <message name="searchVendorsResponse">
    <part name="parameters" element="policynet:searchVendorsResponse"/>
  </message>
  <message name="getProvisioningDefaultsRequest">
    <part name="parameters" element="policynet:getProvisioningDefaultsRequest"/>
  </message>
  <message name="getProvisioningDefaultsResponse">
    <part name="parameters" element="policynet:getProvisioningDefaultsResponse"/>
  </message>
  <message name="setProvisioningDefaultsRequest">
    <part name="parameters" element="policynet:setProvisioningDefaultsRequest"/>
  </message>
  <message name="setProvisioningDefaultsResponse">
    <part name="parameters" element="policynet:setProvisioningDefaultsResponse"/>
  </message>
  <message name="getAECredentialsRequest">
    <part name="parameters" element="policynet:getAECredentialsRequest"/>
  </message>
  <message name="getAECredentialsResponse">
    <part name="parameters" element="policynet:getAECredentialsResponse"/>
  </message>
  <message name="setAECredentialsRequest">
    <part name="parameters" element="policynet:setAECredentialsRequest"/>
  </message>
  <message name="setAECredentialsResponse">
    <part name="parameters" element="policynet:setAECredentialsResponse"/>
  </message>
  <message name="getExportColumnsRequest">
    <part name="parameters" element="policynet:getExportColumnsRequest"/>
  </message>
  <message name="getExportColumnsResponse">
    <part name="parameters" element="policynet:getExportColumnsResponse"/>
  </message>
  <message name="searchDataExportTargetsRequest">
    <part name="parameters" element="policynet:searchDataExportTargetsRequest"/>
  </message>
  <message name="searchDataExportTargetsResponse">
    <part name="parameters" element="policynet:searchDataExportTargetsResponse"/>
  </message>
  <message name="searchDataExportTopicsRequest">
    <part name="parameters" element="policynet:searchDataExportTopicsRequest"/>
  </message>
  <message name="SearchDataExportTopicsResponse">
    <part name="parameters" element="policynet:SearchDataExportTopicsResponse"/>
  </message>
  <message name="createDataExportTopicRequest">
    <part name="parameters" element="policynet:createDataExportTopicRequest"/>
  </message>
  <message name="createDataExportTopicResponse">
    <part name="parameters" element="policynet:createDataExportTopicResponse"/>
  </message>
  <message name="deleteDataExportTopicRequest">
    <part name="parameters" element="policynet:deleteDataExportTopicRequest"/>
  </message>
  <message name="deleteDataExportTopicResponse">
    <part name="parameters" element="policynet:deleteDataExportTopicResponse"/>
  </message>
  <message name="createDataExportReportRequest">
    <part name="parameters" element="policynet:createDataExportReportRequest"/>
  </message>
  <message name="createDataExportReportResponse">
    <part name="parameters" element="policynet:createDataExportReportResponse"/>
  </message>
  <message name="swapServicePointsRequest">
    <part name="parameters" element="policynet:swapServicePointsRequest"/>
  </message>
  <message name="swapServicePointsResponse">
    <part name="parameters" element="policynet:swapServicePointsResponse"/>
  </message>
  <message name="assignVendorRequest">
    <part name="parameters" element="policynet:assignVendorRequest"/>
  </message>
  <message name="assignVendorResponse">
    <part name="parameters" element="policynet:assignVendorResponse"/>
  </message>
  <message name="getMmcInfoRequest">
    <part name="parameters" element="policynet:getMmcInfoRequest"/>
  </message>
  <message name="getMmcInfoResponse">
    <part name="parameters" element="policynet:getMmcInfoResponse"/>
  </message>
  <message name="getAuthConfigRequest">
    <part name="parameters" element="policynet:getAuthConfigRequest"/>
  </message>
  <message name="getAuthConfigResponse">
    <part name="parameters" element="policynet:getAuthConfigResponse"/>
  </message>
  <message name="setAuthConfigRequest">
    <part name="parameters" element="policynet:setAuthConfigRequest"/>
  </message>
  <message name="setAuthConfigResponse">
    <part name="parameters" element="policynet:setAuthConfigResponse"/>
  </message>
  <message name="enableUserMultifactorAuthRequest">
    <part name="parameters" element="policynet:enableUserMultifactorAuthRequest"/>
  </message>
  <message name="enableUserMultifactorAuthResponse">
    <part name="parameters" element="policynet:enableUserMultifactorAuthResponse"/>
  </message>
  <message name="disableUserMultifactorAuthRequest">
    <part name="parameters" element="policynet:disableUserMultifactorAuthRequest"/>
  </message>
  <message name="disableUserMultifactorAuthResponse">
    <part name="parameters" element="policynet:disableUserMultifactorAuthResponse"/>
  </message>
  <message name="createDemandReadReportRequest">
    <part name="parameters" element="policynet:createDemandReadReportRequest"/>
  </message>
  <message name="createDemandReadReportResponse">
    <part name="parameters" element="policynet:createDemandReadReportResponse"/>
  </message>
  <message name="searchDevicesMspRequest">
    <part name="parameters" element="policynet:searchDevicesMspRequest"/>
  </message>
  <message name="searchDevicesMspResponse">
    <part name="parameters" element="policynet:searchDevicesMspResponse"/>
  </message>
  <message name="searchTransportTypesRequest">
    <part name="parameters" element="policynet:searchTransportTypesRequest"/>
  </message>
  <message name="searchTransportTypesResponse">
    <part name="parameters" element="policynet:searchTransportTypesResponse"/>
  </message>
  <message name="getUserEventsRequest">
    <part name="parameters" element="policynet:getUserEventsRequest"/>
  </message>
  <message name="getUserEventsResponse">
    <part name="parameters" element="policynet:getUserEventsResponse"/>
  </message>
  <message name="searchConsumerKeysRequest">
    <part name="parameters" element="policynet:searchConsumerKeysRequest"/>
  </message>
  <message name="searchConsumerKeysResponse">
    <part name="parameters" element="policynet:searchConsumerKeysResponse"/>
  </message>
  <message name="createScmDailyReportRequest">
    <part name="parameters" element="policynet:createScmDailyReportRequest"/>
  </message>
  <message name="createScmDailyReportResponse">
    <part name="parameters" element="policynet:createScmDailyReportResponse"/>
  </message>
  <message name="createScmCycleReportRequest">
    <part name="parameters" element="policynet:createScmCycleReportRequest"/>
  </message>
  <message name="createScmCycleReportResponse">
    <part name="parameters" element="policynet:createScmCycleReportResponse"/>
  </message>
  <message name="createScmTransactionReportRequest">
    <part name="parameters" element="policynet:createScmTransactionReportRequest"/>
  </message>
  <message name="createScmTransactionReportResponse">
    <part name="parameters" element="policynet:createScmTransactionReportResponse"/>
  </message>
  <message name="createAosShipfileRequest">
    <part name="parameters" element="policynet:createAosShipfileRequest"/>
  </message>
  <message name="createAosShipfileResponse">
    <part name="parameters" element="policynet:createAosShipfileResponse"/>
  </message>
  <message name="createBlinkReportRequest">
    <part name="parameters" element="policynet:createBlinkReportRequest"/>
  </message>
  <message name="createBlinkReportResponse">
    <part name="parameters" element="policynet:createBlinkReportResponse"/>
  </message>
  <message name="createScmLicenseReportRequest">
    <part name="parameters" element="policynet:createScmLicenseReportRequest"/>
  </message>
  <message name="createScmLicenseReportResponse">
    <part name="parameters" element="policynet:createScmLicenseReportResponse"/>
  </message>
  <message name="createScmYearlyReportRequest">
    <part name="parameters" element="policynet:createScmYearlyReportRequest"/>
  </message>
  <message name="createScmYearlyReportResponse">
    <part name="parameters" element="policynet:createScmYearlyReportResponse"/>
  </message>
  <message name="createScmMonthlyReportRequest">
    <part name="parameters" element="policynet:createScmMonthlyReportRequest"/>
  </message>
  <message name="createScmMonthlyReportResponse">
    <part name="parameters" element="policynet:createScmMonthlyReportResponse"/>
  </message>
  <message name="createAclaraMarriageFileRequest">
    <part name="parameters" element="policynet:createAclaraMarriageFileRequest"/>
  </message>
  <message name="createAclaraMarriageFileResponse">
    <part name="parameters" element="policynet:createAclaraMarriageFileResponse"/>
  </message>
  <message name="createScmTransactionHistoryReportRequest">
    <part name="parameters" element="policynet:createScmTransactionHistoryReportRequest"/>
  </message>
  <message name="createScmTransactionHistoryReportResponse">
    <part name="parameters" element="policynet:createScmTransactionHistoryReportResponse"/>
  </message>
  <message name="searchApplicationPackagesRequest">
    <part name="parameters" element="policynet:searchApplicationPackagesRequest"/>
  </message>
  <message name="searchApplicationPackagesResponse">
    <part name="parameters" element="policynet:searchApplicationPackagesResponse"/>
  </message>
  <message name="deleteApplicationPackageRequest">
    <part name="parameters" element="policynet:deleteApplicationPackageRequest"/>
  </message>
  <message name="deleteApplicationPackageResponse">
    <part name="parameters" element="policynet:deleteApplicationPackageResponse"/>
  </message>
  <message name="updateApplicationPackageStateRequest">
    <part name="parameters" element="policynet:updateApplicationPackageStateRequest"/>
  </message>
  <message name="updateApplicationPackageStateResponse">
    <part name="parameters" element="policynet:updateApplicationPackageStateResponse"/>
  </message>
  <message name="downloadApplicationPackageRequest">
    <part name="parameters" element="policynet:downloadApplicationPackageRequest"/>
  </message>
  <message name="downloadApplicationPackageResponse">
    <part name="parameters" element="policynet:downloadApplicationPackageResponse"/>
  </message>
  <message name="uploadApplicationPackageRequest">
    <part name="parameters" element="policynet:uploadApplicationPackageRequest"/>
  </message>
  <message name="uploadApplicationPackageResponse">
    <part name="parameters" element="policynet:uploadApplicationPackageResponse"/>
  </message>
  <message name="activateSoftwarePolicyRequest">
    <part name="parameters" element="policynet:activateSoftwarePolicyRequest"/>
  </message>
  <message name="activateSoftwarePolicyResponse">
    <part name="parameters" element="policynet:activateSoftwarePolicyResponse"/>
  </message>
  <message name="deactivateSoftwarePolicyRequest">
    <part name="parameters" element="policynet:deactivateSoftwarePolicyRequest"/>
  </message>
  <message name="deactivateSoftwarePolicyResponse">
    <part name="parameters" element="policynet:deactivateSoftwarePolicyResponse"/>
  </message>
  <message name="PolicyNetHeader">
    <part name="LoginUsername" element="policynet:LoginUsername"/>
    <part name="LoginPassword" element="policynet:LoginPassword"/>
    <part name="SessionId" element="policynet:SessionId"/>
    <part name="DbProfilerTime" element="policynet:DbProfilerTime"/>
  </message>
  <message name="ExceptionFault">
    <part name="fault" element="policynet:Exception"/>
  </message>
  <portType name="PolicyNetPortType">
    <operation name="login">
      <documentation>Service definition of function policynet__loginRequest</documentation>
      <input message="tns:loginRequest"/>
      <output message="tns:loginResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="logout">
      <documentation>Service definition of function policynet__logoutRequest</documentation>
      <input message="tns:logoutRequest"/>
      <output message="tns:logoutResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="createUserAccount">
      <documentation>Creates a new user, replacement for createUserRequest.</documentation>
      <input message="tns:createUserAccountRequest"/>
      <output message="tns:createUserAccountResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="updateUserAccount">
      <documentation>Used to update user attributes (name, e-mail, phone number...).  All users can edit themselves.  Admins or userAdmins can edit any user's attributes.  updateUserRequest does not change a user's password.  Replacement for updateUserRequest.</documentation>
      <input message="tns:updateUserAccountRequest"/>
      <output message="tns:updateUserAccountResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="searchUserAccounts">
      <documentation>Searches for users in the system, replacement for searchUsersRequest.</documentation>
      <input message="tns:searchUserAccountsRequest"/>
      <output message="tns:searchUserAccountsResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="createUser">
      <documentation>DEPRECATED in 2.9, will be REMOVED in 2.11.  Please use createUserAccountRequest instead.  Note that in order to create a user authenticated through LDAP, the new createUserAccountRequest MUST be used.</documentation>
      <input message="tns:createUserRequest"/>
      <output message="tns:createUserResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="updateUser">
      <documentation>DEPRECATED in 2.9, will be REMOVED in 2.11.  Please use updateUserAccount instead.  Used to update user attributes (name, e-mail, phone number...).  All users can edit themselves.  Admins or userAdmins can edit any user's attributes.  updateUserRequest does not change a user's password.  Use updateUserPasswordRequest to change a password.</documentation>
      <input message="tns:updateUserRequest"/>
      <output message="tns:updateUserResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="updateUserPassword">
      <documentation>Used to update user passwords.  Regular users can edit their own passwords, and currentPassword must be specified.  Admins or userAdmins can edit any user's password, and currentPassword is not required.  NOTE:  Does not apply to users with LDAP authentication type selected.</documentation>
      <input message="tns:updateUserPasswordRequest"/>
      <output message="tns:updateUserPasswordResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="searchUsers">
      <documentation>DEPRECATED in 2.9, will be REMOVED in 2.11.  Please use searchUserAccountsRequest instead.</documentation>
      <input message="tns:searchUsersRequest"/>
      <output message="tns:searchUsersResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="deleteUser">
      <documentation>Service definition of function policynet__deleteUserRequest</documentation>
      <input message="tns:deleteUserRequest"/>
      <output message="tns:deleteUserResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="enableUser">
      <documentation>Service definition of function policynet__enableUserRequest</documentation>
      <input message="tns:enableUserRequest"/>
      <output message="tns:enableUserResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="disableUser">
      <documentation>Service definition of function policynet__disableUserRequest</documentation>
      <input message="tns:disableUserRequest"/>
      <output message="tns:disableUserResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="unlockUser">
      <documentation>NOTE:  Does not apply to users with LDAP authentication type selected.</documentation>
      <input message="tns:unlockUserRequest"/>
      <output message="tns:unlockUserResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="enableUserPasswordAging">
      <documentation>NOTE:  Does not apply to users with LDAP authentication type selected.</documentation>
      <input message="tns:enableUserPasswordAgingRequest"/>
      <output message="tns:enableUserPasswordAgingResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="disableUserPasswordAging">
      <documentation>NOTE:  Does not apply to users with LDAP authentication type selected.</documentation>
      <input message="tns:disableUserPasswordAgingRequest"/>
      <output message="tns:disableUserPasswordAgingResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="searchRoles">
      <documentation>Service definition of function policynet__searchRolesRequest</documentation>
      <input message="tns:searchRolesRequest"/>
      <output message="tns:searchRolesResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="getUserSecurityRules">
      <documentation>NOTE:  These rules DO NOT apply to users with LDAP authentication type selected.</documentation>
      <input message="tns:getUserSecurityRulesRequest"/>
      <output message="tns:getUserSecurityRulesResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="setUserSecurityRules">
      <documentation>NOTE:  These rules DO NOT apply to users with LDAP authentication type selected.</documentation>
      <input message="tns:setUserSecurityRulesRequest"/>
      <output message="tns:setUserSecurityRulesResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="getClockDriftSettings">
      <documentation>Service definition of function policynet__getClockDriftSettingsRequest</documentation>
      <input message="tns:getClockDriftSettingsRequest"/>
      <output message="tns:getClockDriftSettingsResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="setClockDriftSettings">
      <documentation>Service definition of function policynet__setClockDriftSettingsRequest</documentation>
      <input message="tns:setClockDriftSettingsRequest"/>
      <output message="tns:setClockDriftSettingsResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="getRadiusSettings">
      <documentation>Service definition of function policynet__getRadiusSettingsRequest</documentation>
      <input message="tns:getRadiusSettingsRequest"/>
      <output message="tns:getRadiusSettingsResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="setRadiusSettings">
      <documentation>Service definition of function policynet__setRadiusSettingsRequest</documentation>
      <input message="tns:setRadiusSettingsRequest"/>
      <output message="tns:setRadiusSettingsResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="searchNasClients">
      <documentation>Service definition of function policynet__searchNasClientsRequest</documentation>
      <input message="tns:searchNasClientsRequest"/>
      <output message="tns:SearchNasClientsResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="createNasClient">
      <documentation>Service definition of function policynet__createNasClientRequest</documentation>
      <input message="tns:createNasClientRequest"/>
      <output message="tns:CreateNasClientResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="updateNasClient">
      <documentation>Service definition of function policynet__updateNasClientRequest</documentation>
      <input message="tns:updateNasClientRequest"/>
      <output message="tns:UpdateNasClientResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="deleteNasClient">
      <documentation>Service definition of function policynet__deleteNasClientRequest</documentation>
      <input message="tns:deleteNasClientRequest"/>
      <output message="tns:DeleteNasClientResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="searchRadiusProxies">
      <documentation>Service definition of function policynet__searchRadiusProxiesRequest</documentation>
      <input message="tns:searchRadiusProxiesRequest"/>
      <output message="tns:SearchRadiusProxiesResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="createRadiusProxy">
      <documentation>Service definition of function policynet__createRadiusProxyRequest</documentation>
      <input message="tns:createRadiusProxyRequest"/>
      <output message="tns:CreateRadiusProxyResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="updateRadiusProxy">
      <documentation>Service definition of function policynet__updateRadiusProxyRequest</documentation>
      <input message="tns:updateRadiusProxyRequest"/>
      <output message="tns:UpdateRadiusProxyResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="deleteRadiusProxy">
      <documentation>Service definition of function policynet__deleteRadiusProxyRequest</documentation>
      <input message="tns:deleteRadiusProxyRequest"/>
      <output message="tns:DeleteRadiusProxyResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="forceDeployMulticastPolicy">
      <documentation>Service definition of function policynet__forceDeployMulticastPolicyRequest</documentation>
      <input message="tns:forceDeployMulticastPolicyRequest"/>
      <output message="tns:forceDeployMulticastPolicyResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="createMeterReadSchedule">
      <documentation>Service definition of function policynet__createMeterReadScheduleRequest</documentation>
      <input message="tns:createMeterReadScheduleRequest"/>
      <output message="tns:createMeterReadScheduleResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="updateMeterReadSchedule">
      <documentation>Service definition of function policynet__updateMeterReadScheduleRequest</documentation>
      <input message="tns:updateMeterReadScheduleRequest"/>
      <output message="tns:updateMeterReadScheduleResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="deleteMeterReadSchedule">
      <documentation>Service definition of function policynet__deleteMeterReadScheduleRequest</documentation>
      <input message="tns:deleteMeterReadScheduleRequest"/>
      <output message="tns:deleteMeterReadScheduleResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="deployMeterReadSchedule">
      <documentation>Service definition of function policynet__deployMeterReadScheduleRequest</documentation>
      <input message="tns:deployMeterReadScheduleRequest"/>
      <output message="tns:deployMeterReadScheduleResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="undeployMeterReadSchedule">
      <documentation>Service definition of function policynet__undeployMeterReadScheduleRequest</documentation>
      <input message="tns:undeployMeterReadScheduleRequest"/>
      <output message="tns:undeployMeterReadScheduleResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="createMeterControlSchedule">
      <documentation>Service definition of function policynet__createMeterControlScheduleRequest</documentation>
      <input message="tns:createMeterControlScheduleRequest"/>
      <output message="tns:createMeterControlScheduleResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="updateMeterControlSchedule">
      <documentation>Service definition of function policynet__updateMeterControlScheduleRequest</documentation>
      <input message="tns:updateMeterControlScheduleRequest"/>
      <output message="tns:updateMeterControlScheduleResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="deleteMeterControlSchedule">
      <documentation>Service definition of function policynet__deleteMeterControlScheduleRequest</documentation>
      <input message="tns:deleteMeterControlScheduleRequest"/>
      <output message="tns:deleteMeterControlScheduleResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="deployMeterControlSchedule">
      <documentation>Service definition of function policynet__deployMeterControlScheduleRequest</documentation>
      <input message="tns:deployMeterControlScheduleRequest"/>
      <output message="tns:deployMeterControlScheduleResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="undeployMeterControlSchedule">
      <documentation>Service definition of function policynet__undeployMeterControlScheduleRequest</documentation>
      <input message="tns:undeployMeterControlScheduleRequest"/>
      <output message="tns:undeployMeterControlScheduleResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="createLoadControlSchedule">
      <documentation>Service definition of function policynet__createLoadControlScheduleRequest</documentation>
      <input message="tns:createLoadControlScheduleRequest"/>
      <output message="tns:createLoadControlScheduleResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="updateLoadControlSchedule">
      <documentation>Service definition of function policynet__updateLoadControlScheduleRequest</documentation>
      <input message="tns:updateLoadControlScheduleRequest"/>
      <output message="tns:updateLoadControlScheduleResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="deleteLoadControlSchedule">
      <documentation>Service definition of function policynet__deleteLoadControlScheduleRequest</documentation>
      <input message="tns:deleteLoadControlScheduleRequest"/>
      <output message="tns:deleteLoadControlScheduleResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="deployLoadControlSchedule">
      <documentation>Service definition of function policynet__deployLoadControlScheduleRequest</documentation>
      <input message="tns:deployLoadControlScheduleRequest"/>
      <output message="tns:deployLoadControlScheduleResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="undeployLoadControlSchedule">
      <documentation>Service definition of function policynet__undeployLoadControlScheduleRequest</documentation>
      <input message="tns:undeployLoadControlScheduleRequest"/>
      <output message="tns:undeployLoadControlScheduleResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="createPanPolicy">
      <documentation>Service definition of function policynet__createPanPolicyRequest</documentation>
      <input message="tns:createPanPolicyRequest"/>
      <output message="tns:createPanPolicyResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="updatePanPolicy">
      <documentation>Service definition of function policynet__updatePanPolicyRequest</documentation>
      <input message="tns:updatePanPolicyRequest"/>
      <output message="tns:updatePanPolicyResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="deletePanPolicy">
      <documentation>Service definition of function policynet__deletePanPolicyRequest</documentation>
      <input message="tns:deletePanPolicyRequest"/>
      <output message="tns:deletePanPolicyResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="deployPanPolicy">
      <documentation>Service definition of function policynet__deployPanPolicyRequest</documentation>
      <input message="tns:deployPanPolicyRequest"/>
      <output message="tns:deployPanPolicyResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="undeployPanPolicy">
      <documentation>Service definition of function policynet__undeployPanPolicyRequest</documentation>
      <input message="tns:undeployPanPolicyRequest"/>
      <output message="tns:undeployPanPolicyResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="createPanDevices">
      <documentation>panAppliance device type is DEPRECATED in 2.6 and can no longer be created.  Please use panSmartPlug instead (they are equivalent).</documentation>
      <input message="tns:createPanDevicesRequest"/>
      <output message="tns:createPanDevicesResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="setPanDeviceLabel">
      <documentation>Service definition of function policynet__setPanDeviceLabelRequest</documentation>
      <input message="tns:setPanDeviceLabelRequest"/>
      <output message="tns:setPanDeviceLabelResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="removePanDeviceLabel">
      <documentation>Service definition of function policynet__removePanDeviceLabelRequest</documentation>
      <input message="tns:removePanDeviceLabelRequest"/>
      <output message="tns:removePanDeviceLabelResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="assignPanServicePoint">
      <documentation>IMPORTANT:  assignPanServicePoint is actually a misnomer, it should be called assignPanBinding because it binds a PAN device to an electric meter USN rather than a service point ID.  Therefore, input attribute panServicePoint.electricServicePointId actually means panServicePoint.electricMeterUSN and is assumed to be the electric meter USN.</documentation>
      <input message="tns:assignPanServicePointRequest"/>
      <output message="tns:assignPanServicePointResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="assignWaterServicePoint">
      <documentation>Service definition of function policynet__assignWaterServicePointRequest</documentation>
      <input message="tns:assignWaterServicePointRequest"/>
      <output message="tns:assignWaterServicePointResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="createWaterMeterRead">
      <documentation>Service definition of function policynet__createWaterMeterReadRequest</documentation>
      <input message="tns:createWaterMeterReadRequest"/>
      <output message="tns:createWaterMeterReadResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="createWaterMeterReadSchedule">
      <documentation>Service definition of function policynet__createWaterMeterReadScheduleRequest</documentation>
      <input message="tns:createWaterMeterReadScheduleRequest"/>
      <output message="tns:createWaterMeterReadScheduleResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="updateWaterMeterReadSchedule">
      <documentation>Service definition of function policynet__updateWaterMeterReadScheduleRequest</documentation>
      <input message="tns:updateWaterMeterReadScheduleRequest"/>
      <output message="tns:updateWaterMeterReadScheduleResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="deleteWaterMeterReadSchedule">
      <documentation>Service definition of function policynet__deleteWaterMeterReadScheduleRequest</documentation>
      <input message="tns:deleteWaterMeterReadScheduleRequest"/>
      <output message="tns:deleteWaterMeterReadScheduleResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="deployWaterMeterReadSchedule">
      <documentation>Service definition of function policynet__deployWaterMeterReadScheduleRequest</documentation>
      <input message="tns:deployWaterMeterReadScheduleRequest"/>
      <output message="tns:deployWaterMeterReadScheduleResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="undeployWaterMeterReadSchedule">
      <documentation>Service definition of function policynet__undeployWaterMeterReadScheduleRequest</documentation>
      <input message="tns:undeployWaterMeterReadScheduleRequest"/>
      <output message="tns:undeployWaterMeterReadScheduleResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="createGasMeterReadSchedule">
      <documentation>Service definition of function policynet__createGasMeterReadScheduleRequest</documentation>
      <input message="tns:createGasMeterReadScheduleRequest"/>
      <output message="tns:createGasMeterReadScheduleResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="updateGasMeterReadSchedule">
      <documentation>Service definition of function policynet__updateGasMeterReadScheduleRequest</documentation>
      <input message="tns:updateGasMeterReadScheduleRequest"/>
      <output message="tns:updateGasMeterReadScheduleResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="deleteGasMeterReadSchedule">
      <documentation>Service definition of function policynet__deleteGasMeterReadScheduleRequest</documentation>
      <input message="tns:deleteGasMeterReadScheduleRequest"/>
      <output message="tns:deleteGasMeterReadScheduleResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="deployGasMeterReadSchedule">
      <documentation>Service definition of function policynet__deployGasMeterReadScheduleRequest</documentation>
      <input message="tns:deployGasMeterReadScheduleRequest"/>
      <output message="tns:deployGasMeterReadScheduleResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="undeployGasMeterReadSchedule">
      <documentation>Service definition of function policynet__undeployGasMeterReadScheduleRequest</documentation>
      <input message="tns:undeployGasMeterReadScheduleRequest"/>
      <output message="tns:undeployGasMeterReadScheduleResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="createDeviceControlSchedule">
      <documentation>Note:  CheckMulticastPerformancePolicy is not yet implemented or functional as of 2.7.1.</documentation>
      <input message="tns:createDeviceControlScheduleRequest"/>
      <output message="tns:createDeviceControlScheduleResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="updateDeviceControlSchedule">
      <documentation>Service definition of function policynet__updateDeviceControlScheduleRequest</documentation>
      <input message="tns:updateDeviceControlScheduleRequest"/>
      <output message="tns:updateDeviceControlScheduleResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="deleteDeviceControlSchedule">
      <documentation>Service definition of function policynet__deleteDeviceControlScheduleRequest</documentation>
      <input message="tns:deleteDeviceControlScheduleRequest"/>
      <output message="tns:deleteDeviceControlScheduleResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="deployDeviceControlSchedule">
      <documentation>Service definition of function policynet__deployDeviceControlScheduleRequest</documentation>
      <input message="tns:deployDeviceControlScheduleRequest"/>
      <output message="tns:deployDeviceControlScheduleResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="undeployDeviceControlSchedule">
      <documentation>Service definition of function policynet__undeployDeviceControlScheduleRequest</documentation>
      <input message="tns:undeployDeviceControlScheduleRequest"/>
      <output message="tns:undeployDeviceControlScheduleResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="createWaterMeterRegisterReport">
      <documentation>Service definition of function policynet__createWaterMeterRegisterReportRequest</documentation>
      <input message="tns:createWaterMeterRegisterReportRequest"/>
      <output message="tns:createWaterMeterRegisterReportResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="createWaterMeterIntervalReport">
      <documentation>Service definition of function policynet__createWaterMeterIntervalReportRequest</documentation>
      <input message="tns:createWaterMeterIntervalReportRequest"/>
      <output message="tns:createWaterMeterIntervalReportResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="createGasMeterRegisterReport">
      <documentation>Service definition of function policynet__createGasMeterRegisterReportRequest</documentation>
      <input message="tns:createGasMeterRegisterReportRequest"/>
      <output message="tns:createGasMeterRegisterReportResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="createGasMeterIntervalReport">
      <documentation>Service definition of function policynet__createGasMeterIntervalReportRequest</documentation>
      <input message="tns:createGasMeterIntervalReportRequest"/>
      <output message="tns:createGasMeterIntervalReportResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="createServerPolicy">
      <documentation>Service definition of function policynet__createServerPolicyRequest</documentation>
      <input message="tns:createServerPolicyRequest"/>
      <output message="tns:createServerPolicyResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="updateServerPolicy">
      <documentation>Service definition of function policynet__updateServerPolicyRequest</documentation>
      <input message="tns:updateServerPolicyRequest"/>
      <output message="tns:updateServerPolicyResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="deleteServerPolicy">
      <documentation>Service definition of function policynet__deleteServerPolicyRequest</documentation>
      <input message="tns:deleteServerPolicyRequest"/>
      <output message="tns:deleteServerPolicyResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="deployServerPolicy">
      <documentation>Service definition of function policynet__deployServerPolicyRequest</documentation>
      <input message="tns:deployServerPolicyRequest"/>
      <output message="tns:deployServerPolicyResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="undeployServerPolicy">
      <documentation>Service definition of function policynet__undeployServerPolicyRequest</documentation>
      <input message="tns:undeployServerPolicyRequest"/>
      <output message="tns:undeployServerPolicyResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="searchPolicies">
      <documentation>Service definition of function policynet__searchPoliciesRequest</documentation>
      <input message="tns:searchPoliciesRequest"/>
      <output message="tns:searchPoliciesResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="searchPoliciesList">
      <documentation>Service definition of function policynet__searchPoliciesListRequest</documentation>
      <input message="tns:searchPoliciesListRequest"/>
      <output message="tns:searchPoliciesListResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="getDeviceStateSummary">
      <documentation>Service definition of function policynet__getDeviceStateSummaryRequest</documentation>
      <input message="tns:getDeviceStateSummaryRequest"/>
      <output message="tns:getDeviceStateSummaryResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="searchDevicesWildcard">
      <documentation>Used to interrogate existing devices. Use the * character for wild-card searches.</documentation>
      <input message="tns:searchDevicesWildcardRequest"/>
      <output message="tns:searchDevicesResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="searchDevices">
      <documentation>Used to interrogate existing devices. Use the * character for wild-card searches.</documentation>
      <input message="tns:searchDevicesRequest"/>
      <output message="tns:searchDevicesResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="searchDevicesBaseRequest">
      <documentation>Service definition of function policynet__searchDevicesBaseRequest</documentation>
      <input message="tns:searchDevicesBaseRequest"/>
      <output message="tns:SearchDevicesBaseResponse"/>
    </operation>
    <operation name="searchDeviceSiblings">
      <documentation>Service definition of function policynet__searchDeviceSiblingsRequest</documentation>
      <input message="tns:searchDeviceSiblingsRequest"/>
      <output message="tns:searchDeviceSiblingsResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="searchDeviceList">
      <documentation>Service definition of function policynet__searchDeviceListRequest</documentation>
      <input message="tns:searchDeviceListRequest"/>
      <output message="tns:searchDeviceListResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="searchCommAssets">
      <documentation>Used to interrogate existing Smart Grid Cards.</documentation>
      <input message="tns:searchCommAssetsRequest"/>
      <output message="tns:searchCommAssetsResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="deleteCommAssetRequest">
      <documentation>Service definition of function policynet__deleteCommAssetRequest</documentation>
      <input message="tns:deleteCommAssetRequest"/>
      <output message="tns:deleteCommAssetResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="createMeterPasswordReport">
      <documentation>Service definition of function policynet__createMeterPasswordReportRequest</documentation>
      <input message="tns:createMeterPasswordReportRequest"/>
      <output message="tns:createMeterPasswordReportResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="updateDeviceBinding">
      <documentation>Used to manually bind or unbind SGC cards with stand-alone meters, when no network is present.</documentation>
      <input message="tns:updateDeviceBindingRequest"/>
      <output message="tns:updateDeviceBindingResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="getDevicesStatuses">
      <documentation>Service definition of function policynet__getDevicesStatusesRequest</documentation>
      <input message="tns:getDevicesStatusesRequest"/>
      <output message="tns:getDevicesStatusesResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="getNameList">
      <documentation>Used to interrogate existing device, group, policy or user names with unique constraints. Use the * character for trailing wild-card searches.</documentation>
      <input message="tns:getNameListRequest"/>
      <output message="tns:getNameListResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="previewPolicyTargetCount">
      <documentation>Used to return a calculated count of targets given a homogeneous target set</documentation>
      <input message="tns:previewPolicyTargetCountRequest"/>
      <output message="tns:previewPolicyTargetCountResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="searchPolicyTargets">
      <documentation>Used to retrieve a list of targets for a given policy type and a given target type</documentation>
      <input message="tns:searchPolicyTargetsRequest"/>
      <output message="tns:searchPolicyTargetsResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="syncPolicyTargets">
      <documentation>Used to refresh the determination of eligible targets for a policy type.  Should be called before getting a list of eligible targets for the policy type i.e. before creating the policy.</documentation>
      <input message="tns:syncPolicyTargetsRequest"/>
      <output message="tns:syncPolicyTargetsResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="createCustomDeviceAttributes">
      <documentation>Used to assign custom attributes to devices</documentation>
      <input message="tns:createCustomDeviceAttributesRequest"/>
      <output message="tns:createCustomDeviceAttributesResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="deleteCustomDeviceAttributes">
      <documentation>Used to delete custom attributes from devices</documentation>
      <input message="tns:deleteCustomDeviceAttributesRequest"/>
      <output message="tns:deleteCustomDeviceAttributesResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="searchCustomDeviceAttributes">
      <documentation>Used for custom device attributes by device number and attribute name</documentation>
      <input message="tns:searchCustomDeviceAttributesRequest"/>
      <output message="tns:searchCustomDeviceAttributesResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="createIntervalReport">
      <documentation>Service definition of function policynet__createIntervalReportRequest</documentation>
      <input message="tns:createIntervalReportRequest"/>
      <output message="tns:createIntervalReportResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="createValidatedIntervalReport">
      <documentation>Service definition of function policynet__createValidatedIntervalReportRequest</documentation>
      <input message="tns:createValidatedIntervalReportRequest"/>
      <output message="tns:createValidatedIntervalReportResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="createRegisterReport">
      <documentation>Service definition of function policynet__createRegisterReportRequest</documentation>
      <input message="tns:createRegisterReportRequest"/>
      <output message="tns:createRegisterReportResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="createRegisterReportMSP">
      <documentation>Service definition of function policynet__createRegisterReportMSPRequest</documentation>
      <input message="tns:createRegisterReportMSPRequest"/>
      <output message="tns:createRegisterReportMSPResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="searchPanTopology">
      <documentation>Service definition of function policynet__searchPanTopologyRequest</documentation>
      <input message="tns:searchPanTopologyRequest"/>
      <output message="tns:searchPanTopologyResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="createDeviceHistoryReport">
      <documentation>Service definition of function policynet__createDeviceHistoryReportRequest</documentation>
      <input message="tns:createDeviceHistoryReportRequest"/>
      <output message="tns:createDeviceHistoryReportResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="searchGroups">
      <documentation>Service definition of function policynet__searchGroupsRequest</documentation>
      <input message="tns:searchGroupsRequest"/>
      <output message="tns:searchGroupsResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="uploadFirmwarePackage">
      <documentation>Used to upload device firmware packages.  The SSID in the package data must be unique for each firmware package.</documentation>
      <input message="tns:uploadFirmwarePackageRequest"/>
      <output message="tns:uploadFirmwarePackageResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="importShipFile">
      <documentation>Service definition of function policynet__importShipFileRequest</documentation>
      <input message="tns:importShipFileRequest"/>
      <output message="tns:importShipFileResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="exportShipFile">
      <documentation>Service definition of function policynet__exportShipFileRequest</documentation>
      <input message="tns:exportShipFileRequest"/>
      <output message="tns:exportShipFileResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="uploadDeviceExportCertificate">
      <documentation>Service definition of function policynet__uploadDeviceExportCertificateRequest</documentation>
      <input message="tns:uploadDeviceExportCertificateRequest"/>
      <output message="tns:uploadDeviceExportCertificateResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="searchDeviceExportCertificates">
      <documentation>Service definition of function policynet__searchDeviceExportCertificatesRequest</documentation>
      <input message="tns:searchDeviceExportCertificatesRequest"/>
      <output message="tns:searchDeviceExportCertificatesResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="searchFirmwarePackages">
      <documentation>Service definition of function policynet__searchFirmwarePackagesRequest</documentation>
      <input message="tns:searchFirmwarePackagesRequest"/>
      <output message="tns:searchFirmwarePackagesResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="deleteFirmwarePackage">
      <documentation>Service definition of function policynet__deleteFirmwarePackageRequest</documentation>
      <input message="tns:deleteFirmwarePackageRequest"/>
      <output message="tns:deleteFirmwarePackageResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="updateFirmwarePackageState">
      <documentation>Service definition of function policynet__updateFirmwarePackageStateRequest</documentation>
      <input message="tns:updateFirmwarePackageStateRequest"/>
      <output message="tns:updateFirmwarePackageStateResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="downloadFirmwarePackage">
      <documentation>Service definition of function policynet__downloadFirmwarePackageRequest</documentation>
      <input message="tns:downloadFirmwarePackageRequest"/>
      <output message="tns:downloadFirmwarePackageResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="createMeterProgram">
      <documentation>Used to upload meter programs.  Note that the meter program ID must be unique for each meter program package.</documentation>
      <input message="tns:createMeterProgramRequest"/>
      <output message="tns:createMeterProgramResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="searchMeterPrograms">
      <documentation>Service definition of function policynet__searchMeterProgramsRequest</documentation>
      <input message="tns:searchMeterProgramsRequest"/>
      <output message="tns:searchMeterProgramsResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="updateMeterProgram">
      <documentation>Service definition of function policynet__updateMeterProgramRequest</documentation>
      <input message="tns:updateMeterProgramRequest"/>
      <output message="tns:updateMeterProgramResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="deleteMeterProgram">
      <documentation>Service definition of function policynet__deleteMeterProgramRequest</documentation>
      <input message="tns:deleteMeterProgramRequest"/>
      <output message="tns:deleteMeterProgramResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="createQosProfile">
      <documentation>Used to create QoS profiles.  Note that profile.qosProfileName must be unique.</documentation>
      <input message="tns:createQosProfileRequest"/>
      <output message="tns:createQosProfileResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="searchQosProfiles">
      <documentation>Service definition of function policynet__searchQosProfilesRequest</documentation>
      <input message="tns:searchQosProfilesRequest"/>
      <output message="tns:searchQosProfilesResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="updateQosProfile">
      <documentation>Service definition of function policynet__updateQosProfileRequest</documentation>
      <input message="tns:updateQosProfileRequest"/>
      <output message="tns:updateQosProfileResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="deleteQosProfile">
      <documentation>Service definition of function policynet__deleteQosProfileRequest</documentation>
      <input message="tns:deleteQosProfileRequest"/>
      <output message="tns:deleteQosProfileResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="searchRadiusDictionaries">
      <documentation>Service definition of function policynet__searchRadiusDictionariesRequest</documentation>
      <input message="tns:searchRadiusDictionariesRequest"/>
      <output message="tns:searchRadiusDictionariesResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="createPowerQualityReport">
      <documentation>Service definition of function policynet__createPowerQualityReportRequest</documentation>
      <input message="tns:createPowerQualityReportRequest"/>
      <output message="tns:createPowerQualityReportResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="createPowerQualityProfileReport">
      <documentation>Service definition of function policynet__createPowerQualityProfileReportRequest</documentation>
      <input message="tns:createPowerQualityProfileReportRequest"/>
      <output message="tns:createPowerQualityProfileReportResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="getVoltageBandSettings">
      <documentation>Service definition of function policynet__getVoltageBandSettingsRequest</documentation>
      <input message="tns:getVoltageBandSettingsRequest"/>
      <output message="tns:getVoltageBandSettingsResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="setVoltageBandSettings">
      <documentation>NOTE:  Setting the voltage band settings will undeploy ALL instances of Voltage band monitoring policies since they will still have the old voltage band settings.  User will need to manually redeploy the policies which will then inherit the new voltage band settings.</documentation>
      <input message="tns:setVoltageBandSettingsRequest"/>
      <output message="tns:setVoltageBandSettingsResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="createOutageStatsReport">
      <documentation>Service definition of function policynet__createOutageStatsReportRequest</documentation>
      <input message="tns:createOutageStatsReportRequest"/>
      <output message="tns:createOutageStatsReportResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="createMeterProgramResult">
      <documentation>Service definition of function policynet__createMeterProgramResultRequest</documentation>
      <input message="tns:createMeterProgramResultRequest"/>
      <output message="tns:policyResultDetailResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="createSWUpgradeResult">
      <documentation>Service definition of function policynet__createSWUpgradeResultRequest</documentation>
      <input message="tns:createSWUpgradeResultRequest"/>
      <output message="tns:policyResultDetailResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="getEventTrends">
      <documentation>Service definition of function policynet__getEventTrendsRequest</documentation>
      <input message="tns:getEventTrendsRequest"/>
      <output message="tns:getEventTrendsResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="getEventSummary">
      <documentation>Service definition of function policynet__getEventSummaryRequest</documentation>
      <input message="tns:getEventSummaryRequest"/>
      <output message="tns:getEventSummaryResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="createEventsReport">
      <documentation>The eventSeverity and eventCode arguments are deprecated as of PolicyNet 2.4, and will be removed in a future PolicyNet version.  Please specify eventSeverity and eventCode in the params argument instead.</documentation>
      <input message="tns:createEventsReportRequest"/>
      <output message="tns:createEventsReportResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="createSystemOutagesReport">
      <documentation>Service definition of function policynet__createSystemOutagesReportRequest</documentation>
      <input message="tns:createSystemOutagesReportRequest"/>
      <output message="tns:createSystemOutagesReportResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="getSystemOutagesSummary">
      <documentation>Service definition of function policynet__getSystemOutagesSummaryRequest</documentation>
      <input message="tns:getSystemOutagesSummaryRequest"/>
      <output message="tns:getSystemOutagesSummaryResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="searchFeeders">
      <documentation>Service definition of function policynet__searchFeedersRequest</documentation>
      <input message="tns:searchFeedersRequest"/>
      <output message="tns:searchFeedersResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="createChronicReadFailureReport">
      <documentation>Service definition of function policynet__createChronicReadFailureReportRequest</documentation>
      <input message="tns:createChronicReadFailureReportRequest"/>
      <output message="tns:createChronicReadFailureReportResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="createFailedEnforcementReport">
      <documentation>Service definition of function policynet__createFailedEnforcementReportRequest</documentation>
      <input message="tns:createFailedEnforcementReportRequest"/>
      <output message="tns:createFailedEnforcementReportResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="createClockDriftReport">
      <documentation>Service definition of function policynet__createClockDriftReportRequest</documentation>
      <input message="tns:createClockDriftReportRequest"/>
      <output message="tns:createClockDriftReportResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="createClockAdjustmentReport">
      <documentation>Service definition of function policynet__createClockAdjustmentReportRequest</documentation>
      <input message="tns:createClockAdjustmentReportRequest"/>
      <output message="tns:createClockAdjustmentReportResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="createRadiusAccountingReport">
      <documentation>Service definition of function policynet__createRadiusAccountingReportRequest</documentation>
      <input message="tns:createRadiusAccountingReportRequest"/>
      <output message="tns:createRadiusAccountingReportResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="createIntervalDataSummaryReport">
      <documentation>Service definition of function policynet__createIntervalDataSummaryReportRequest</documentation>
      <input message="tns:createIntervalDataSummaryReportRequest"/>
      <output message="tns:createIntervalReadDataSummaryReportResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="createIntervalReadGapReport">
      <documentation>Service definition of function policynet__createIntervalReadGapReportRequest</documentation>
      <input message="tns:createIntervalReadGapReportRequest"/>
      <output message="tns:createIntervalReadGapReportResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="createSystemReliabilityReport">
      <documentation>Service definition of function policynet__createSystemReliabilityReportRequest</documentation>
      <input message="tns:createSystemReliabilityReportRequest"/>
      <output message="tns:createSystemReliabilityReportResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="getSystemReliabilityConfig">
      <documentation>Service definition of function policynet__getSystemReliabilityConfigRequest</documentation>
      <input message="tns:getSystemReliabilityConfigRequest"/>
      <output message="tns:getSystemReliabilityConfigResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="setSystemReliabilityConfig">
      <documentation>Service definition of function policynet__setSystemReliabilityConfigRequest</documentation>
      <input message="tns:setSystemReliabilityConfigRequest"/>
      <output message="tns:setSystemReliabilityConfigResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="createDeviceGroup">
      <documentation>Service definition of function policynet__createDeviceGroupRequest</documentation>
      <input message="tns:createDeviceGroupRequest"/>
      <output message="tns:createDeviceGroupResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="updateDeviceGroup">
      <documentation>Service definition of function policynet__updateDeviceGroupRequest</documentation>
      <input message="tns:updateDeviceGroupRequest"/>
      <output message="tns:updateDeviceGroupResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="deleteDeviceGroup">
      <documentation>Service definition of function policynet__deleteDeviceGroupRequest</documentation>
      <input message="tns:deleteDeviceGroupRequest"/>
      <output message="tns:deleteDeviceGroupResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="getGroupCount">
      <documentation>Service definition of function policynet__getGroupCountRequest</documentation>
      <input message="tns:getGroupCountRequest"/>
      <output message="tns:getGroupCountResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="getDeviceGroupAttributeValues">
      <documentation>Used to retrieve attribute key/value pairs used to construct device group filters.</documentation>
      <input message="tns:getDeviceGroupAttributeValuesRequest"/>
      <output message="tns:getDeviceGroupAttributeValuesResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="getPolicyStatus">
      <documentation>Service definition of function policynet__getPolicyStatusRequest</documentation>
      <input message="tns:getPolicyStatusRequest"/>
      <output message="tns:getPolicyStatusResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="getPolicyDeploymentStats">
      <documentation>Service definition of function policynet__getPolicyDeploymentStats</documentation>
      <input message="tns:getPolicyDeploymentStats"/>
      <output message="tns:getPolicyDeploymentStatsResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="createPolicyDeploymentReport">
      <documentation>Service definition of function policynet__createPolicyDeploymentReportRequest</documentation>
      <input message="tns:createPolicyDeploymentReportRequest"/>
      <output message="tns:createPolicyDeploymentReportResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="createPolicyEnforcementReport">
      <documentation>Service definition of function policynet__createPolicyEnforcementReportRequest</documentation>
      <input message="tns:createPolicyEnforcementReportRequest"/>
      <output message="tns:createPolicyEnforcementReportResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="getDeviceGroupChange">
      <documentation>Service definition of function policynet__getDeviceGroupChangeRequest</documentation>
      <input message="tns:getDeviceGroupChangeRequest"/>
      <output message="tns:getDeviceGroupChangeResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="getDeviceOperationalStateChange">
      <documentation>Service definition of function policynet__getDeviceOperationalStateChangeRequest</documentation>
      <input message="tns:getDeviceOperationalStateChangeRequest"/>
      <output message="tns:getDeviceOperationalStateChangeResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="searchAuditTrail">
      <documentation>Service definition of function policynet__searchAuditTrailRequest</documentation>
      <input message="tns:searchAuditTrailRequest"/>
      <output message="tns:searchAuditTrailResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="createServicePoints">
      <documentation>Service definition of function policynet__createServicePointsRequest</documentation>
      <input message="tns:createServicePointsRequest"/>
      <output message="tns:createServicePointsResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="updateServicePoints">
      <documentation>Note: 1. If a specified service point does not exist, it will be created automatically.  If a meter does not exist, the call will fail.  2. Multiple devices are allowed to be bound to the same service point at the same time.</documentation>
      <input message="tns:updateServicePointsRequest"/>
      <output message="tns:updateServicePointsResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="deleteServicePoint">
      <documentation>Service definition of function policynet__deleteServicePointRequest</documentation>
      <input message="tns:deleteServicePointRequest"/>
      <output message="tns:deleteServicePointResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="removeServicePointFromDevice">
      <documentation>Service definition of function policynet__removeServicePointFromDeviceRequest</documentation>
      <input message="tns:removeServicePointFromDeviceRequest"/>
      <output message="tns:removeServicePointFromDeviceResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="updateDeviceServicePoint">
      <documentation>Service definition of function policynet__updateDeviceServicePointRequest</documentation>
      <input message="tns:updateDeviceServicePointRequest"/>
      <output message="tns:updateDeviceServicePointResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="updateDeviceOperationalState">
      <documentation>Service definition of function policynet__updateDeviceOperationalStateRequest</documentation>
      <input message="tns:updateDeviceOperationalStateRequest"/>
      <output message="tns:updateDeviceOperationalStateResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="updateWaterMeterOperationalState">
      <documentation>Service definition of function policynet__updateWaterMeterOperationalStateRequest</documentation>
      <input message="tns:updateWaterMeterOperationalStateRequest"/>
      <output message="tns:updateWaterMeterOperationalStateResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="searchServicePoint">
      <documentation>Service definition of function policynet__searchServicePointRequest</documentation>
      <input message="tns:searchServicePointRequest"/>
      <output message="tns:searchServicePointResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="searchServicePointHistory">
      <documentation>Service definition of function policynet__searchServicePointHistoryRequest</documentation>
      <input message="tns:searchServicePointHistoryRequest"/>
      <output message="tns:searchServicePointHistoryResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="createRole">
      <documentation>Service definition of function policynet__createRoleRequest</documentation>
      <input message="tns:createRoleRequest"/>
      <output message="tns:createRoleResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="updateRole">
      <documentation>Service definition of function policynet__updateRoleRequest</documentation>
      <input message="tns:updateRoleRequest"/>
      <output message="tns:updateRoleResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="deleteRole">
      <documentation>Service definition of function policynet__deleteRoleRequest</documentation>
      <input message="tns:deleteRoleRequest"/>
      <output message="tns:deleteRoleResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="createWimaxReport">
      <documentation>Service definition of function policynet__createWimaxReportRequest</documentation>
      <input message="tns:createWimaxReportRequest"/>
      <output message="tns:createWimaxReportResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="searchManufacturingStatus">
      <documentation>Service definition of function policynet__searchManufacturingStatusRequest</documentation>
      <input message="tns:searchManufacturingStatusRequest"/>
      <output message="tns:searchManufacturingStatusResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="omsDeviceStatus">
      <documentation>Service definition of function policynet__omsDeviceStatusRequest</documentation>
      <input message="tns:omsDeviceStatusRequest"/>
      <output message="tns:omsDeviceStatusResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="searchTopics">
      <documentation>Service definition of function policynet__searchTopicsRequest</documentation>
      <input message="tns:searchTopicsRequest"/>
      <output message="tns:searchTopicsResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="searchConsumers">
      <documentation>Service definition of function policynet__searchConsumersRequest</documentation>
      <input message="tns:searchConsumersRequest"/>
      <output message="tns:searchConsumersResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="subscribeTopic">
      <documentation>Service definition of function policynet__subscribeTopicRequest</documentation>
      <input message="tns:subscribeTopicRequest"/>
      <output message="tns:subscribeTopicResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="unsubscribeTopic">
      <documentation>Service definition of function policynet__unsubscribeTopicRequest</documentation>
      <input message="tns:unsubscribeTopicRequest"/>
      <output message="tns:unsubscribeTopicResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="uploadNwkTopology">
      <documentation>Service definition of function policynet__uploadNwkTopologyRequest</documentation>
      <input message="tns:uploadNwkTopologyRequest"/>
      <output message="tns:uploadNwkTopologyResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="consumeCommEvent">
      <documentation>Service definition of function policynet__consumeCommEvent</documentation>
      <input message="tns:consumeCommEvent"/>
      <output message="tns:consumeCommEventResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="createProvisioningCryptoKey">
      <documentation>Service definition of function policynet__createProvisioningCryptoKeyRequest</documentation>
      <input message="tns:createProvisioningCryptoKeyRequest"/>
      <output message="tns:createProvisioningCryptoKeyResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="getProvisioningCryptoKey">
      <documentation>Service definition of function policynet__getProvisioningCryptoKeyRequest</documentation>
      <input message="tns:getProvisioningCryptoKeyRequest"/>
      <output message="tns:getProvisioningCryptoKeyResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="createMfgCustomer">
      <documentation>Service definition of function policynet__createMfgCustomerRequest</documentation>
      <input message="tns:createMfgCustomerRequest"/>
      <output message="tns:createMfgCustomerResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="updateMfgCustomer">
      <documentation>Service definition of function policynet__updateMfgCustomerRequest</documentation>
      <input message="tns:updateMfgCustomerRequest"/>
      <output message="tns:updateMfgCustomerResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="deleteMfgCustomer">
      <documentation>Service definition of function policynet__deleteMfgCustomerRequest</documentation>
      <input message="tns:deleteMfgCustomerRequest"/>
      <output message="tns:deleteMfgCustomerResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="searchMfgCustomer">
      <documentation>Service definition of function policynet__searchMfgCustomerRequest</documentation>
      <input message="tns:searchMfgCustomerRequest"/>
      <output message="tns:searchMfgCustomerResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="createMfgProduct">
      <documentation>Service definition of function policynet__createMfgProductRequest</documentation>
      <input message="tns:createMfgProductRequest"/>
      <output message="tns:createMfgProductResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="updateMfgProduct">
      <documentation>Service definition of function policynet__updateMfgProductRequest</documentation>
      <input message="tns:updateMfgProductRequest"/>
      <output message="tns:updateMfgProductResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="deleteMfgProduct">
      <documentation>Service definition of function policynet__deleteMfgProductRequest</documentation>
      <input message="tns:deleteMfgProductRequest"/>
      <output message="tns:deleteMfgProductResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="searchMfgProduct">
      <documentation>Service definition of function policynet__searchMfgProductRequest</documentation>
      <input message="tns:searchMfgProductRequest"/>
      <output message="tns:searchMfgProductResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="startMfgProductLine">
      <documentation>Service definition of function policynet__startMfgProductLineRequest</documentation>
      <input message="tns:startMfgProductLineRequest"/>
      <output message="tns:startMfgProductLineResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="stopMfgProductLine">
      <documentation>Service definition of function policynet__stopMfgProductLineRequest</documentation>
      <input message="tns:stopMfgProductLineRequest"/>
      <output message="tns:stopMfgProductLineResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="createMfgShipFile">
      <documentation>Service definition of function policynet__createMfgShipFileRequest</documentation>
      <input message="tns:createMfgShipFileRequest"/>
      <output message="tns:createMfgShipFileResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="searchMfgShipFile">
      <documentation>Service definition of function policynet__searchMfgShipFileRequest</documentation>
      <input message="tns:searchMfgShipFileRequest"/>
      <output message="tns:searchMfgShipFileResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="downloadMfgShipFile">
      <documentation>Service definition of function policynet__downloadMfgShipFileRequest</documentation>
      <input message="tns:downloadMfgShipFileRequest"/>
      <output message="tns:downloadMfgShipFileResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="searchMfgProductionRun">
      <documentation>Service definition of function policynet__searchMfgProductionRunRequest</documentation>
      <input message="tns:searchMfgProductionRunRequest"/>
      <output message="tns:searchMfgProductionRunResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="createNetworkEntryReport">
      <documentation>Service definition of function policynet__createNetworkEntryReportRequest</documentation>
      <input message="tns:createNetworkEntryReportRequest"/>
      <output message="tns:createNetworkEntryReportResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="createFailedNetworkEntryReport">
      <documentation>Service definition of function policynet__createFailedNetworkEntryReportRequest</documentation>
      <input message="tns:createFailedNetworkEntryReportRequest"/>
      <output message="tns:createFailedNetworkEntryReportResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="getEnergyStatusTrend">
      <documentation>Service definition of function policynet__getEnergyStatusTrendRequest</documentation>
      <input message="tns:getEnergyStatusTrendRequest"/>
      <output message="tns:getEnergyStatusTrendResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="getCommStatusTrend">
      <documentation>Service definition of function policynet__getCommStatusTrendRequest</documentation>
      <input message="tns:getCommStatusTrendRequest"/>
      <output message="tns:getCommStatusTrendResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="getDeviceErrorTrend">
      <documentation>Service definition of function policynet__getDeviceErrorTrendRequest</documentation>
      <input message="tns:getDeviceErrorTrendRequest"/>
      <output message="tns:getDeviceErrorTrendResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="getPolicySuccessTrend">
      <documentation>Service definition of function policynet__getPolicySuccessTrendRequest</documentation>
      <input message="tns:getPolicySuccessTrendRequest"/>
      <output message="tns:getPolicySuccessTrendResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="getAllDeviceTrends">
      <documentation>Service definition of function policynet__getAllDeviceTrendsRequest</documentation>
      <input message="tns:getAllDeviceTrendsRequest"/>
      <output message="tns:getAllDeviceTrendsResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="getApproversList">
      <documentation>Service definition of function policynet__getApproversListRequest</documentation>
      <input message="tns:getApproversListRequest"/>
      <output message="tns:getApproversListResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="requestDeployApproval">
      <documentation>Service definition of function policynet__requestDeployApprovalRequest</documentation>
      <input message="tns:requestDeployApprovalRequest"/>
      <output message="tns:requestDeployApprovalResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="cancelDeployApproval">
      <documentation>Service definition of function policynet__cancelDeployApprovalRequest</documentation>
      <input message="tns:cancelDeployApprovalRequest"/>
      <output message="tns:cancelDeployApprovalResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="rejectDeployApproval">
      <documentation>Service definition of function policynet__rejectDeployApprovalRequest</documentation>
      <input message="tns:rejectDeployApprovalRequest"/>
      <output message="tns:rejectDeployApprovalResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="approveDeploy">
      <documentation>Service definition of function policynet__approveDeployRequest</documentation>
      <input message="tns:approveDeployRequest"/>
      <output message="tns:approveDeployResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="deactivatePolicy">
      <documentation>Service definition of function policynet__deactivatePolicyRequest</documentation>
      <input message="tns:deactivatePolicyRequest"/>
      <output message="tns:deactivatePolicyResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="getDualAuthPoliciesSettings">
      <documentation>Service definition of function policynet__getDualAuthPoliciesSettingsRequest</documentation>
      <input message="tns:getDualAuthPoliciesSettingsRequest"/>
      <output message="tns:getDualAuthPoliciesSettingsResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="setDualAuthPoliciesSettings">
      <documentation>Service definition of function policynet__setDualAuthPoliciesSettingsRequest</documentation>
      <input message="tns:setDualAuthPoliciesSettingsRequest"/>
      <output message="tns:setDualAuthPoliciesSettingsResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="createPlannedOutage">
      <documentation>Service definition of function policynet__createPlannedOutageRequest</documentation>
      <input message="tns:createPlannedOutageRequest"/>
      <output message="tns:createPlannedOutageResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="updatePlannedOutage">
      <documentation>Service definition of function policynet__updatePlannedOutageRequest</documentation>
      <input message="tns:updatePlannedOutageRequest"/>
      <output message="tns:updatePlannedOutageResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="deletePlannedOutage">
      <documentation>Service definition of function policynet__deletePlannedOutageRequest</documentation>
      <input message="tns:deletePlannedOutageRequest"/>
      <output message="tns:deletePlannedOutageResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="searchPlannedOutages">
      <documentation>Service definition of function policynet__searchPlannedOutagesRequest</documentation>
      <input message="tns:searchPlannedOutagesRequest"/>
      <output message="tns:searchPlannedOutagesResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="addPanLabel">
      <documentation>Service definition of function policynet__addPanLabelRequest</documentation>
      <input message="tns:addPanLabelRequest"/>
      <output message="tns:addPanLabelResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="removeDeviceFromPan">
      <documentation>Service definition of function policynet__removeDeviceFromPanRequest</documentation>
      <input message="tns:removeDeviceFromPanRequest"/>
      <output message="tns:removeDeviceFromPanResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="updatePanLabel">
      <documentation>Service definition of function policynet__updatePanLabelRequest</documentation>
      <input message="tns:updatePanLabelRequest"/>
      <output message="tns:updatePanLabelResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="deletePanLabel">
      <documentation>Service definition of function policynet__deletePanLabelRequest</documentation>
      <input message="tns:deletePanLabelRequest"/>
      <output message="tns:deletePanLabelResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="getPanLabels">
      <documentation>Service definition of function policynet__getPanLabelsRequest</documentation>
      <input message="tns:getPanLabelsRequest"/>
      <output message="tns:getPanLabelsResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="getSystemTime">
      <documentation>Service definition of function policynet__getSystemTime</documentation>
      <input message="tns:getSystemTime"/>
      <output message="tns:getSystemTimeResponse"/>
    </operation>
    <operation name="setDataRetentionSettings">
      <documentation>Service definition of function policynet__setDataRetentionSettings</documentation>
      <input message="tns:setDataRetentionSettings"/>
      <output message="tns:setDataRetentionSettingsResponse"/>
    </operation>
    <operation name="getDataRetentionSettings">
      <documentation>Service definition of function policynet__getDataRetentionSettings</documentation>
      <input message="tns:getDataRetentionSettings"/>
      <output message="tns:getDataRetentionSettingsResponse"/>
    </operation>
    <operation name="setOpstateRestrictionSettings">
      <documentation>Service definition of function policynet__setOpstateRestrictionSettingsRequest</documentation>
      <input message="tns:setOpstateRestrictionSettingsRequest"/>
      <output message="tns:setOpstateRestrictionSettingsResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="getOpstateRestrictionSettings">
      <documentation>Service definition of function policynet__getOpstateRestrictionSettingsRequest</documentation>
      <input message="tns:getOpstateRestrictionSettingsRequest"/>
      <output message="tns:getOpstateRestrictionSettingsResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="setOffPeakDownloadWindowSettings">
      <documentation>Service definition of function policynet__setOffPeakDownloadWindowSettingsRequest</documentation>
      <input message="tns:setOffPeakDownloadWindowSettingsRequest"/>
      <output message="tns:setOffPeakDownloadWindowSettingsResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="getOffPeakDownloadWindowSettings">
      <documentation>Service definition of function policynet__getOffPeakDownloadWindowSettingsRequest</documentation>
      <input message="tns:getOffPeakDownloadWindowSettingsRequest"/>
      <output message="tns:getOffPeakDownloadWindowSettingsResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="getDailyReportingTimezoneSetting">
      <documentation>Service definition of function policynet__getDailyReportingTimezoneSettingRequest</documentation>
      <input message="tns:getDailyReportingTimezoneSettingRequest"/>
      <output message="tns:getDailyReportingTimezoneSettingResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="setDailyReportingTimezoneSetting">
      <documentation>Service definition of function policynet__setDailyReportingTimezoneSettingRequest</documentation>
      <input message="tns:setDailyReportingTimezoneSettingRequest"/>
      <output message="tns:setDailyReportingTimezoneSettingResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="getDemandDataStreamSettings">
      <documentation>Service definition of function policynet__getDemandDataStreamSettingsRequest</documentation>
      <input message="tns:getDemandDataStreamSettingsRequest"/>
      <output message="tns:getDemandDataStreamSettingsResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="setDemandDataStreamSettings">
      <documentation>Service definition of function policynet__setDemandDataStreamSettingsRequest</documentation>
      <input message="tns:setDemandDataStreamSettingsRequest"/>
      <output message="tns:setDemandDataStreamSettingsResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="getLdapAuthenticationSettings">
      <documentation>Service definition of function policynet__getLdapAuthenticationSettingsRequest</documentation>
      <input message="tns:getLdapAuthenticationSettingsRequest"/>
      <output message="tns:getLdapAuthenticationSettingsResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="setLdapAuthenticationSettings">
      <documentation>Service definition of function policynet__setLdapAuthenticationSettingsRequest</documentation>
      <input message="tns:setLdapAuthenticationSettingsRequest"/>
      <output message="tns:setLdapAuthenticationSettingsResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="generateSoapFault">
      <documentation>generateSoapFaultRequest is DEPRECATED in 2.6 and will be REMOVED in 2.8.</documentation>
      <input message="tns:generateSoapFaultRequest"/>
      <output message="tns:emptyResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="overrideDredControl">
      <documentation>Service definition of function policynet__overrideDredControlRequest</documentation>
      <input message="tns:overrideDredControlRequest"/>
      <output message="tns:overrideDredControlResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="searchDreds">
      <documentation>Service definition of function policynet__searchDredsRequest</documentation>
      <input message="tns:searchDredsRequest"/>
      <output message="tns:searchDredsResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="getDredLoadShedData">
      <documentation>Service definition of function policynet__getDredLoadShedDataRequest</documentation>
      <input message="tns:getDredLoadShedDataRequest"/>
      <output message="tns:getDredLoadShedDataResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="getCardSwapSetting">
      <documentation>Service definition of function policynet__getCardSwapSettingRequest</documentation>
      <input message="tns:getCardSwapSettingRequest"/>
      <output message="tns:getCardSwapSettingResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="setCardSwapSetting">
      <documentation>Service definition of function policynet__setCardSwapSettingRequest</documentation>
      <input message="tns:setCardSwapSettingRequest"/>
      <output message="tns:setCardSwapSettingResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="getRetailers">
      <documentation>Service definition of function policynet__getRetailersRequest</documentation>
      <input message="tns:getRetailersRequest"/>
      <output message="tns:getRetailersResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="addRetailer">
      <documentation>Service definition of function policynet__addRetailerRequest</documentation>
      <input message="tns:addRetailerRequest"/>
      <output message="tns:addRetailerResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="updateRetailer">
      <documentation>Service definition of function policynet__updateRetailerRequest</documentation>
      <input message="tns:updateRetailerRequest"/>
      <output message="tns:updateRetailerResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="deleteRetailer">
      <documentation>Service definition of function policynet__deleteRetailerRequest</documentation>
      <input message="tns:deleteRetailerRequest"/>
      <output message="tns:deleteRetailerResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="getDistributors">
      <documentation>Service definition of function policynet__getDistributorsRequest</documentation>
      <input message="tns:getDistributorsRequest"/>
      <output message="tns:getDistributorsResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="addDistributor">
      <documentation>Service definition of function policynet__addDistributorRequest</documentation>
      <input message="tns:addDistributorRequest"/>
      <output message="tns:addDistributorResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="updateDistributor">
      <documentation>Service definition of function policynet__updateDistributorRequest</documentation>
      <input message="tns:updateDistributorRequest"/>
      <output message="tns:updateDistributorResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="deleteDistributor">
      <documentation>Service definition of function policynet__deleteDistributorRequest</documentation>
      <input message="tns:deleteDistributorRequest"/>
      <output message="tns:deleteDistributorResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="refreshDeviceStatus">
      <documentation>Service definition of function policynet__refreshDeviceStatusRequest</documentation>
      <input message="tns:refreshDeviceStatusRequest"/>
      <output message="tns:refreshDeviceStatusResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="purgeDevice">
      <documentation>Service definition of function policynet__purgeDeviceRequest</documentation>
      <input message="tns:purgeDeviceRequest"/>
      <output message="tns:purgeDeviceResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="createBaseStations">
      <documentation>NOTE:  Currently, only ONE network address supported per base station sector.  If more than one network address is specified for a base station sector the request will be flagged as invalid and dropped.</documentation>
      <input message="tns:createBaseStationsRequest"/>
      <output message="tns:createBaseStationsResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="searchCustomEventTopics">
      <documentation>Service definition of function policynet__searchCustomEventTopicsRequest</documentation>
      <input message="tns:searchCustomEventTopicsRequest"/>
      <output message="tns:SearchCustomEventTopicsResponse"/>
    </operation>
    <operation name="createCustomEventTopic">
      <documentation>Creates a new custom topic</documentation>
      <input message="tns:createCustomEventTopicRequest"/>
      <output message="tns:createCustomEventTopicResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="deleteCustomEventTopic">
      <documentation>Service definition of function policynet__deleteCustomEventTopicRequest</documentation>
      <input message="tns:deleteCustomEventTopicRequest"/>
      <output message="tns:deleteCustomEventTopicResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="searchSlaRequest">
      <documentation>Used to search SLAs .</documentation>
      <input message="tns:searchSlaRequest"/>
      <output message="tns:SearchSlaResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="createSlaRequest">
      <documentation>Creates an SLA</documentation>
      <input message="tns:createSlaRequest"/>
      <output message="tns:createSlaResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="updateSlaRequest">
      <documentation>Updates an existing SLA .</documentation>
      <input message="tns:updateSlaRequest"/>
      <output message="tns:updateSlaResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="deleteSlaRequest">
      <documentation>Service definition of function policynet__deleteSlaRequest</documentation>
      <input message="tns:deleteSlaRequest"/>
      <output message="tns:deleteSlaResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="createSlaReportRequest">
      <documentation>Get SLA report data</documentation>
      <input message="tns:createSlaReportRequest"/>
      <output message="tns:createSlaReportResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="setOutageProbeSettings">
      <documentation>Service definition of function policynet__setOutageProbeSettingsRequest</documentation>
      <input message="tns:setOutageProbeSettingsRequest"/>
      <output message="tns:setOutageProbeSettingsResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="getOutageProbeSettings">
      <documentation>Service definition of function policynet__getOutageProbeSettingsRequest</documentation>
      <input message="tns:getOutageProbeSettingsRequest"/>
      <output message="tns:getOutageProbeSettingsResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="setDeployOnNextConnect">
      <documentation>Service definition of function policynet__setDeployOnNextConnectRequest</documentation>
      <input message="tns:setDeployOnNextConnectRequest"/>
      <output message="tns:setDeployOnNextConnectResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="createCustomerRequest">
      <documentation>Creates a Utility Customer</documentation>
      <input message="tns:createCustomerRequest"/>
      <output message="tns:createCustomerResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="updateCustomerRequest">
      <documentation>Updates an existing Customer .</documentation>
      <input message="tns:updateCustomerRequest"/>
      <output message="tns:updateCustomerResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="searchCustomersRequest">
      <documentation>Used to search Utility Customers</documentation>
      <input message="tns:searchCustomersRequest"/>
      <output message="tns:searchCustomersResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="deleteCustomerRequest">
      <documentation>Service definition of function policynet__deleteCustomerRequest</documentation>
      <input message="tns:deleteCustomerRequest"/>
      <output message="tns:deleteCustomerResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="suspendCustomerRequest">
      <documentation>Service definition of function policynet__suspendCustomerRequest</documentation>
      <input message="tns:suspendCustomerRequest"/>
      <output message="tns:suspendCustomerResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="cancelCustomerRequest">
      <documentation>Service definition of function policynet__cancelCustomerRequest</documentation>
      <input message="tns:cancelCustomerRequest"/>
      <output message="tns:cancelCustomerResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="reactivateCustomerRequest">
      <documentation>Service definition of function policynet__reactivateCustomerRequest</documentation>
      <input message="tns:reactivateCustomerRequest"/>
      <output message="tns:reactivateCustomerResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="getMeterOptionsRequest">
      <documentation>Used to get MeterOptions</documentation>
      <input message="tns:getMeterOptionsRequest"/>
      <output message="tns:getMeterOptionsResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="createMeterOrderRequest">
      <documentation>Creates a Meter Order</documentation>
      <input message="tns:createMeterOrderRequest"/>
      <output message="tns:createMeterOrderResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="searchMeterOrdersRequest">
      <documentation>Used to search meter orders</documentation>
      <input message="tns:searchMeterOrdersRequest"/>
      <output message="tns:searchMeterOrdersResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="getStartingMeterIdRequest">
      <documentation>Service definition of function policynet__getStartingMeterIdRequest</documentation>
      <input message="tns:getStartingMeterIdRequest"/>
      <output message="tns:getStartingMeterIdResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="recalculateSystemReliablityRequest">
      <documentation>Service definition of function policynet__recalculateSystemReliablityRequest</documentation>
      <input message="tns:recalculateSystemReliablityRequest"/>
      <output message="tns:recalculateSystemReliablityResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="createMeterReaderPasswordReport">
      <documentation>Service definition of function policynet__createMeterReaderPasswordReportRequest</documentation>
      <input message="tns:createMeterReaderPasswordReportRequest"/>
      <output message="tns:createMeterPasswordReportResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="resetUserPasswordRequest">
      <documentation>Service definition of function policynet__resetUserPasswordRequest</documentation>
      <input message="tns:resetUserPasswordRequest"/>
      <output message="tns:resetUserPasswordResponse"/>
    </operation>
    <operation name="searchConsumerTypesRequest">
      <documentation>Used to search consumer types</documentation>
      <input message="tns:searchConsumerTypesRequest"/>
      <output message="tns:searchConsumerTypesResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="searchMeterOrderTemplatesRequest">
      <documentation>Used to search meter order templates</documentation>
      <input message="tns:searchMeterOrderTemplatesRequest"/>
      <output message="tns:searchMeterOrderTemplatesResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="getCustomerDetailsRequest">
      <documentation>Used to get Customer Details</documentation>
      <input message="tns:getCustomerDetailsRequest"/>
      <output message="tns:getCustomerDetailsResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="getSecurityQuestionsRequest">
      <documentation>Used to get Security Questions</documentation>
      <input message="tns:getSecurityQuestionsRequest"/>
      <output message="tns:GetSecurityQuestionsResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="verifyUserRequest">
      <documentation>Used to verify user.</documentation>
      <input message="tns:verifyUserRequest"/>
      <output message="tns:verifyUserResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="searchEmailAddresses">
      <documentation>Service definition of function policynet__searchEmailAddressesRequest</documentation>
      <input message="tns:searchEmailAddressesRequest"/>
      <output message="tns:searchEmailAddressesResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="searchEmailToSmsAddresses">
      <documentation>Used to get customer emailToSms addresses</documentation>
      <input message="tns:searchEmailToSmsAddressesRequest"/>
      <output message="tns:searchEmailToSmsAddressesResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="enableUserNotifications">
      <documentation>Service definition of function policynet__enableUserNotificationsRequest</documentation>
      <input message="tns:enableUserNotificationsRequest"/>
      <output message="tns:enableUserNotificationsResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="disableUserNotifications">
      <documentation>Service definition of function policynet__disableUserNotificationsRequest</documentation>
      <input message="tns:disableUserNotificationsRequest"/>
      <output message="tns:disableUserNotificationsResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="updateConsumer">
      <documentation>Service definition of function policynet__updateConsumerRequest</documentation>
      <input message="tns:updateConsumerRequest"/>
      <output message="tns:updateConsumerResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="deleteConsumer">
      <documentation>Service definition of function policynet__deleteConsumerRequest</documentation>
      <input message="tns:deleteConsumerRequest"/>
      <output message="tns:deleteConsumerResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="createWaterMeterStatsReport">
      <documentation>Service definition of function policynet__createWaterMeterStatsReportRequest</documentation>
      <input message="tns:createWaterMeterStatsReportRequest"/>
      <output message="tns:createWaterMeterStatsReportResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="createGasMeterStatsReport">
      <documentation>Service definition of function policynet__createGasMeterStatsReportRequest</documentation>
      <input message="tns:createGasMeterStatsReportRequest"/>
      <output message="tns:createGasMeterStatsReportResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="createWaterMeterAlertsReport">
      <documentation>Service definition of function policynet__createWaterMeterAlertsReportRequest</documentation>
      <input message="tns:createWaterMeterAlertsReportRequest"/>
      <output message="tns:createWaterMeterAlertsReportResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="getAverageCoordinates">
      <documentation>Service definition of function policynet__getAverageCoordinatesRequest</documentation>
      <input message="tns:getAverageCoordinatesRequest"/>
      <output message="tns:getAverageCoordinatesResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="migrateSmccs">
      <documentation>Service definition of function policynet__migrateSmccsRequest</documentation>
      <input message="tns:migrateSmccsRequest"/>
      <output message="tns:migrateSmccsResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="searchMeterTypes">
      <documentation>Service definition of function policynet__searchMeterTypesRequest</documentation>
      <input message="tns:searchMeterTypesRequest"/>
      <output message="tns:searchMeterTypesResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="searchMapSubstations">
      <documentation>Service definition of function policynet__searchMapSubstationsRequest</documentation>
      <input message="tns:searchMapSubstationsRequest"/>
      <output message="tns:searchMapSubstationsResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="searchMapDevices">
      <documentation>Service definition of function policynet__searchMapDevicesRequest</documentation>
      <input message="tns:searchMapDevicesRequest"/>
      <output message="tns:searchMapDevicesResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="getMapFilters">
      <documentation>Service definition of function policynet__getMapFiltersRequest</documentation>
      <input message="tns:getMapFiltersRequest"/>
      <output message="tns:getMapFiltersResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="getBandSettings">
      <documentation>Service definition of function policynet__getBandSettingsRequest</documentation>
      <input message="tns:getBandSettingsRequest"/>
      <output message="tns:getBandSettingsResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="setBandSettings">
      <documentation>NOTE:  Setting the voltage band settings will undeploy ALL instances of Voltage band monitoring policies since they will still have the old voltage band settings.  User will need to manually redeploy the policies which will then inherit the new voltage band settings.</documentation>
      <input message="tns:setBandSettingsRequest"/>
      <output message="tns:setBandSettingsResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="searchMapWaterDistricts">
      <documentation>Service definition of function policynet__searchMapWaterDistrictsRequest</documentation>
      <input message="tns:searchMapWaterDistrictsRequest"/>
      <output message="tns:searchMapWaterDistrictsResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="createMapEventReport">
      <documentation>Service definition of function policynet__createMapEventReportRequest</documentation>
      <input message="tns:createMapEventReportRequest"/>
      <output message="tns:createMapEventReportResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="createMapWaterReadReport">
      <documentation>Service definition of function policynet__createMapWaterReadReportRequest</documentation>
      <input message="tns:createMapWaterReadReportRequest"/>
      <output message="tns:createMapWaterReadReportResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="createHanDevices">
      <documentation>Service definition of function policynet__createHanDevicesRequest</documentation>
      <input message="tns:createHanDevicesRequest"/>
      <output message="tns:createHanDevicesResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="getUserInfo">
      <documentation>Used to get User Details</documentation>
      <input message="tns:getUserInfoRequest"/>
      <output message="tns:getUserInfoResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="getPolicyBillingCycleDates">
      <documentation>Service definition of function policynet__getPolicyBillingCycleDates</documentation>
      <input message="tns:getPolicyBillingCycleDates"/>
      <output message="tns:BillingCycleCalendar"/>
    </operation>
    <operation name="updateDevice">
      <documentation>Service definition of function policynet__updateDeviceRequest</documentation>
      <input message="tns:updateDeviceRequest"/>
      <output message="tns:updateDeviceResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="searchMeterCommsTypes">
      <documentation>Service definition of function policynet__searchMeterCommsTypesRequest</documentation>
      <input message="tns:searchMeterCommsTypesRequest"/>
      <output message="tns:searchMeterCommsTypesResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="searchMeterSubscriptionsRequest">
      <documentation>Service definition of function policynet__searchMeterSubscriptionsRequest</documentation>
      <input message="tns:searchMeterSubscriptionsRequest"/>
      <output message="tns:searchMeterSubscriptionsResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="createMeterSubscriptionRequest">
      <documentation>Creates a Meter Subscription Assignment</documentation>
      <input message="tns:createMeterSubscriptionRequest"/>
      <output message="tns:createMeterSubscriptionResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="searchVendors">
      <documentation>Service definition of function policynet__searchVendorsRequest</documentation>
      <input message="tns:searchVendorsRequest"/>
      <output message="tns:searchVendorsResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="getProvisioningDefaultsRequest">
      <documentation>Service definition of function policynet__getProvisioningDefaultsRequest</documentation>
      <input message="tns:getProvisioningDefaultsRequest"/>
      <output message="tns:getProvisioningDefaultsResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="setProvisioningDefaultsRequest">
      <documentation>Service definition of function policynet__setProvisioningDefaultsRequest</documentation>
      <input message="tns:setProvisioningDefaultsRequest"/>
      <output message="tns:setProvisioningDefaultsResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="getAECredentialsRequest">
      <documentation>Service definition of function policynet__getAECredentialsRequest</documentation>
      <input message="tns:getAECredentialsRequest"/>
      <output message="tns:getAECredentialsResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="setAECredentialsRequest">
      <documentation>Service definition of function policynet__setAECredentialsRequest</documentation>
      <input message="tns:setAECredentialsRequest"/>
      <output message="tns:setAECredentialsResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="getExportColumnsRequest">
      <documentation>Service definition of function policynet__getExportColumnsRequest</documentation>
      <input message="tns:getExportColumnsRequest"/>
      <output message="tns:getExportColumnsResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="searchDataExportTargetsRequest">
      <documentation>Service definition of function policynet__searchDataExportTargetsRequest</documentation>
      <input message="tns:searchDataExportTargetsRequest"/>
      <output message="tns:searchDataExportTargetsResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="searchDataExportTopics">
      <documentation>Service definition of function policynet__searchDataExportTopicsRequest</documentation>
      <input message="tns:searchDataExportTopicsRequest"/>
      <output message="tns:SearchDataExportTopicsResponse"/>
    </operation>
    <operation name="createDataExportTopic">
      <documentation>Creates a Data Export Topic</documentation>
      <input message="tns:createDataExportTopicRequest"/>
      <output message="tns:createDataExportTopicResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="deleteDataExportTopic">
      <documentation>Service definition of function policynet__deleteDataExportTopicRequest</documentation>
      <input message="tns:deleteDataExportTopicRequest"/>
      <output message="tns:deleteDataExportTopicResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="createDataExportReport">
      <documentation>Service definition of function policynet__createDataExportReportRequest</documentation>
      <input message="tns:createDataExportReportRequest"/>
      <output message="tns:createDataExportReportResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="swapServicePoints">
      <documentation>Service definition of function policynet__swapServicePointsRequest</documentation>
      <input message="tns:swapServicePointsRequest"/>
      <output message="tns:swapServicePointsResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="assignVendor">
      <documentation>Service definition of function policynet__assignVendorRequest</documentation>
      <input message="tns:assignVendorRequest"/>
      <output message="tns:assignVendorResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="getMmcInfo">
      <documentation>Service definition of function policynet__getMmcInfoRequest</documentation>
      <input message="tns:getMmcInfoRequest"/>
      <output message="tns:getMmcInfoResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="getAuthConfig">
      <documentation>Service definition of function policynet__getAuthConfigRequest</documentation>
      <input message="tns:getAuthConfigRequest"/>
      <output message="tns:getAuthConfigResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="setAuthConfig">
      <documentation>Service definition of function policynet__setAuthConfigRequest</documentation>
      <input message="tns:setAuthConfigRequest"/>
      <output message="tns:setAuthConfigResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="enableUserMultifactorAuth">
      <documentation>NOTE:  Does not apply to users with LDAP authentication type selected.</documentation>
      <input message="tns:enableUserMultifactorAuthRequest"/>
      <output message="tns:enableUserMultifactorAuthResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="disableUserMultifactorAuth">
      <documentation>NOTE:  Does not apply to users with LDAP authentication type selected.</documentation>
      <input message="tns:disableUserMultifactorAuthRequest"/>
      <output message="tns:disableUserMultifactorAuthResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="createDemandReadReport">
      <documentation>Service definition of function policynet__createDemandReadReportRequest</documentation>
      <input message="tns:createDemandReadReportRequest"/>
      <output message="tns:createDemandReadReportResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="searchDevicesMsp">
      <documentation>Used to interrogate existing devices. Use the * character for wild-card searches.</documentation>
      <input message="tns:searchDevicesMspRequest"/>
      <output message="tns:searchDevicesMspResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="searchTransportTypesRequest">
      <documentation>Used to search transport types</documentation>
      <input message="tns:searchTransportTypesRequest"/>
      <output message="tns:searchTransportTypesResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="getUserEvents">
      <documentation>Service definition of function policynet__getUserEventsRequest</documentation>
      <input message="tns:getUserEventsRequest"/>
      <output message="tns:getUserEventsResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="searchConsumerKeys">
      <documentation>Used to search transport types</documentation>
      <input message="tns:searchConsumerKeysRequest"/>
      <output message="tns:searchConsumerKeysResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="createScmDailyReport">
      <documentation>Service definition of function policynet__createScmDailyReportRequest</documentation>
      <input message="tns:createScmDailyReportRequest"/>
      <output message="tns:createScmDailyReportResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="createScmCycleReport">
      <documentation>Service definition of function policynet__createScmCycleReportRequest</documentation>
      <input message="tns:createScmCycleReportRequest"/>
      <output message="tns:createScmCycleReportResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="createScmTransactionReport">
      <documentation>Service definition of function policynet__createScmTransactionReportRequest</documentation>
      <input message="tns:createScmTransactionReportRequest"/>
      <output message="tns:createScmTransactionReportResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="createAosShipfile">
      <documentation>Service definition of function policynet__createAosShipfileRequest</documentation>
      <input message="tns:createAosShipfileRequest"/>
      <output message="tns:createAosShipfileResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="createBlinkReport">
      <documentation>Service definition of function policynet__createBlinkReportRequest</documentation>
      <input message="tns:createBlinkReportRequest"/>
      <output message="tns:createBlinkReportResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="createScmLicenseReport">
      <documentation>Service definition of function policynet__createScmLicenseReportRequest</documentation>
      <input message="tns:createScmLicenseReportRequest"/>
      <output message="tns:createScmLicenseReportResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="createScmYearlyReport">
      <documentation>Service definition of function policynet__createScmYearlyReportRequest</documentation>
      <input message="tns:createScmYearlyReportRequest"/>
      <output message="tns:createScmYearlyReportResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="createScmMonthlyReport">
      <documentation>Service definition of function policynet__createScmMonthlyReportRequest</documentation>
      <input message="tns:createScmMonthlyReportRequest"/>
      <output message="tns:createScmMonthlyReportResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="createAclaraMarriageFile">
      <documentation>Service definition of function policynet__createAclaraMarriageFileRequest</documentation>
      <input message="tns:createAclaraMarriageFileRequest"/>
      <output message="tns:createAclaraMarriageFileResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="createScmTransactionHistoryReport">
      <documentation>Service definition of function policynet__createScmTransactionHistoryReportRequest</documentation>
      <input message="tns:createScmTransactionHistoryReportRequest"/>
      <output message="tns:createScmTransactionHistoryReportResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="searchApplicationPackages">
      <documentation>Service definition of function policynet__searchApplicationPackagesRequest</documentation>
      <input message="tns:searchApplicationPackagesRequest"/>
      <output message="tns:searchApplicationPackagesResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="deleteApplicationPackage">
      <documentation>Service definition of function policynet__deleteApplicationPackageRequest</documentation>
      <input message="tns:deleteApplicationPackageRequest"/>
      <output message="tns:deleteApplicationPackageResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="updateApplicationPackageState">
      <documentation>Service definition of function policynet__updateApplicationPackageStateRequest</documentation>
      <input message="tns:updateApplicationPackageStateRequest"/>
      <output message="tns:updateApplicationPackageStateResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="downloadApplicationPackage">
      <documentation>Service definition of function policynet__downloadApplicationPackageRequest</documentation>
      <input message="tns:downloadApplicationPackageRequest"/>
      <output message="tns:downloadApplicationPackageResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="uploadApplicationPackage">
      <documentation>Used to upload device firmware packages.  The SSID in the package data must be unique for each firmware package.</documentation>
      <input message="tns:uploadApplicationPackageRequest"/>
      <output message="tns:uploadApplicationPackageResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="activateSoftwarePolicy">
      <documentation>Service definition of function policynet__activateSoftwarePolicyRequest</documentation>
      <input message="tns:activateSoftwarePolicyRequest"/>
      <output message="tns:activateSoftwarePolicyResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
    <operation name="deactivateSoftwarePolicy">
      <documentation>Service definition of function policynet__deactivateSoftwarePolicyRequest</documentation>
      <input message="tns:deactivateSoftwarePolicyRequest"/>
      <output message="tns:deactivateSoftwarePolicyResponse"/>
      <fault name="Exception" message="tns:ExceptionFault"/>
    </operation>
  </portType>
  <binding name="PolicyNet" type="tns:PolicyNetPortType">
    <SOAP:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/>
    <operation name="login">
      <SOAP:operation soapAction="login"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="logout">
      <SOAP:operation soapAction="logout"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="createUserAccount">
      <SOAP:operation soapAction="createUserAccount"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="updateUserAccount">
      <SOAP:operation soapAction="updateUserAccount"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="searchUserAccounts">
      <SOAP:operation soapAction="searchUserAccounts"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="createUser">
      <SOAP:operation soapAction="createUser"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="updateUser">
      <SOAP:operation soapAction="updateUser"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="updateUserPassword">
      <SOAP:operation soapAction="updateUserPassword"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="searchUsers">
      <SOAP:operation soapAction="searchUsers"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="deleteUser">
      <SOAP:operation soapAction="deleteUser"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="enableUser">
      <SOAP:operation soapAction="enableUser"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="disableUser">
      <SOAP:operation soapAction="disableUser"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="unlockUser">
      <SOAP:operation soapAction="unlockUser"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="enableUserPasswordAging">
      <SOAP:operation soapAction="enableUserPasswordAging"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="disableUserPasswordAging">
      <SOAP:operation soapAction="disableUserPasswordAging"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="searchRoles">
      <SOAP:operation soapAction="searchRoles"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="getUserSecurityRules">
      <SOAP:operation soapAction="getUserSecurityRules"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="setUserSecurityRules">
      <SOAP:operation soapAction="setUserSecurityRules"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="getClockDriftSettings">
      <SOAP:operation soapAction="getClockDriftSettings"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="setClockDriftSettings">
      <SOAP:operation soapAction="setClockDriftSettings"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="getRadiusSettings">
      <SOAP:operation soapAction="getRadiusSettings"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="setRadiusSettings">
      <SOAP:operation soapAction="setRadiusSettings"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="searchNasClients">
      <SOAP:operation soapAction="searchNasClients"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="createNasClient">
      <SOAP:operation soapAction="createNasClient"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="updateNasClient">
      <SOAP:operation soapAction="updateNasClient"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="deleteNasClient">
      <SOAP:operation soapAction="deleteNasClient"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="searchRadiusProxies">
      <SOAP:operation soapAction="searchRadiusProxies"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="createRadiusProxy">
      <SOAP:operation soapAction="createRadiusProxy"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="updateRadiusProxy">
      <SOAP:operation soapAction="updateRadiusProxy"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="deleteRadiusProxy">
      <SOAP:operation soapAction="deleteRadiusProxy"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="forceDeployMulticastPolicy">
      <SOAP:operation soapAction="forceDeployMulticastPolicy"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="createMeterReadSchedule">
      <SOAP:operation soapAction="createMeterReadSchedule"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="updateMeterReadSchedule">
      <SOAP:operation soapAction="updateMeterReadSchedule"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="deleteMeterReadSchedule">
      <SOAP:operation soapAction="deleteMeterReadSchedule"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="deployMeterReadSchedule">
      <SOAP:operation soapAction="deployMeterReadSchedule"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="undeployMeterReadSchedule">
      <SOAP:operation soapAction="undeployMeterReadSchedule"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="createMeterControlSchedule">
      <SOAP:operation soapAction="createMeterControlSchedule"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="updateMeterControlSchedule">
      <SOAP:operation soapAction="updateMeterControlSchedule"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="deleteMeterControlSchedule">
      <SOAP:operation soapAction="deleteMeterControlSchedule"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="deployMeterControlSchedule">
      <SOAP:operation soapAction="deployMeterControlSchedule"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="undeployMeterControlSchedule">
      <SOAP:operation soapAction="undeployMeterControlSchedule"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="createLoadControlSchedule">
      <SOAP:operation soapAction="createLoadControlSchedule"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="updateLoadControlSchedule">
      <SOAP:operation soapAction="updateLoadControlSchedule"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="deleteLoadControlSchedule">
      <SOAP:operation soapAction="deleteLoadControlSchedule"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="deployLoadControlSchedule">
      <SOAP:operation soapAction="deployLoadControlSchedule"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="undeployLoadControlSchedule">
      <SOAP:operation soapAction="undeployLoadControlSchedule"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="createPanPolicy">
      <SOAP:operation soapAction="createPanPolicy"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="updatePanPolicy">
      <SOAP:operation soapAction="updatePanPolicy"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="deletePanPolicy">
      <SOAP:operation soapAction="deletePanPolicy"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="deployPanPolicy">
      <SOAP:operation soapAction="deployPanPolicy"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="undeployPanPolicy">
      <SOAP:operation soapAction="undeployPanPolicy"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="createPanDevices">
      <SOAP:operation soapAction="createPanDevices"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="setPanDeviceLabel">
      <SOAP:operation soapAction="setPanDeviceLabel"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="removePanDeviceLabel">
      <SOAP:operation soapAction="removePanDeviceLabel"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="assignPanServicePoint">
      <SOAP:operation soapAction="assignPanServicePoint"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="assignWaterServicePoint">
      <SOAP:operation soapAction="assignWaterServicePoint"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="createWaterMeterRead">
      <SOAP:operation soapAction="createWaterMeterRead"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="createWaterMeterReadSchedule">
      <SOAP:operation soapAction="createWaterMeterReadSchedule"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="updateWaterMeterReadSchedule">
      <SOAP:operation soapAction="updateWaterMeterReadSchedule"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="deleteWaterMeterReadSchedule">
      <SOAP:operation soapAction="deleteWaterMeterReadSchedule"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="deployWaterMeterReadSchedule">
      <SOAP:operation soapAction="deployWaterMeterReadSchedule"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="undeployWaterMeterReadSchedule">
      <SOAP:operation soapAction="undeployWaterMeterReadSchedule"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="createGasMeterReadSchedule">
      <SOAP:operation soapAction="createGasMeterReadSchedule"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="updateGasMeterReadSchedule">
      <SOAP:operation soapAction="updateGasMeterReadSchedule"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="deleteGasMeterReadSchedule">
      <SOAP:operation soapAction="deleteGasMeterReadSchedule"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="deployGasMeterReadSchedule">
      <SOAP:operation soapAction="deployGasMeterReadSchedule"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="undeployGasMeterReadSchedule">
      <SOAP:operation soapAction="undeployGasMeterReadSchedule"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="createDeviceControlSchedule">
      <SOAP:operation soapAction="createDeviceControlSchedule"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="updateDeviceControlSchedule">
      <SOAP:operation soapAction="updateDeviceControlSchedule"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="deleteDeviceControlSchedule">
      <SOAP:operation soapAction="deleteDeviceControlSchedule"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="deployDeviceControlSchedule">
      <SOAP:operation soapAction="deployDeviceControlSchedule"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="undeployDeviceControlSchedule">
      <SOAP:operation soapAction="undeployDeviceControlSchedule"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="createWaterMeterRegisterReport">
      <SOAP:operation soapAction="createWaterMeterRegisterReport"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="createWaterMeterIntervalReport">
      <SOAP:operation soapAction="createWaterMeterIntervalReport"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="createGasMeterRegisterReport">
      <SOAP:operation soapAction="createGasMeterRegisterReport"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="createGasMeterIntervalReport">
      <SOAP:operation soapAction="createGasMeterIntervalReport"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="createServerPolicy">
      <SOAP:operation soapAction="createServerPolicy"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="updateServerPolicy">
      <SOAP:operation soapAction="updateServerPolicy"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="deleteServerPolicy">
      <SOAP:operation soapAction="deleteServerPolicy"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="deployServerPolicy">
      <SOAP:operation soapAction="deployServerPolicy"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="undeployServerPolicy">
      <SOAP:operation soapAction="undeployServerPolicy"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="searchPolicies">
      <SOAP:operation soapAction="searchPolicies"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="searchPoliciesList">
      <SOAP:operation soapAction="searchPoliciesList"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="getDeviceStateSummary">
      <SOAP:operation soapAction="getDeviceStateSummaryDevices"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="searchDevicesWildcard">
      <SOAP:operation soapAction="searchDevicesWildcard"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="searchDevices">
      <SOAP:operation soapAction="searchDevices"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="searchDevicesBaseRequest">
      <SOAP:operation/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
      </output>
    </operation>
    <operation name="searchDeviceSiblings">
      <SOAP:operation soapAction="searchDeviceSiblings"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="searchDeviceList">
      <SOAP:operation soapAction="searchDeviceList"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="searchCommAssets">
      <SOAP:operation soapAction="searchCommAssets"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="deleteCommAssetRequest">
      <SOAP:operation soapAction="deleteCommAsset"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="createMeterPasswordReport">
      <SOAP:operation soapAction="createMeterPasswordReport"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="updateDeviceBinding">
      <SOAP:operation soapAction="updateDeviceBinding"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="getDevicesStatuses">
      <SOAP:operation soapAction="getDevicesStatuses"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="getNameList">
      <SOAP:operation soapAction="getNameList"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="previewPolicyTargetCount">
      <SOAP:operation soapAction="previewPolicyTargetCount"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="searchPolicyTargets">
      <SOAP:operation soapAction="searchPolicyTargets"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="syncPolicyTargets">
      <SOAP:operation soapAction="syncPolicyTargets"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="createCustomDeviceAttributes">
      <SOAP:operation soapAction="createCustomDeviceAttributes"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="deleteCustomDeviceAttributes">
      <SOAP:operation soapAction="deleteCustomDeviceAttributes"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="searchCustomDeviceAttributes">
      <SOAP:operation soapAction="searchCustomDeviceAttributes"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="createIntervalReport">
      <SOAP:operation soapAction="createIntervalReport"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="createValidatedIntervalReport">
      <SOAP:operation soapAction="createValidatedIntervalReport"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="createRegisterReport">
      <SOAP:operation soapAction="createRegisterReport"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="createRegisterReportMSP">
      <SOAP:operation soapAction="createRegisterReportMSP"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="searchPanTopology">
      <SOAP:operation soapAction="searchPanTopology"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="createDeviceHistoryReport">
      <SOAP:operation soapAction="createDeviceHistoryReport"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="searchGroups">
      <SOAP:operation soapAction="searchGroups"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="uploadFirmwarePackage">
      <SOAP:operation soapAction="uploadFirmwarePackage"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="importShipFile">
      <SOAP:operation soapAction="importShipFile"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="exportShipFile">
      <SOAP:operation soapAction="exportShipFile"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="uploadDeviceExportCertificate">
      <SOAP:operation soapAction="uploadDeviceExportCertificate"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="searchDeviceExportCertificates">
      <SOAP:operation soapAction="searchDeviceExportCertificates"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="searchFirmwarePackages">
      <SOAP:operation soapAction="searchFirmwarePackages"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="deleteFirmwarePackage">
      <SOAP:operation soapAction="deleteFirmwarePackage"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="updateFirmwarePackageState">
      <SOAP:operation soapAction="updateFirmwarePackageState"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="downloadFirmwarePackage">
      <SOAP:operation soapAction="downloadFirmwarePackage"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="createMeterProgram">
      <SOAP:operation soapAction="createMeterProgram"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="searchMeterPrograms">
      <SOAP:operation soapAction="searchMeterPrograms"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="updateMeterProgram">
      <SOAP:operation soapAction="updateMeterProgram"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="deleteMeterProgram">
      <SOAP:operation soapAction="deleteMeterProgram"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="createQosProfile">
      <SOAP:operation soapAction="createQosProfile"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="searchQosProfiles">
      <SOAP:operation soapAction="searchQosProfiles"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="updateQosProfile">
      <SOAP:operation soapAction="updateQosProfile"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="deleteQosProfile">
      <SOAP:operation soapAction="deleteQosProfile"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="searchRadiusDictionaries">
      <SOAP:operation soapAction="searchRadiusDictionaries"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="createPowerQualityReport">
      <SOAP:operation soapAction="createPowerQualityReport"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="createPowerQualityProfileReport">
      <SOAP:operation soapAction="createPowerQualityProfileReport"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="getVoltageBandSettings">
      <SOAP:operation soapAction="getVoltageBandSettings"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="setVoltageBandSettings">
      <SOAP:operation soapAction="setVoltageBandSettings"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="createOutageStatsReport">
      <SOAP:operation soapAction="createOutageStatsReport"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="createMeterProgramResult">
      <SOAP:operation soapAction="createMeterProgramResult"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="createSWUpgradeResult">
      <SOAP:operation soapAction="createSWUpgradeResult"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="getEventTrends">
      <SOAP:operation soapAction="getEventTrends"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="getEventSummary">
      <SOAP:operation soapAction="getEventSummary"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="createEventsReport">
      <SOAP:operation soapAction="createEventsReport"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="createSystemOutagesReport">
      <SOAP:operation soapAction="createSystemOutagesReport"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="getSystemOutagesSummary">
      <SOAP:operation soapAction="getSystemOutagesSummary"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="searchFeeders">
      <SOAP:operation soapAction="searchFeeders"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="createChronicReadFailureReport">
      <SOAP:operation soapAction="createChronicReadFailureReport"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="createFailedEnforcementReport">
      <SOAP:operation soapAction="createFailedEnforcementReport"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="createClockDriftReport">
      <SOAP:operation soapAction="createClockDriftReport"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="createClockAdjustmentReport">
      <SOAP:operation soapAction="createClockAdjustmentReport"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="createRadiusAccountingReport">
      <SOAP:operation soapAction="createRadiusAccountingReport"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="createIntervalDataSummaryReport">
      <SOAP:operation soapAction="createIntervalDataSummaryReport"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="createIntervalReadGapReport">
      <SOAP:operation soapAction="createIntervalReadGapReport"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="createSystemReliabilityReport">
      <SOAP:operation soapAction="createSystemReliabilityReport"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="getSystemReliabilityConfig">
      <SOAP:operation soapAction="getSystemReliabilityConfig"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="setSystemReliabilityConfig">
      <SOAP:operation soapAction="setSystemReliabilityConfig"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="createDeviceGroup">
      <SOAP:operation soapAction="createDeviceGroup"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="updateDeviceGroup">
      <SOAP:operation soapAction="updateDeviceGroup"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="deleteDeviceGroup">
      <SOAP:operation soapAction="deleteDeviceGroup"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="getGroupCount">
      <SOAP:operation soapAction="getGroupCount"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="getDeviceGroupAttributeValues">
      <SOAP:operation soapAction="getDeviceGroupAttributeValues"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="getPolicyStatus">
      <SOAP:operation soapAction="getPolicyStatus"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="getPolicyDeploymentStats">
      <SOAP:operation/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="createPolicyDeploymentReport">
      <SOAP:operation soapAction="createPolicyDeploymentReport"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="createPolicyEnforcementReport">
      <SOAP:operation soapAction="createPolicyEnforcementReport"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="getDeviceGroupChange">
      <SOAP:operation soapAction="getDeviceGroupChange"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="getDeviceOperationalStateChange">
      <SOAP:operation soapAction="getDeviceOperationalStateChange"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="searchAuditTrail">
      <SOAP:operation soapAction="searchAuditTrail"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="createServicePoints">
      <SOAP:operation soapAction="createServicePoints"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="updateServicePoints">
      <SOAP:operation soapAction="updateServicePoints"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="deleteServicePoint">
      <SOAP:operation soapAction="deleteServicePoint"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="removeServicePointFromDevice">
      <SOAP:operation soapAction="removeServicePointFromDevice"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="updateDeviceServicePoint">
      <SOAP:operation soapAction="updateDeviceServicePoint"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="updateDeviceOperationalState">
      <SOAP:operation soapAction="updateDeviceOperationalState"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="updateWaterMeterOperationalState">
      <SOAP:operation soapAction="updateWaterMeterOperationalState"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="searchServicePoint">
      <SOAP:operation soapAction="searchServicePoint"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="searchServicePointHistory">
      <SOAP:operation soapAction="searchServicePointHistory"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="createRole">
      <SOAP:operation soapAction="createRole"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="updateRole">
      <SOAP:operation soapAction="updateRole"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="deleteRole">
      <SOAP:operation soapAction="deleteRole"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="createWimaxReport">
      <SOAP:operation soapAction="createWimaxReport"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="searchManufacturingStatus">
      <SOAP:operation soapAction="searchManufacturingStatus"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="omsDeviceStatus">
      <SOAP:operation soapAction="omsDeviceStatus"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="searchTopics">
      <SOAP:operation soapAction="searchTopics"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="searchConsumers">
      <SOAP:operation soapAction="searchConsumers"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="subscribeTopic">
      <SOAP:operation soapAction="subscribeTopic"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="unsubscribeTopic">
      <SOAP:operation soapAction="unsubscribeTopic"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="uploadNwkTopology">
      <SOAP:operation soapAction="uploadNwkTopology"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="consumeCommEvent">
      <SOAP:operation soapAction="consumeCommEvent"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="createProvisioningCryptoKey">
      <SOAP:operation soapAction="createProvisioningCryptoKey"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="getProvisioningCryptoKey">
      <SOAP:operation soapAction="getProvisioningCryptoKey"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="createMfgCustomer">
      <SOAP:operation soapAction="createMfgCustomer"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="updateMfgCustomer">
      <SOAP:operation soapAction="updateMfgCustomer"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="deleteMfgCustomer">
      <SOAP:operation soapAction="deleteMfgCustomer"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="searchMfgCustomer">
      <SOAP:operation soapAction="searchMfgCustomer"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="createMfgProduct">
      <SOAP:operation soapAction="createMfgProduct"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="updateMfgProduct">
      <SOAP:operation soapAction="updateMfgProduct"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="deleteMfgProduct">
      <SOAP:operation soapAction="deleteMfgProduct"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="searchMfgProduct">
      <SOAP:operation soapAction="searchMfgProduct"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="startMfgProductLine">
      <SOAP:operation soapAction="startMfgProductLine"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="stopMfgProductLine">
      <SOAP:operation soapAction="stopMfgProductLine"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="createMfgShipFile">
      <SOAP:operation soapAction="createMfgShipFile"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="searchMfgShipFile">
      <SOAP:operation soapAction="searchMfgShipFile"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="downloadMfgShipFile">
      <SOAP:operation soapAction="downloadMfgShipFile"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="searchMfgProductionRun">
      <SOAP:operation soapAction="searchMfgProductionRun"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="createNetworkEntryReport">
      <SOAP:operation soapAction="createNetworkEntryReport"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="createFailedNetworkEntryReport">
      <SOAP:operation soapAction="createFailedNetworkEntryReport"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="getEnergyStatusTrend">
      <SOAP:operation soapAction="getEnergyStatusTrend"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="getCommStatusTrend">
      <SOAP:operation soapAction="getCommStatusTrend"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="getDeviceErrorTrend">
      <SOAP:operation soapAction="getDeviceErrorTrend"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="getPolicySuccessTrend">
      <SOAP:operation soapAction="getPolicySuccessTrend"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="getAllDeviceTrends">
      <SOAP:operation soapAction="getAllDeviceTrends"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="getApproversList">
      <SOAP:operation soapAction="getApproversList"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="requestDeployApproval">
      <SOAP:operation soapAction="requestDeployApproval"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="cancelDeployApproval">
      <SOAP:operation soapAction="cancelDeployApproval"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="rejectDeployApproval">
      <SOAP:operation soapAction="rejectDeployApproval"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="approveDeploy">
      <SOAP:operation soapAction="approveDeploy"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="deactivatePolicy">
      <SOAP:operation soapAction="deactivatePolicy"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="getDualAuthPoliciesSettings">
      <SOAP:operation soapAction="getDualAuthPoliciesSettings"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="setDualAuthPoliciesSettings">
      <SOAP:operation soapAction="setDualAuthPoliciesSettings"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="createPlannedOutage">
      <SOAP:operation soapAction="createPlannedOutage"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="updatePlannedOutage">
      <SOAP:operation soapAction="updatePlannedOutage"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="deletePlannedOutage">
      <SOAP:operation soapAction="deletePlannedOutage"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="searchPlannedOutages">
      <SOAP:operation soapAction="searchPlannedOutages"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="addPanLabel">
      <SOAP:operation soapAction="addPanLabel"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="removeDeviceFromPan">
      <SOAP:operation soapAction="removeDeviceFromPan"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="updatePanLabel">
      <SOAP:operation soapAction="updatePanLabel"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="deletePanLabel">
      <SOAP:operation soapAction="deletePanLabel"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="getPanLabels">
      <SOAP:operation soapAction="getPanLabels"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="getSystemTime">
      <SOAP:operation/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
      </output>
    </operation>
    <operation name="setDataRetentionSettings">
      <SOAP:operation/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
      </output>
    </operation>
    <operation name="getDataRetentionSettings">
      <SOAP:operation/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
      </output>
    </operation>
    <operation name="setOpstateRestrictionSettings">
      <SOAP:operation soapAction="setOpstateRestrictionSettings"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="getOpstateRestrictionSettings">
      <SOAP:operation soapAction="getOpstateRestrictionSettings"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="setOffPeakDownloadWindowSettings">
      <SOAP:operation soapAction="setOffPeakDownloadWindowSettings"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="getOffPeakDownloadWindowSettings">
      <SOAP:operation soapAction="getOffPeakDownloadWindowSettings"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="getDailyReportingTimezoneSetting">
      <SOAP:operation soapAction="getDailyReportingTimezoneSetting"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="setDailyReportingTimezoneSetting">
      <SOAP:operation soapAction="setDailyReportingTimezoneSetting"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="getDemandDataStreamSettings">
      <SOAP:operation soapAction="getDemandDataStreamSettings"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="setDemandDataStreamSettings">
      <SOAP:operation soapAction="setDemandDataStreamSettings"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="getLdapAuthenticationSettings">
      <SOAP:operation soapAction="getLdapAuthenticationSettings"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="setLdapAuthenticationSettings">
      <SOAP:operation soapAction="setLdapAuthenticationSettings"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="generateSoapFault">
      <SOAP:operation soapAction="generateSoapFault"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="overrideDredControl">
      <SOAP:operation soapAction="overrideDredControl"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="searchDreds">
      <SOAP:operation soapAction="searchDreds"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="getDredLoadShedData">
      <SOAP:operation soapAction="getDredLoadShedData"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="getCardSwapSetting">
      <SOAP:operation soapAction="getCardSwapSetting"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="setCardSwapSetting">
      <SOAP:operation soapAction="setCardSwapSetting"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="getRetailers">
      <SOAP:operation soapAction="getRetailers"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="addRetailer">
      <SOAP:operation soapAction="addRetailer"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="updateRetailer">
      <SOAP:operation soapAction="updateRetailer"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="deleteRetailer">
      <SOAP:operation soapAction="deleteRetailer"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="getDistributors">
      <SOAP:operation soapAction="getDistributors"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="addDistributor">
      <SOAP:operation soapAction="addDistributor"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="updateDistributor">
      <SOAP:operation soapAction="updateDistributor"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="deleteDistributor">
      <SOAP:operation soapAction="deleteDistributor"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="refreshDeviceStatus">
      <SOAP:operation soapAction="refreshDeviceStatus"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="purgeDevice">
      <SOAP:operation soapAction="purgeDevice"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="createBaseStations">
      <SOAP:operation soapAction="createBaseStations"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="searchCustomEventTopics">
      <SOAP:operation/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
    </operation>
    <operation name="createCustomEventTopic">
      <SOAP:operation soapAction="createCustomEventTopic"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="deleteCustomEventTopic">
      <SOAP:operation soapAction="deleteCustomEventTopic"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="searchSlaRequest">
      <SOAP:operation soapAction="searchSlaRequest"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="createSlaRequest">
      <SOAP:operation soapAction="createSlaRequest"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="updateSlaRequest">
      <SOAP:operation soapAction="updateSlaRequest"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="deleteSlaRequest">
      <SOAP:operation soapAction="deleteSlaRequest"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="createSlaReportRequest">
      <SOAP:operation soapAction="createSlaReportRequest"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="setOutageProbeSettings">
      <SOAP:operation soapAction="setOutageProbeSettings"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="getOutageProbeSettings">
      <SOAP:operation soapAction="getOutageProbeSettings"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="setDeployOnNextConnect">
      <SOAP:operation soapAction="setDeployOnNextConnect"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="createCustomerRequest">
      <SOAP:operation soapAction="createCustomerRequest"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="updateCustomerRequest">
      <SOAP:operation soapAction="updateCustomerRequest"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="searchCustomersRequest">
      <SOAP:operation soapAction="searchCustomersRequest"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="deleteCustomerRequest">
      <SOAP:operation soapAction="deleteCustomerRequest"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="suspendCustomerRequest">
      <SOAP:operation soapAction="suspendCustomerRequest"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="cancelCustomerRequest">
      <SOAP:operation soapAction="cancelCustomerRequest"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="reactivateCustomerRequest">
      <SOAP:operation soapAction="reactivateCustomerRequest"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="getMeterOptionsRequest">
      <SOAP:operation soapAction="getMeterOptionsRequest"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="createMeterOrderRequest">
      <SOAP:operation soapAction="createMeterOrderRequest"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="searchMeterOrdersRequest">
      <SOAP:operation soapAction="searchMeterOrdersRequest"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="getStartingMeterIdRequest">
      <SOAP:operation soapAction="getStartingMeterIdRequest"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="recalculateSystemReliablityRequest">
      <SOAP:operation soapAction="recalculateSystemReliablityRequest"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="createMeterReaderPasswordReport">
      <SOAP:operation soapAction="createMeterReaderPasswordReport"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="resetUserPasswordRequest">
      <SOAP:operation/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
      </output>
    </operation>
    <operation name="searchConsumerTypesRequest">
      <SOAP:operation soapAction="searchConsumerTypesRequest"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="searchMeterOrderTemplatesRequest">
      <SOAP:operation soapAction="searchMeterOrderTemplatesRequest"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="getCustomerDetailsRequest">
      <SOAP:operation soapAction="getCustomerDetailsRequest"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="getSecurityQuestionsRequest">
      <SOAP:operation soapAction="getSecurityQuestionsRequest"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="verifyUserRequest">
      <SOAP:operation soapAction="verifyUserRequest"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="searchEmailAddresses">
      <SOAP:operation soapAction="searchEmailAddresses"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="searchEmailToSmsAddresses">
      <SOAP:operation soapAction="searchEmailToSmsAddresses"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="enableUserNotifications">
      <SOAP:operation soapAction="enableUserNotifications"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="disableUserNotifications">
      <SOAP:operation soapAction="disableUserNotifications"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="updateConsumer">
      <SOAP:operation soapAction="updateConsumer"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="deleteConsumer">
      <SOAP:operation soapAction="deleteConsumer"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="createWaterMeterStatsReport">
      <SOAP:operation soapAction="createWaterMeterStatsReport"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="createGasMeterStatsReport">
      <SOAP:operation soapAction="createGasMeterStatsReport"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="createWaterMeterAlertsReport">
      <SOAP:operation soapAction="createWaterMeterAlertsReport"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="getAverageCoordinates">
      <SOAP:operation soapAction="getAverageCoordinates"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="migrateSmccs">
      <SOAP:operation soapAction="migrateSmccs"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="searchMeterTypes">
      <SOAP:operation soapAction="searchMeterTypes"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="searchMapSubstations">
      <SOAP:operation soapAction="searchMapSubstations"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="searchMapDevices">
      <SOAP:operation soapAction="searchMapDevices"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="getMapFilters">
      <SOAP:operation soapAction="getMapFilters"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="getBandSettings">
      <SOAP:operation soapAction="getBandSettings"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="setBandSettings">
      <SOAP:operation soapAction="setBandSettings"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="searchMapWaterDistricts">
      <SOAP:operation soapAction="searchMapWaterDistricts"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="createMapEventReport">
      <SOAP:operation soapAction="createMapEventReport"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="createMapWaterReadReport">
      <SOAP:operation soapAction="createMapWaterReadReport"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="createHanDevices">
      <SOAP:operation soapAction="createHanDevices"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="getUserInfo">
      <SOAP:operation soapAction="getUserInfo"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="getPolicyBillingCycleDates">
      <SOAP:operation/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
      </output>
    </operation>
    <operation name="updateDevice">
      <SOAP:operation soapAction="updateDevice"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="searchMeterCommsTypes">
      <SOAP:operation soapAction="searchMeterCommsTypes"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="searchMeterSubscriptionsRequest">
      <SOAP:operation soapAction="searchMeterSubscriptionsRequest"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="createMeterSubscriptionRequest">
      <SOAP:operation soapAction="createMeterSubscriptionRequest"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="searchVendors">
      <SOAP:operation soapAction="searchVendors"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="getProvisioningDefaultsRequest">
      <SOAP:operation soapAction="getProvisioningDefaultsRequest"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="setProvisioningDefaultsRequest">
      <SOAP:operation soapAction="setProvisioningDefaultsRequest"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="getAECredentialsRequest">
      <SOAP:operation soapAction="getAECredentialsRequest"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="setAECredentialsRequest">
      <SOAP:operation soapAction="setAECredentialsRequest"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="getExportColumnsRequest">
      <SOAP:operation soapAction="getExportColumnsRequest"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="searchDataExportTargetsRequest">
      <SOAP:operation soapAction="searchDataExportTargetsRequest"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="searchDataExportTopics">
      <SOAP:operation/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
    </operation>
    <operation name="createDataExportTopic">
      <SOAP:operation soapAction="createDataExportTopic"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="deleteDataExportTopic">
      <SOAP:operation soapAction="deleteDataExportTopic"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="createDataExportReport">
      <SOAP:operation soapAction="createDataExportReport"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="swapServicePoints">
      <SOAP:operation soapAction="swapServicePoints"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="assignVendor">
      <SOAP:operation soapAction="assignVendor"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="getMmcInfo">
      <SOAP:operation soapAction="getMmcInfo"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="getAuthConfig">
      <SOAP:operation soapAction="getAuthConfig"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="setAuthConfig">
      <SOAP:operation soapAction="setAuthConfig"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="enableUserMultifactorAuth">
      <SOAP:operation soapAction="enableUserMultifactorAuth"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="disableUserMultifactorAuth">
      <SOAP:operation soapAction="disableUserMultifactorAuth"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="createDemandReadReport">
      <SOAP:operation soapAction="createDemandReadReport"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="searchDevicesMsp">
      <SOAP:operation soapAction="searchDevicesMsp"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="searchTransportTypesRequest">
      <SOAP:operation soapAction="searchTransportTypesRequest"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="getUserEvents">
      <SOAP:operation soapAction="getUserEvents"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="searchConsumerKeys">
      <SOAP:operation soapAction="searchConsumerKeys"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="createScmDailyReport">
      <SOAP:operation soapAction="createScmDailyReport"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="createScmCycleReport">
      <SOAP:operation soapAction="createScmCycleReport"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="createScmTransactionReport">
      <SOAP:operation soapAction="createScmTransactionReport"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="createAosShipfile">
      <SOAP:operation soapAction="createAosShipfile"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="createBlinkReport">
      <SOAP:operation soapAction="createBlinkReport"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="createScmLicenseReport">
      <SOAP:operation soapAction="createScmLicenseReport"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="createScmYearlyReport">
      <SOAP:operation soapAction="createScmYearlyReport"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="createScmMonthlyReport">
      <SOAP:operation soapAction="createScmMonthlyReport"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="createAclaraMarriageFile">
      <SOAP:operation soapAction="createAclaraMarriageFile"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="createScmTransactionHistoryReport">
      <SOAP:operation soapAction="createScmTransactionHistoryReport"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="searchApplicationPackages">
      <SOAP:operation soapAction="searchApplicationPackages"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="deleteApplicationPackage">
      <SOAP:operation soapAction="deleteApplicationPackage"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="updateApplicationPackageState">
      <SOAP:operation soapAction="updateApplicationPackageState"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="downloadApplicationPackage">
      <SOAP:operation soapAction="downloadApplicationPackage"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="uploadApplicationPackage">
      <SOAP:operation soapAction="uploadApplicationPackage"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="activateSoftwarePolicy">
      <SOAP:operation soapAction="activateSoftwarePolicy"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
    <operation name="deactivateSoftwarePolicy">
      <SOAP:operation soapAction="deactivateSoftwarePolicy"/>
      <input>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </input>
      <output>
        <SOAP:body parts="parameters" use="literal"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="LoginUsername"/>
        <SOAP:header use="literal" message="tns:PolicyNetHeader" part="SessionId"/>
      </output>
      <fault name="Exception">
        <SOAP:fault name="Exception" use="literal"/>
      </fault>
    </operation>
  </binding>
  <service name="PolicyNet">
    <documentation>
      GRID NET, INC. CONFIDENTIAL
      <p/>
      The source code contained or described herein and all documents related to the source code ("Material") are owned by Grid Net, Inc. or its suppliers or licensors. Title to the Material remains with Grid Net or its suppliers and licensors. The Material contains trade secrets and proprietary and confidential information of Grid Net or its suppliers and licensors. The Material is protected by worldwide copyright and trade secret laws and treaty provisions. No part of the Material may be used, copied, reproduced, modified, published, uploaded, posted, transmitted, distributed, or disclosed in any way without the prior express written permission of Grid Net, Inc.  No license under any patent, copyright, trade secret or other intellectual property right is granted to or conferred upon you by disclosure or delivery of the Material, either expressly, by implication, inducement, estoppel or otherwise. Any license under such intellectual property rights must be express and approved by Grid Net, Inc. in writing.
      <p/>
      Copyright (c) 2006-2015 Grid Net, Inc.  All Rights Reserved.
    </documentation>
    <port name="PolicyNet" binding="tns:PolicyNet">
      <SOAP:address location="https://policynetstg.intellihub.com.au:10000"/>
    </port>
  </service>
</definitions>